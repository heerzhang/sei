/** @jsx jsx */
let filtercomp={ id:Parameters.id };
const [filter, setFilter] = React.useState(filtercomp);
const {loading, error, items, loadMore } =useLookReports(filter);
console.log("zhai内部1看FollowingRecipes items=", items );
let     mycss=Parameters.padding+' 0 6px';
renderReturn(
  <div>
 <div>
    <div  css={{padding:"6px 0"}}>出现下列情况之一时，悬挂钢丝绳和补偿钢丝绳应当报废：<br/>
      ①出现笼状畸变、绳股挤出、扭结、部分压扁、弯折；<br/>②一个捻距内出现的断丝数大于下表列出的数值时：
    </div>

    <Table　css={{borderCollapse:'collapse'}}>
    <TableRow css={{height:`${Parameters.padding}`}}>
      <CCell rowSpan={2}>断丝的形式</CCell>
      <CCell colSpan={3}>钢丝绳的类型
      </CCell>
    </TableRow>
      <TableRow css={{height:`${Parameters.id}px`}}>
        <CCell>6×19</CCell>
        <CCell>{Parameters.id}</CCell>
        <CCell>9×19</CCell>
      </TableRow>
    <TableRow>
      <CCell>均布在外层绳股上</CCell>
      <CCell>24</CCell><CCell>30</CCell><CCell>34</CCell>
    </TableRow>
    <TableRow>
      <CCell>集中在一或者{items&&items[0].upLoadDate}两根外层绳股上</CCell>
      <CCell>24</CCell><CCell>30</CCell><CCell>34</CCell>
    </TableRow>
    <TableRow>
      <CCell>一根外绳股上相邻的断丝</CCell>
      <CCell>4</CCell><CCell>4</CCell><CCell>4</CCell>
    </TableRow>
    <TableRow>
      <CCell>股谷（缝）断丝 </CCell>
      {
      items? ( items.map(hit => {
                const myurl ='/inspect/'+hit.id;
                return (
                      <CCell>
                        <Link to={myurl} >
                          {hit.no}
                        </Link>
                      </CCell>
                    );
                    } ) )
                    :
           (<React.Fragment>
            <CCell>2</CCell> <CCell>3</CCell> <CCell>6</CCell>
           </React.Fragment>)
      }

    </TableRow>
    <TableRow>
      <Cell colSpan={4}>注：上述断丝数参考长度为一个捻距，约为6d（d表示钢丝绳
        的公称直径，mm）</Cell>
    </TableRow>
  </Table>
    <div css={{padding:`${Parameters.padding} 0 7px`}}>
    "③钢丝绳直径小于其公称直径{Parameters.id}的90%；<br/>"+
    "④钢丝绳严重锈蚀，铁锈填满绳股间隙。【{Parameters.name}】<br/>
    采用其他类型悬挂装置的，悬挂装置的磨损、变形等不得超过制造单位设定的报废指标
    </div>
  </div>
  </div>
)

页面性能测试， 添加：
        <div css={{ display: 'flex', justifyContent: 'space-between',flexWrap: 'wrap'}}>
          {
            Array.from(new Array(1500)).map( (a,i)=>
              <AntCheck label={`其它${i}`} inp={inp} setInp={setInp} sup={'tool'} item={`other${i}`}/>
            )
          }
        </div>

针对chrome网页性能测试:
420002个    return '车夫杠杆'   		C时间=1.4s/0.8s;
420002	  <span>车夫杠杆</span> 		C时间=4.8s/2.6s;
420002	  <div>车夫杠杆</div>  			C时间=5.8s/4.0s;
420002	  <h5>车夫杠杆</h5>  				C时间=5.8s/3.3s;
420002	  <p>车夫杠杆</p> 					C时间=6.1s/3.2s;
420002	   return <input value='车夫杠杆'/> 					C时间=36s/x;浏览器崩溃。
42002个	   return <input value='车夫杠杆'/> 					C时间=3300ms/800ms;
42002个	   <div>车夫杠杆</div> 					C时间=600ms/250ms;
42002个	   return '车夫杠杆'						C时间=187ms/?ms;
42002个	   <Text variant="h6">车夫杠杆</Text>				C时间=10200ms/550ms;  家时=7060ms/210ms;
[emotion]
42002个	          { return <h6>车夫杠杆</h6>}				时间=ms/ms;  	家时=360ms/170ms;
		css`直接加在h6<> : 					时间=5800ms/3800ms; 家时=4470ms/2900ms;
42002个
  若直接上循化+无组件调用 <h6/span>车夫杠杆		 				C时间=590ms/241ms;
  [web标签性能损失]
	若直接上循化+没有tag<> { return '车夫杠杆'}					C时间=181ms/?ms;
		+简化成 <h6 css={ css` ：： 							C时间=8600ms/490ms;
		[js`Css`损失emotion情况]
    +去掉 css={   用原始的 <h6    ：：				C时间=1843ms/284ms;
    	- -+ react直接上样式<h6 style={{fontSize: '1em', ...7}}			C时间=3379ms/317ms；
    	- -+ react直接上 +组件<h6 style={{fontFamily...8	webkit无		C时间=4000ms/560ms;
    	- -+ react直接上+无样式附加 +组件 <h6 >		  	  	C时间=1976ms/276ms;
    	- -+ react直接上+无样式附加 +组件 <h6 css={css`空` >			C时间=2653ms/314ms;
    	- -+ 没有@jsx +组件 <h6 css={{标准的h6-style 实际无效的！>		C时间=2124ms/258ms;
    	- -+ @jsx jsx +组件 <h6  css={{标准的h6-style...7>					C时间=8507ms/520ms;
    	- -+ @jsx jsx +组件 <h6  css={{fontFamily...10 				C时间=8996ms/510ms;
    emotion文件头必须加/** @jsx jsx */ import {jsx} from "@emotion/core";
    - + 		MText	React.FunctionComponent<MTextProps>						C时间=1827ms/266ms;
    - + MText	function(props) <MText variant="h6">车夫杠杆: 	C时间=2047ms/265ms;
    - + MText	function(props) <MText>车夫杠杆 								C时间=1891ms/268ms;
    - + var MText = (props) => {  return<MText>车夫杠杆</MText> 	C时间=1727ms/289ms;
    [React性能损失]
    -+无组件调用+变量替换var MText = <h6>车夫杠杆</h6>;	=>MText 			C时间=511ms/172ms;
[styled-components]
42002个
		@kiwicom组件+Collapse	<Text>车夫杠杆</Text>	<p ?  C时间=10500ms；全14.6s；家时=全10.2s；
		不用@kiwicom组件直接styled.h6`样式..14	 		  C时间=全10.8s；
		不用@kiwicom组件直接styled.h6`` 无样式;				C时间=全9.6s；！！
		[估计styled-components带来损耗]
		- + 		MText	React.FunctionComponent<MTextProps>				C时间=全6.1s；
		- + var MText = (props) => {  return<MText>车夫杠杆</MText> 		C时间=全6.3s；
		[React性能损失]
		-无组件调用+变量替换var MText = <p>车夫杠杆</p> =>MText;				C时间=全4.3s；
		-无组件调用+变量替换var MText = <h6>车夫杠杆</h6> =>MText;				C时间=全4.4s；
		[web标签性能损失]
		-纯文字 +var MText = '车夫杠杆'	 =>MText;								时间=全2.3s；
		不用@kiwicom组件直接 styled.h6` 样式..14							C时间=7200ms；
		不用@kiwicom组件直接 styled.h6` 样式..3							C时间=6000ms；
		-去掉 styled +不用组件,直接return <h6>车夫杠杆</h6> 			C时间=2400ms；
420002
	Collapse+去掉 styled +不用组件,直接return <h6>车夫杠杆</h6> 			C时间=14s；
	去掉Collapse+去掉 styled +不用组件,直接return <h6>车夫杠杆</h6>		C时间=全20s；家时=全15.2s；
	Collapse +直接return '车夫杠杆' ;						家时=全6s；
	直接return '车夫杠杆' ;								家时=全4.83s；		导致浏览器歇菜?
42002个
	去掉Collapse+去掉 styled +不用组件,直接return <h6>车夫杠杆</h6>		C时间=全3s；家时=全1.8s；
42002个
	去掉Collapse+不用@kiwicom组件直接 styled.h6` 样式..14			时间=3510ms；全8s；家时={css} 全7s；
	Collapse+不用@kiwicom组件直接 styled.h6` 样式..14			时间=5000ms；全11s； 家时=全7.9s；
	Collapse+不用@kiwicom组件直接 styled.h6``· 无样式							;家时=全6.1s；
	Collapse+不用组件,直接return <h6>车夫杠杆</h6>						;家时=全3.15s；
多组件pk少组件？Collapse+@kiwicom+嵌套*<Text>底下字循环；
				多组件 50000 *2 					=全16.8s；；家时=全11.84s；
				少组件 500*200 						=全3.2s；家时=全2.85s;
[emotion]
42002个>>
		  -SText + <h6 css={{ ...7；	 + /viewAll		=全12s；可操作30s。
			-SText + <h6 css={{ ...11；	 + /viewAll		=全11.9s；可操作21/33s。
			-SText + <h6 css={{ ...11；/viewAll ；  =单下拉点=全10.3s； All拉起可操作14s。
			原Text组件 /viewAll 		 =全13.6s；可操作,37s可自如滚。 All拉起=7s文字切换/13.5s正常。
			原Text组件 /viewAll  		=单下拉点=全10.6s； All拉起可操作7s文字切换/13.5s正常。
			-MText: React.FunctionComponent=> <h6无样式； 	 =单下拉点=全3.7s；
			-var MText = <h6>车夫杠杆</h6>; 只剩<>			=单下拉点=全1.8s；
142002个>>
			-var MText = <h6>车夫杠杆</h6>; 只剩<>			=单下拉点=全5.5s；42002个换算=1.627s；
			-输出文本，{ return '车夫杠杆'}	;						=单下拉点=全1.6s；42002个换算=0.473s；
多组件pk少组件？〉〉
				多组件 50000 *2 					=全14.4s； All拉起可操作19s。
							--+ /viewAll		=全17s；可操作50s/60s可自如滚。
				少组件 500*200 						=全1.8s； /viewAll可操作3.9s可自如滚。



https://localhost:3765/original/viewAll
路由来的捕获followPath=
'react-router-dom'


ref必须显而易见的，否则编译告警。用对象{ref1,}不行。用数组[ref1，]可行。
    对象方式return {ref1,ref2,ref3,ref4,ref5,ref6,ref7,ref8};
  不能直接依赖refs      必须单独的依赖 refs.ref1,refs.ref2,refs.ref3,refs.ref4,refs.ref5,refs.ref6,refs.ref7,refs.ref8。。
  用数组，refs】不行，不加上却会编译警告、运行可正点。
,refs[0],refs[1],refs[2],refs[3],refs[4],refs[5],refs[6],refs[7]]编译警告

const TemplateView: React.RefForwardingComponent<InternalItemHandResult,TemplateViewProps>=
  React.forwardRef((
    { inp,   showAll = false  },  ref
  ) => {
    const [,,itBinds]= useValues();
    //const itBinds=useProjectListAs({count: projectList.length});
    const ref1=React.useRef<InternalItemHandResult>(null);
    const ref2=React.useRef<InternalItemHandResult>(null);
    const ref3=React.useRef<InternalItemHandResult>(null);
    const ref4=React.useRef<InternalItemHandResult>(null);
    const ref5=React.useRef<InternalItemHandResult>(null);
    const ref6=React.useRef<InternalItemHandResult>(null);
    const ref7=React.useRef<InternalItemHandResult>(null);
    const ref8=React.useRef<InternalItemHandResult>(null);

    const outCome=mergeSubitemRefs( ...[ref1,ref2,ref3,ref4,ref5,ref6,ref7,ref8] );
    React.useImperativeHandle( ref,() => ({ inp: outCome }), [outCome] );

    console.log("TemplateView hehe outCome =", outCome, );
    //使用React.useMemo(() =>,[])作用惊人，保存4次render变成2次了。
    const recordList= React.useMemo(() =>
      <React.Fragment>
        <InternalItem1 ref={ref1} key={1} par={inp} show={showAll}/>
        <InternalItem7 ref={ref2} key={2} par={inp} show={showAll}/>
        <InternalItem8 ref={ref3} key={3} par={inp} show={showAll}/>
        <InternalItem12 ref={ref4} key={4} par={inp} show={showAll}/>
        <InternalItem27 ref={ref5} key={5} par={inp} show={showAll}/>
        <InternalItem31 ref={ref6} key={6} par={inp} show={showAll}/>
        <InternalItem37 ref={ref7} key={7} par={inp} show={showAll}/>
        <InternalItem50 ref={ref8} key={8} par={inp} show={showAll}/>
      </React.Fragment>
      ,[inp, showAll]);

    return (
      <React.Fragment>
        {recordList}
      </React.Fragment>
    );
  } );

//{inp,showAll=false,children},ref逗號之前的原型 P&{ children?: ReactNode };最後ref對應<T>InternalItemHandResult。<P>對應TemplateViewProps;;
const TemplateView: React.RefForwardingComponent<InternalItemHandResult,TemplateViewProps>=
  React.forwardRef((
     {inp, showAll=false, children},   ref
  ) => {
     }
///forwardRef的使用來自原型(props: PropsWithChildren<P>, ref: Ref<T>): ReactElement | null;   P對應InternalItemProps； 最後= P & { children?: ReactNode };

不安全的证书，浏览器提示它是是不安全的。https: 暂时降级成http: 以后再说。https://www.zhuyuntao.cn/webpack-dev-server%E5%BC%80%E5%90%AFhttps%E8%AE%BF%E9%97%AE

http://localhost:8673/grqphiql
http://27.151.117.65:8673/grqphiql

https://www.cnblogs.com/lmyt/p/10584679.html
https://chrome-devtools-frontend.appspot.com
https://www.cnblogs.com/slmk/p/7591126.html（不需要FQ）
离线解决方案：Android的WebView调试工具（永久维护！支持windows/mac）
由于是离线包，当你点击Inspect时就不用再去Google下载了，而是直接从本地加载。从而达到了不FQ使用Inspect调试的目的。

注意：电脑端需要使用正式版Chrome，Dev版本不支持的。
Button 超小屏幕 whiteSpace: 'unset'就多行的。 高度不能限制, 派出個特異按鈕區域？直接用鏈接router
Popover 可能點擊不激發，可能動畫庫關係。

奇葩？        <ResponsivePopover
             content={
               <MenuList>
                 <MenuItem onPress={()=>onDeleteSeq(0,obj)}>刪除这条</MenuItem>
                 <MenuItem
                   onPress={() => alert("Hello 1kkkk")}
                 >
                   Drink coffee
                 </MenuItem>
               </MenuList>
             }
           >
             <Button
               size="md"
               iconAfter={<IconChevronDown />}
               variant="ghost"
             >
               {`仪器编号[6666666666666] 回给集合`}
             </Button>
           </ResponsivePopover>

           <div>
             已检查记录:
             {inp?.mse?.map((a,i)=>{
               return <React.Fragment key={i}>
                 <div>{
                   `仪器编号[${a.no}] 名称 ${a.name||''} 型号 ${a.type||''} 开机后 ${a.powerOn||''} 关机前 ${a.shutDown||''}`
                 }
                 </div>
               </React.Fragment>;
             }) }
           </div>
           Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.
               in MenuItem (at PeriodicalInspection.O-1.tsx:1443)
竟然下面那个删除文字导致按钮执行异常，最终导致以后的按钮也能无法触发了，需要上级组件滚移动复位才正常。

ResponsivePopover大屏？
poperover 小屏幕alert2次;
http://192.168.1.105:3765/report/item/1.4/227/EL-DJ/ver/1
http://192.168.1.105:3765/report/preview/227/EL-DJ/ver/1
代替以前的HOC如今要操纵传递ref的场合就该用上：forwardRef(）类似这样 ：
const InternalItem2d8=
  React.forwardRef((
    { children, show },  ref
  ) => {
  } );
//useReducer是状态管理用的，并不是用来做事件触发使用的，副作用导致两个2次触发。
    const [{ ConfirmModifyStorage }, dispatchUpdate] =React.useReducer((state, action) => {
      switch (action.type) {
        case '一起都确认':
          return { ...state, ConfirmModifyStorage:true }
        case '修改确认完毕':
          return { ...state, ConfirmModifyStorage:false }
        default:  return state;
      }
    }, { ConfirmModifyStorage:false } );
/*
在<React.Fragment> 加css是没有用的。
制作模板尺寸格式 <Table fixed={isPrint? ["150px", "300px", "15%", "15%", "50px"] : undefined}> 打印文书需要固定的列宽度/不要能自动调节的。
   实际表格尺寸会被调整；其中x%部分会优先分配的，150px实际也会被调小调大，不限定的"%"的{可变动很大！,最多用在某个列}。
   固定数100px会导致适应不同纸张和缩放比例后打印表格的各列尺寸变化较大！最好统一用％的相对尺寸设置。
html网页最小12px字体，再按照缩放70%打印到纸张，是人眼视力极限最小字，以此敲定70%打印缩放。
这样有一个固定px的<Table fixed={["15%", "40%", "20%", "300px", "15%"]} >导致合计px超出打印默认px，引起实际上自动缩放！
  就算没有超出<Table fixed={["15%", "40%", "20%", "30px", "15%"]}>因为的%自主调整，也会稍有点收缩打印。
  这样的<Table fixed={["1", "2", "3", "1", "1"] }> 都能自动调整(这里数字1其实是1px省略的)，也会有点收缩打印。
  最大情况<Table fixed={printing&&["200px", "200px", "275px", "200px", "200px"] ||undefined}>超过1075px的不设定缩放A4打印就会被修剪掉。
  纯粹用百分比<Table fixed={["16%", "15%", "8%", "25%", "%"] }>或可带点px,就会较好，较少发生收缩打印。
  这样<Table fixed={["100", "30%", "50%", "15%", "25%"] }>也会稍有点收缩打印。
*/
//CSS height: fill-available;最大满屏幕，打印不超一张，用火狐不行！ 不可以加maxHeight:'35vw'高度限制；限制最小不限最大。
media queries查询条件的使用 Query的语法只有四项：and、or、not、only ;useMedia日志：：预览-真实打印-真实打印缩放-预览缩放-回到屏幕; ? 那为什么在css[]内部使用确能做到的；外在hook办不到。
//利用fill-available可以轻松地实现等高布局；width:min-content，默认英文单词不换行，最小宽度是里面最长的英文单词的宽度，超小屏幕会超出。

useTouchable这个外来useTouchable组件感觉有点小毛病。 这个useTouchable其实是Touchable和Button核心，底下就是bind，也不用加ref的也可以触发。

subItems?.map((a, i) => {
            const namex = `${inspectionContent[x].items[y].names[i]}`;
            return <React.Fragment key={i}>
              {details[i] && details[i](inp, setInp)}
              <InputGroupLine label='描述或问题'>
                <Input value={(inp?.[namexD]) || ''} onChange={e => {
                  inp[namexD] = e.currentTarget.value || undefined;
                  setInp({ ...inp });
                }}
                />
              </InputGroupLine>
            </React.Fragment>;
          })

后端接口的实体方法字段图　http://27.151.117.65:8673/voyager　　登录才能看。
prisma2.0和nexus是graphQL后端服务器/nodejs的。

  query findAllEQPsFilter($where: DeviceCommonInput,$offset:Int!,$first:Int=10,$orderBy:String,$asc:Boolean=true) {
    dev:findAllEQPsFilter2(where: $where,offset:$offset,first:$first,orderBy:$orderBy,asc:$asc) {
      id cod oid type sort vart instDate
      ... on IfElevator{
        liftHeight
      }
      ... on Elevator{
         factoryNo
       }
       ... on EQP{
         factoryNo
       }
      ... on Escalator{
       factoryNo  steps
       }
     }
  }
派生继承appollo的配置文件  https://www.apollographql.com/docs/react/data/fragments/#generating-possibletypes-automatically
interface套用子类后报错， https://stackoverflow.com/questions/59690194/apollographql-heuristic-fragment-manual-matching
按钮组件unmount了就异常。setLocation之前更新本地状态，可能报错，需要useEffect做延迟。
单页应用SPA应该主动清除setTimeout定时器，即使切换路由，也还是在这个页面没有离开，所以还是会继续运行的。
setXxx是异步的; 但是多个setXXX合并执行的, 然后才做render; 而传递到useEffect（,[])需要等到下一次render;两趟绘制;
graphQL升版本后已经不支持input参数的可自循环迭代定义；之前的组织后端的查询参数如下：
  const condition = React.useMemo( () =>{
    let condition = { lj: 'AND', as: [] };
    if(typeof query==="object") {
      const {
        factoryNo, task: { dep } = '',
        isps: { ispMen: { username } = '' } = ''
      } = query;
      if (factoryNo)
        condition.as.push({ s: 'factoryNo', o: 'LK', sv: '%' + factoryNo + '%' });
      if(dep)
        condition.as.push({s:'task.dep',o:'EQ',sv: dep });
      if(username)
        condition.as.push({s:'isps.ispMen.username',o:'EQ',sv: username });
    }
    else{
      condition.as.push({s:'cod',o:'LK', sv:query?query:'%' });
    }
    condition.as.push({s:'valid',o:'TRUE'});
    return condition;
  }, [query]);

