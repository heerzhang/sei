父辈组件重做render了，不意味着其儿孙组件们也需要重做render。
依赖项[inp, show]没变化， useMemo包裹的且已经挂载的组件就不会重新render；降低重复部分的render工作量。

函数组件多个return; 前面这里return ；将会导致子孙组件都会umount!! 等于重新加载==路由模式刷新一样； 得权衡利弊。
采用RouterLink页内路由进入useState还保留旧的值，要修改就将会导致render两次；旧的值新的值各一次渲染。若采用URL刷新模式只有一次。

updateXXX 提交给后端， 这里将会引起底层变动，导致本组件即将要 render 3次。真正有更新的 4次。更新比 <Query> 读取多了1次render。
await submitfunc() 似乎也不能确保执行过后的跟随代码看见的entry非空的，必须等待下一次render;

refetch() 引起 loading= True/False变化，从而需要组件范围render重做搞2次。
refetch 这个时间的入口参数filter还是捕获的旧的，须延迟一个render()后再去做。

onPress={() => {异步的，但是多个setXXX合并执行的,　然后才做render。 而传递到useEffect（,[tplType])需要等到下一次 render 。

Update函数返回result对象若包含了已经更改字段，会多出两次render,即时result实际上也就log用。
就算外部业务代码没有看见数据变动，底层useMutation本身内部代码可能获得数据也会有变动，照样能够引起页面多做render两次。
useMutation更新数据打底3次render，输入options数据有没变化也没影响render次数，而是graphql接口函数的返回data有没变化影响导致多2次render的。

更新最简单2次render就可，条件：<Button disabled={直接用useMutation给的loading} onPress={并且options参数已经修改到位了}，useMutation获得数据不会变动。
按钮disabled={直接用useMutation给的loading}，很快就切换，有可能多按，若useThrottle(dosaveEqpfunc,9000)可延迟恢复按钮，但是render多加2次=4次。
如果Update执行的graphql接口函数的返回data有变化就会再多加2次render的=4次, 延迟用useThrottle=6次。
useMutation(refetchQueries:['DEVICE_BY_ID']})传递下来又会再多出2次render的; 所以上面条件最差时点更新按钮最多就会有8次render/输入字段没变动的也要6次。
幸运的是，采取局部化措施后，受到波及的组件实际的更新响应速度尚且可以。

//Chrome版本 home= 88.0.4324.104（正式版本） （64 位）
用children方式(组件Tag嵌套)传递和直接往组件加个参数方式的，性能一致没差距。
用emotion的css{[{}]}接替react的style{{}}对象方式所带来的性能负担，还算合理,增加量不算离谱。
注意组件的名字长度必须2个字符及以上。
<span>css相对于-string纯文本 非标签纯粹txt，对性能负担很明显。
<Text>组件把span改成div后,对性能没影响;
emotion{{}}带入,影响较大,但也算合理预计当中。
前端适当优化， 电脑手机更新换代，性能提升快。
搞useMedia({ minWidth: `${switchPx}px` }) 对性能影响很小。

        <Label hide={hideLabel} htmlFor={uid}  textStyle={labelDivCss}
               css={[
                 {
                   display: "inline-flex",
                   textAlign: fitable? "right" : "left",
                   flex: '1 1 40%',
                 },
                 labelStyle
               ]}
        >
          {label}
        </Label>

   回快点，但是不能控制靠旗
           <Text className="Label__text" variant={"subtitle"}
                 css={[
                   {
                     display: "inline-flex",
                     textAlign: fitable? "right" : "left",
                     flex: '1 1 40%',
                   }
                 ]}
                 >
             {label}
           </Text>

label for