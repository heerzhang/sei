[{"D:\\home\\sei\\front-end\\src\\index.tsx":"1","D:\\home\\sei\\front-end\\src\\serviceWorker.ts":"2","D:\\home\\sei\\front-end\\src\\db.ts":"3","D:\\home\\sei\\front-end\\src\\App.tsx":"4","D:\\home\\sei\\front-end\\src\\graphql\\setup.ts":"5","D:\\home\\sei\\front-end\\src\\TopRouter.tsx":"6","D:\\home\\sei\\front-end\\src\\context\\GlobalState.tsx":"7","D:\\home\\sei\\front-end\\src\\auth.ts":"8","D:\\home\\sei\\front-end\\src\\utils\\helpers.ts":"9","D:\\home\\sei\\front-end\\src\\user-context.ts":"10","D:\\home\\sei\\front-end\\src\\Branding.tsx":"11","D:\\home\\sei\\front-end\\src\\LoginPane.tsx":"12","D:\\home\\sei\\front-end\\src\\Main.tsx":"13","D:\\home\\sei\\front-end\\src\\context\\DevfilterContext.tsx":"14","D:\\home\\sei\\front-end\\src\\About.tsx":"15","D:\\home\\sei\\front-end\\src\\comp\\test01.tsx":"16","D:\\home\\sei\\front-end\\src\\comp\\test02.tsx":"17","D:\\home\\sei\\front-end\\src\\report\\StorageContext.tsx":"18","D:\\home\\sei\\front-end\\src\\report\\Guide.tsx":"19","D:\\home\\sei\\front-end\\src\\unit\\DeviceMain.tsx":"20","D:\\home\\sei\\front-end\\src\\inspect\\InspectMain.tsx":"21","D:\\home\\sei\\front-end\\src\\maintenance\\MaintenanceMain.tsx":"22","D:\\home\\sei\\front-end\\src\\report\\ReportEntrance.tsx":"23","D:\\home\\sei\\front-end\\src\\device\\DeviceMain.tsx":"24","D:\\home\\sei\\front-end\\src\\utils\\session.ts":"25","D:\\home\\sei\\front-end\\src\\report\\db.ts":"26","D:\\home\\sei\\front-end\\src\\device\\db.ts":"27","D:\\home\\sei\\front-end\\src\\comp\\rootRarelyVary.tsx":"28","D:\\home\\sei\\front-end\\src\\maintenance\\template.ts":"29","D:\\home\\sei\\front-end\\src\\Layout.tsx":"30","D:\\home\\sei\\front-end\\src\\hooks\\useHelpers.ts":"31","D:\\home\\sei\\front-end\\src\\RecipeList.tsx":"32","D:\\home\\sei\\front-end\\src\\FollowingList.tsx":"33","D:\\home\\sei\\front-end\\src\\Compose.tsx":"34","D:\\home\\sei\\front-end\\src\\Recipe.tsx":"35","D:\\home\\sei\\front-end\\src\\FollowersList.tsx":"36","D:\\home\\sei\\front-end\\src\\FadeImage.tsx":"37","D:\\home\\sei\\front-end\\src\\report\\Layout.tsx":"38","D:\\home\\sei\\front-end\\src\\device\\DetailedGuide.tsx":"39","D:\\home\\sei\\front-end\\src\\device\\DeviceList.tsx":"40","D:\\home\\sei\\front-end\\src\\device\\Layout.tsx":"41","D:\\home\\sei\\front-end\\src\\comp\\base.tsx":"42","D:\\home\\sei\\front-end\\src\\report\\TemplateMain.tsx":"43","D:\\home\\sei\\front-end\\src\\device\\task\\IspEntrance.tsx":"44","D:\\home\\sei\\front-end\\src\\device\\task\\DispatchIspMen.tsx":"45","D:\\home\\sei\\front-end\\src\\device\\task\\TaskList.tsx":"46","D:\\home\\sei\\front-end\\src\\maintenance\\RecordView.tsx":"47","D:\\home\\sei\\front-end\\src\\maintenance\\Layout.tsx":"48","D:\\home\\sei\\front-end\\src\\inspect\\IspDetail.tsx":"49","D:\\home\\sei\\front-end\\src\\inspect\\ReportSample.tsx":"50","D:\\home\\sei\\front-end\\src\\inspect\\report\\AddReport.tsx":"51","D:\\home\\sei\\front-end\\src\\inspect\\RelationList.tsx":"52","D:\\home\\sei\\front-end\\src\\inspect\\Layout.tsx":"53","D:\\home\\sei\\front-end\\src\\utils\\storage.ts":"54","D:\\home\\sei\\front-end\\src\\report\\elevator\\elvRarelyVary.tsx":"55","D:\\home\\sei\\front-end\\src\\report\\elevator\\elvBase.tsx":"56","D:\\home\\sei\\front-end\\src\\Image.tsx":"57","D:\\home\\sei\\front-end\\src\\maintenance\\db.ts":"58","D:\\home\\sei\\front-end\\src\\inspect\\db.ts":"59","D:\\home\\sei\\front-end\\src\\device\\task\\db.ts":"60","D:\\home\\sei\\front-end\\src\\FollowingRecipes.tsx":"61","D:\\home\\sei\\front-end\\src\\device\\ComposeDevice.tsx":"62","D:\\home\\sei\\front-end\\src\\device\\SearchDeviceBox.tsx":"63","D:\\home\\sei\\front-end\\src\\device\\DeviceListInner.tsx":"64","D:\\home\\sei\\front-end\\src\\report\\TemplateLoader.tsx":"65","D:\\home\\sei\\front-end\\src\\maintenance\\elevator\\PeriodicalInspection.O-1.tsx":"66","D:\\home\\sei\\front-end\\src\\inspect\\report\\db.ts":"67","D:\\home\\sei\\front-end\\src\\device\\task\\BoundDevices.tsx":"68","D:\\home\\sei\\front-end\\src\\ImageUpload.jsx":"69","D:\\home\\sei\\front-end\\src\\Editor.jsx":"70","D:\\home\\sei\\front-end\\src\\report\\elevator\\PeriodicalInspection.O-1.tsx":"71","D:\\home\\sei\\front-end\\src\\report\\elevator\\PeriodicalInspection.R-1.tsx":"72","D:\\home\\sei\\front-end\\src\\inspect\\report\\BoundReports.tsx":"73","D:\\home\\sei\\front-end\\src\\report\\elevator\\PeriodicalInspection.E.tsx":"74","D:\\home\\sei\\front-end\\src\\utils\\cookies.ts":"75","D:\\home\\sei\\front-end\\src\\report\\elevator\\Periodical\\editor.tsx":"76","D:\\home\\sei\\front-end\\src\\report\\elevator\\Periodical\\main.tsx":"77","D:\\home\\sei\\front-end\\src\\report\\editor\\eRarelyVary.tsx":"78","D:\\home\\sei\\front-end\\src\\report\\editor\\eHelper.ts":"79","D:\\home\\sei\\front-end\\src\\report\\editor\\eBase.tsx":"80","D:\\home\\sei\\front-end\\src\\report\\comp\\rarelyVary.tsx":"81","D:\\home\\sei\\front-end\\src\\report\\comp\\helper.ts":"82","D:\\home\\sei\\front-end\\src\\report\\comp\\base.tsx":"83","D:\\home\\sei\\front-end\\src\\comp\\TableExt.tsx":"84","D:\\home\\sei\\front-end\\src\\utils\\tools.ts":"85","D:\\home\\sei\\front-end\\src\\maintenance\\comp\\base.tsx":"86","D:\\home\\sei\\front-end\\src\\SearchBox.tsx":"87","D:\\home\\sei\\front-end\\src\\device\\DeviceDetail.tsx":"88","D:\\home\\sei\\front-end\\src\\device\\task\\AddToTask.tsx":"89","D:\\home\\sei\\front-end\\src\\device\\AttachedTask.tsx":"90","D:\\home\\sei\\front-end\\src\\unit\\DetailedGuide.tsx":"91","D:\\home\\sei\\front-end\\src\\unit\\UnitList.tsx":"92","D:\\home\\sei\\front-end\\src\\unit\\Layout.tsx":"93","D:\\home\\sei\\front-end\\src\\unit\\task\\IspEntrance.tsx":"94","D:\\home\\sei\\front-end\\src\\unit\\task\\DispatchIspMen.tsx":"95","D:\\home\\sei\\front-end\\src\\unit\\task\\TaskList.tsx":"96","D:\\home\\sei\\front-end\\src\\unit\\db.ts":"97","D:\\home\\sei\\front-end\\src\\unit\\task\\db.ts":"98","D:\\home\\sei\\front-end\\src\\unit\\DeviceDetail.tsx":"99","D:\\home\\sei\\front-end\\src\\unit\\task\\AddToTask.tsx":"100","D:\\home\\sei\\front-end\\src\\unit\\ComposeDevice.tsx":"101","D:\\home\\sei\\front-end\\src\\unit\\SearchDeviceBox.tsx":"102","D:\\home\\sei\\front-end\\src\\unit\\task\\BoundDevices.tsx":"103","D:\\home\\sei\\front-end\\src\\unit\\AttachedTask.tsx":"104"},{"size":896,"mtime":1597796522337,"results":"105","hashOfConfig":"106"},{"size":5344,"mtime":1597796522360,"results":"107","hashOfConfig":"106"},{"size":11136,"mtime":1602464681974,"results":"108","hashOfConfig":"106"},{"size":3486,"mtime":1608018653072,"results":"109","hashOfConfig":"106"},{"size":7725,"mtime":1605141230710,"results":"110","hashOfConfig":"106"},{"size":13649,"mtime":1607313409360,"results":"111","hashOfConfig":"106"},{"size":3301,"mtime":1607313411364,"results":"112","hashOfConfig":"106"},{"size":2734,"mtime":1602464681528,"results":"113","hashOfConfig":"106"},{"size":980,"mtime":1597796522362,"results":"114","hashOfConfig":"106"},{"size":549,"mtime":1597796522361,"results":"115","hashOfConfig":"106"},{"size":14927,"mtime":1607323002295,"results":"116","hashOfConfig":"106"},{"size":11075,"mtime":1608018732417,"results":"117","hashOfConfig":"106"},{"size":14357,"mtime":1607323024976,"results":"118","hashOfConfig":"106"},{"size":520,"mtime":1607313413226,"results":"119","hashOfConfig":"106"},{"size":18765,"mtime":1608018588243,"results":"120","hashOfConfig":"106"},{"size":8406,"mtime":1607313618443,"results":"121","hashOfConfig":"106"},{"size":9404,"mtime":1608192174616,"results":"122","hashOfConfig":"106"},{"size":584,"mtime":1607313411110,"results":"123","hashOfConfig":"106"},{"size":7442,"mtime":1607313412201,"results":"124","hashOfConfig":"106"},{"size":10881,"mtime":1607313409295,"results":"125","hashOfConfig":"106"},{"size":11071,"mtime":1608012286559,"results":"126","hashOfConfig":"106"},{"size":11671,"mtime":1607313408498,"results":"127","hashOfConfig":"106"},{"size":3299,"mtime":1607313411411,"results":"128","hashOfConfig":"106"},{"size":10912,"mtime":1607313413061,"results":"129","hashOfConfig":"106"},{"size":452,"mtime":1597796522363,"results":"130","hashOfConfig":"106"},{"size":20204,"mtime":1602464681258,"results":"131","hashOfConfig":"106"},{"size":6187,"mtime":1607999200501,"results":"132","hashOfConfig":"106"},{"size":2303,"mtime":1607313411661,"results":"133","hashOfConfig":"106"},{"size":1886,"mtime":1597796522347,"results":"134","hashOfConfig":"106"},{"size":897,"mtime":1607323037726,"results":"135","hashOfConfig":"106"},{"size":5593,"mtime":1602722777891,"results":"136","hashOfConfig":"106"},{"size":16630,"mtime":1608018731393,"results":"137","hashOfConfig":"106"},{"size":15567,"mtime":1608018731183,"results":"138","hashOfConfig":"106"},{"size":25626,"mtime":1608020171366,"results":"139","hashOfConfig":"106"},{"size":2742,"mtime":1608018731052,"results":"140","hashOfConfig":"106"},{"size":6042,"mtime":1608020122658,"results":"141","hashOfConfig":"106"},{"size":1367,"mtime":1608018731725,"results":"142","hashOfConfig":"106"},{"size":902,"mtime":1607322821456,"results":"143","hashOfConfig":"106"},{"size":6903,"mtime":1608164023358,"results":"144","hashOfConfig":"106"},{"size":6097,"mtime":1608018731105,"results":"145","hashOfConfig":"106"},{"size":902,"mtime":1607322821278,"results":"146","hashOfConfig":"106"},{"size":3036,"mtime":1607313412254,"results":"147","hashOfConfig":"106"},{"size":14896,"mtime":1608164023366,"results":"148","hashOfConfig":"106"},{"size":5667,"mtime":1608165067123,"results":"149","hashOfConfig":"106"},{"size":11826,"mtime":1608164023361,"results":"150","hashOfConfig":"106"},{"size":10492,"mtime":1608018731765,"results":"151","hashOfConfig":"106"},{"size":6856,"mtime":1607313408284,"results":"152","hashOfConfig":"106"},{"size":902,"mtime":1607322821344,"results":"153","hashOfConfig":"106"},{"size":10837,"mtime":1608164023362,"results":"154","hashOfConfig":"106"},{"size":11849,"mtime":1608164023364,"results":"155","hashOfConfig":"106"},{"size":13261,"mtime":1608164023365,"results":"156","hashOfConfig":"106"},{"size":11654,"mtime":1608018731362,"results":"157","hashOfConfig":"106"},{"size":902,"mtime":1607322821248,"results":"158","hashOfConfig":"106"},{"size":1027,"mtime":1597796522363,"results":"159","hashOfConfig":"106"},{"size":13244,"mtime":1608016879359,"results":"160","hashOfConfig":"106"},{"size":6451,"mtime":1607313412349,"results":"161","hashOfConfig":"106"},{"size":4297,"mtime":1608018730638,"results":"162","hashOfConfig":"106"},{"size":20573,"mtime":1602464350762,"results":"163","hashOfConfig":"106"},{"size":19103,"mtime":1608012847911,"results":"164","hashOfConfig":"106"},{"size":17129,"mtime":1608001619458,"results":"165","hashOfConfig":"106"},{"size":7066,"mtime":1608020270451,"results":"166","hashOfConfig":"106"},{"size":10778,"mtime":1607313409622,"results":"167","hashOfConfig":"106"},{"size":9358,"mtime":1608018731426,"results":"168","hashOfConfig":"106"},{"size":6641,"mtime":1608018731157,"results":"169","hashOfConfig":"106"},{"size":13012,"mtime":1607313410892,"results":"170","hashOfConfig":"106"},{"size":100194,"mtime":1607313407899,"results":"171","hashOfConfig":"106"},{"size":14413,"mtime":1602464681436,"results":"172","hashOfConfig":"106"},{"size":9267,"mtime":1608174270026,"results":"173","hashOfConfig":"106"},{"size":8840,"mtime":1597796522296,"results":"174","hashOfConfig":"106"},{"size":8830,"mtime":1597796522293,"results":"175","hashOfConfig":"106"},{"size":6283,"mtime":1607313408402,"results":"176","hashOfConfig":"106"},{"size":11918,"mtime":1607313408312,"results":"177","hashOfConfig":"106"},{"size":10448,"mtime":1608167883156,"results":"178","hashOfConfig":"106"},{"size":824,"mtime":1607313408781,"results":"179","hashOfConfig":"106"},{"size":2068,"mtime":1597796522362,"results":"180","hashOfConfig":"106"},{"size":46043,"mtime":1607313410572,"results":"181","hashOfConfig":"106"},{"size":12349,"mtime":1607313410491,"results":"182","hashOfConfig":"106"},{"size":4729,"mtime":1607313408468,"results":"183","hashOfConfig":"106"},{"size":906,"mtime":1597796522355,"results":"184","hashOfConfig":"106"},{"size":12466,"mtime":1607313410153,"results":"185","hashOfConfig":"106"},{"size":7407,"mtime":1608017474929,"results":"186","hashOfConfig":"106"},{"size":2667,"mtime":1597796522353,"results":"187","hashOfConfig":"106"},{"size":21909,"mtime":1607313409661,"results":"188","hashOfConfig":"106"},{"size":12784,"mtime":1607313412003,"results":"189","hashOfConfig":"106"},{"size":1744,"mtime":1597796522364,"results":"190","hashOfConfig":"106"},{"size":13310,"mtime":1607313413105,"results":"191","hashOfConfig":"106"},{"size":2234,"mtime":1608018731284,"results":"192","hashOfConfig":"106"},{"size":1677,"mtime":1608018732700,"results":"193","hashOfConfig":"106"},{"size":7615,"mtime":1607313410796,"results":"194","hashOfConfig":"106"},{"size":7113,"mtime":1607313408833,"results":"195","hashOfConfig":"106"},{"size":7390,"mtime":1607313410449,"results":"196","hashOfConfig":"106"},{"size":11495,"mtime":1608018730733,"results":"197","hashOfConfig":"106"},{"size":902,"mtime":1607322821388,"results":"198","hashOfConfig":"106"},{"size":5523,"mtime":1607313408680,"results":"199","hashOfConfig":"106"},{"size":11686,"mtime":1607313409851,"results":"200","hashOfConfig":"106"},{"size":10492,"mtime":1608018731868,"results":"201","hashOfConfig":"106"},{"size":5470,"mtime":1603346710484,"results":"202","hashOfConfig":"106"},{"size":17118,"mtime":1602464682029,"results":"203","hashOfConfig":"106"},{"size":1674,"mtime":1608018731822,"results":"204","hashOfConfig":"106"},{"size":7615,"mtime":1607313413188,"results":"205","hashOfConfig":"106"},{"size":11590,"mtime":1607313412530,"results":"206","hashOfConfig":"106"},{"size":5696,"mtime":1608018731970,"results":"207","hashOfConfig":"106"},{"size":9106,"mtime":1608018732000,"results":"208","hashOfConfig":"106"},{"size":6970,"mtime":1607313410010,"results":"209","hashOfConfig":"106"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},"5r1owh",{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"212"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"212"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"212"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"212"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"212"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"212"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"212"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"212"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"212"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"212"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"212"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"212"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"212"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"212"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"212"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"212"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"212"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"212"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"212"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"212"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"212"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"212"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"212"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"212"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"212"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"212"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"212"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"212"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"212"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"212"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"212"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"212"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"212"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"212"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"212"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"212"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"212"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"212"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"212"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"212"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"212"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"212"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"212"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"212"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"212"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"212"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"393"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"393"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"212"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"212"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"212"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"212"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"212"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"212"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"212"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"212"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"212"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"212"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"212"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"212"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"212"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"212"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"212"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"212"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"212"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"212"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"212"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"212"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"212"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"212"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"212"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"212"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"212"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"212"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"212"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"212"},"D:\\home\\sei\\front-end\\src\\index.tsx",[],["489","490"],"D:\\home\\sei\\front-end\\src\\serviceWorker.ts",[],"D:\\home\\sei\\front-end\\src\\db.ts",[],"D:\\home\\sei\\front-end\\src\\App.tsx",[],"D:\\home\\sei\\front-end\\src\\graphql\\setup.ts",["491","492","493"],"import { OperationDefinitionNode } from 'graphql';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  HttpLink,\r\n  ApolloLink,\r\n  split,\r\n  concat,\r\n  empty,\r\n  Reference,\r\n  FieldPolicy\r\n} from \"@apollo/client\";\r\nimport { getMainDefinition, offsetLimitPagination } from \"@apollo/client/utilities\";\r\nimport { onError } from '@apollo/client/link/error';\r\nimport { WebSocketLink } from '@apollo/client/link/ws';\r\n//import { getOperationAST,OperationDefinitionNode } from 'graphql';\r\n//import { WebSocketLink } from 'apollo-link-ws';\r\n//import { SubscriptionClient } from 'subscriptions-transport-ws';\r\n//import { HttpLink } from 'apollo-link-http';\r\n//import { InMemoryCache } from 'apollo-cache-inmemory';\r\n//import { ApolloLink, from, split, concat } from 'apollo-link';\r\n//import session from '../utils/session';\r\nimport helpers from '../utils/helpers';\r\n\r\n\r\n//最后端服务器 不支持前端浏览器js去直接读取cookie；否则无法执行下去`Bearer ${session.get()}` 。\r\n\r\n//ws协议认证失败就导致整个前端首页都是报错。\r\nconst authMiddleware = new ApolloLink((operation: any, forward: any) => {\r\n  operation.setContext({\r\n    headers: {\r\n      //若这里加上authorization: `Bearer；再遇到ws协议认证失败就导致整个前端首页都是报错。　\r\n      //authorization: `Bearer ${helpers.getToken()}`,\r\n      //这里不能加Cookie啊！加了报错\r\n      //Cookie: `token=${helpers.getToken()}`\r\n    }\r\n  });\r\n\r\n  return forward && forward(operation);\r\n});\r\n\r\n//去掉了authorization: `Bearer heh23432432432bb` 直接通过cookie的名字token的键值对送给服务器。虽然后端也支持前一种模式。\r\n//authorization: `Bearer ${session.get()}` || null\r\n\r\n//ApolloClient连接的ws://  wss://， 后端graphQL服务还没有支持它：订阅功能;，先关掉。\r\n//const wsClient = new SubscriptionClient(`${process.env.WS_URL}/graphql`, {\r\n/*\r\nconst wsClient = new SubscriptionClient(`ws://localhost:3000/graphql`, {\r\n  connectionParams: {\r\n    authorization: `Bearer ${session.get()}` || null\r\n  },\r\n  //reconnect: true   不支持ws\r\n  reconnect: false\r\n});\r\n*/\r\n\r\nfunction ackCallBack(error, result){\r\n  console.log(\"来ackCallBack error=\"+ JSON.stringify(error) +\";result=\"+JSON.stringify(result));\r\n}\r\n//WebSocket认证特别，让Http认证过后，格外申请个一次性token并且特别用途目的coockieToken,让JS可以读取。\r\n//console.log(\"启动时已经有cookie=\",document.cookie);\r\n//对前端所有网页都能带上cookie, 跨域ws:/还能传递过去啊。  全局性质都会有增加cookie。\r\n//这个是我直接写入cookie,并不是服务端给我的。\r\n//这个仅仅对ws:/ WebSocketLink请求才有用的，正常graphql http:/ 请求实际不受这个影响的。\r\n//document.cookie = 'token=eyJhbGciOiJIUzUxMiQsYGXayyjifOuumc_GN9BwDGFAOg';\r\n\r\nconst wsLink = new WebSocketLink({\r\n  //這里的域名特别重要 cookie域名一致，在websocket握手连接http阶段跨域场景，浏览器才可会把cookie甩给后端的。\r\n  //若前端域名端口修改后，REACT_APP_WEBSOCKET_END地址不动的，token同样有效会被浏览器发给不改的那个后端。\r\n  uri: `${process.env.REACT_APP_WEBSOCKET_END}/subscriptions`,\r\n  //credentials: 'include',  //根本没用！\r\n  options: {\r\n    reconnect: true,\r\n    //timeout: 30, 乱加？，导致循环失败无休止。\r\n    reconnectionAttempts: 5,\r\n    connectionCallback: ackCallBack,\r\n    lazy: true,\r\n    inactivityTimeout: 90,\r\n    //这里的token实际上针对ws协议自己的，它发生作用时间点是http握手Upgrade以后的事情。\r\n    connectionParams: {\r\n      //这里添加参数都是ws的数据包，对http包却是没任何用处。\r\n      authToken: 'FqGDe03vhcblpObo)fghj851Ofg',    //非登录情况的验证。\r\n    }\r\n  }\r\n});\r\n\r\n//浏览器ws://192.168.1.105:8673/subscriptions请求头没显示带上cookie，可实际后端http握手却收到cookie。\r\n\r\n//const wsLink = new WebSocketLink(wsClient);       后端还不支持\r\n//const wsLink = empty();         //空的链接。\r\n\r\nconst logoutLink = onError((e: any) => {\r\n    const { networkError, graphQLErrors } = e;\r\n    if (   (networkError && networkError.statusCode === 401)  ||\r\n             (graphQLErrors && graphQLErrors.some((el: any) => el.message.statusCode === 401) )\r\n      ) {\r\n               helpers.logOut();\r\n       }\r\n});\r\n\r\n//缺省主安全域graphql， third 等接口servlet PATH;\r\nconst mainLink = logoutLink.concat(\r\n  concat(authMiddleware, new HttpLink({ uri: `${process.env.REACT_APP_BACK_END}/graphql`,\r\n      credentials: 'include'\r\n      }\r\n    )\r\n  )\r\n  //concat(authMiddleware, new HttpLink({ uri: `${process.env.API_URL}/graphql` }))\r\n);\r\n\r\n\r\n/* 不一样的包 import { HttpLink } from \"apollo-boost\";\r\nnew HttpLink({\r\n  uri: \"http://localhost:8083/graphql\", // Server URL (must be absolute)\r\n  opts: {\r\n    credentials: \"same-origin\" // Additional fetch() options like `credentials` or `headers`\r\n  }\r\n})\r\n\r\nconst httpLink = new HttpLink({\r\n    uri: __DEV__ ? devEndpoint : prodEndpoint,\r\n    credentials: 'include',\r\n  });\r\n*/\r\n\r\n\r\nconst terminatingLink = split(\r\n  ({ query }) => {\r\n    const { kind, operation } = getMainDefinition(\r\n      query\r\n    ) as OperationDefinitionNode;\r\n    return kind === 'OperationDefinition' && operation === 'subscription';\r\n  },\r\n  wsLink,\r\n  mainLink\r\n);\r\n\r\nconst link = ApolloLink.from([terminatingLink]);\r\n\r\n//declare function offsetLimitPagination<T = Reference>(keyArgs?: KeyArgs): FieldPolicy<T[]>;\r\nconst pageOd=offsetLimitPagination((args, { fieldName,field,variables }) => {\r\n    return  JSON.stringify(args!.where!)} );\r\nconst pageEs=offsetLimitPagination((args) => {\r\n    return  JSON.stringify(args!.as!)} );\r\n\r\n//缓存似乎无时间限制；只要有一个Query页面能触发强制刷新：比如浏览器URL重置，全部的查询也都会得到更新，网页SPA性质。\r\nexport const  client = new ApolloClient({\r\n  link,\r\n  cache: new InMemoryCache(\r\n    {\r\n      typePolicies: {\r\n        Query: {\r\n          fields: {\r\n            findAllEQPsFilter: pageOd,\r\n            getAllEqpEsFilter: pageOd,\r\n            getUnitEsFilter: pageEs,\r\n          },\r\n        },\r\n      },\r\n    }\r\n  )\r\n});\r\n\r\n\r\n/*注意InMemoryCache(typePolicies/fields)分页设置和fetchMore(updateQuery:{})的分页增量方式不可以同时使用的。前一个方式列表会保留旧的。\r\n    {\r\n      typePolicies: {\r\n        Query: {\r\n          fields: {\r\n            findAllEQPsFilter: offsetLimitPagination(),\r\n          },\r\n        },\r\n      },\r\n    }\r\n  offsetLimitPagination()实际使用参数{offset,limit}是useQuery({,内部接口传入参数offset,limit}),\r\n  但offsetLimitPagination共用relayStylePagination{read部分}\r\n  FieldPolicy{ keyArgs,read,merge }  keyArgs代表字段或接口函数参数的具体数值去区分的缓存，参数不一样的在cache分开存储ID列表。\r\n  merge是合并存储，read是读取当前分页显示。keyArgs才是消除重复数据？缺省false=按照名字而不管参数的。keyFn；\r\n*/\r\n\r\n\r\n/* 旧版的；\r\nexport const client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: split(\r\n    (operation: any) => {\r\n      const operationAST = getOperationAST(operation.query, operation.operationName);\r\n      return !!operationAST && operationAST.operation === 'subscription';\r\n    },\r\n    wsLink,\r\n    mainLink\r\n  )\r\n});\r\n\r\n同源策略：防止CORS攻击\r\nAccess to fetch at 'http://localhost:8083/graphql' from origin 'http://localhost:7789' has been blocked by CORS policy: Response to\r\npreflight request doesn't pass access control check: The 'Access-Control-Allow-Origin' header has a value 'http://localhost:3000'\r\n*/\r\n\r\n","D:\\home\\sei\\front-end\\src\\TopRouter.tsx",["494","495"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  Global } from \"@emotion/react\";\r\nimport { Suspense, lazy,  } from \"react\";\r\nimport * as React from \"react\";\r\n//import * as firebase from \"firebase/app\";\r\nimport { Route, Redirect, useRoute, Switch } from \"wouter\";\r\n\r\nimport { Login } from \"./LoginPane\";\r\nimport { Branding } from \"./Branding\";\r\nimport { Spinner,  } from \"customize-easy-ui-component\";\r\n//import { useAuthState } from \"react-firebase-hooks/auth\";\r\n//import { userContext } from \"./user-context\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport { useSession } from \"./auth\";\r\n//import { TestRoot } from \"./TestRoot.tsx--\";\r\nimport { Example as Test } from \"./comp/test02\";\r\nimport  Example  from \"./comp/test01\";\r\n//import MainReport from \"./report/ReportEntrance\";\r\nimport { EditStorageContext } from \"./report/StorageContext\";\r\nimport {Guide as ReportGuide} from \"./report/Guide\";\r\nimport { DevfilterContext } from \"./context/DevfilterContext\";\r\n\r\n//网站的顶级路由器；　这里可以添加或分解子网站，分批开发，分开管理属于同一个域名底下的多个内容网站。\r\n//根据类似的文件目录树结构来分解多个内容网站的路由，规划和编码URL。\r\n//四段法URL解析：　#之后的给location.hash,　?后的参数给location.search,　而?号之前的{且https://localhost:3765后面的}都算<Route>管的那=useLocation()返回值。\r\n//分层次做路由，例如path=\"/bsxt/fjsei/:rest*\" 这里*表示后面子路由的解析都划归这个组件了；需要嵌套细化解析子路径的话，就应在目标组件内部再细化和做二层次<Route>。\r\n\r\n//使用规则！:输入的path　直接透传给<component>。\r\ninterface PrivateRouteProps {\r\n  component: any;\r\n  path?: string;\r\n}\r\n\r\n//说明　...other这里　other表示剩下的参数[] ，占位表示形式。\r\n//必须授权才可以进入的页面：\r\nconst PrivateRoute = ({\r\n                        component: Component,\r\n                        path,\r\n                        ...other\r\n                      }: PrivateRouteProps) => {\r\n\r\n  const [match, params] = useRoute(path);\r\n  //基于底层连接cookie-token,来获取当前用户\r\n  const { user,loading } = useSession();\r\n  if(!match)  return null;\r\n\r\n  //const user = firebase.auth().currentUser;\r\n\r\n  console.log(\"PrivateRoute进入useSession=\",user,\";loading=\"+loading, match);\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          boxSizing: \"border-box\",\r\n          padding: \"3rem\",\r\n          justifyContent: \"center\",\r\n          display: \"flex\"\r\n        }}\r\n      >\r\n        <Spinner />\r\n      </div>\r\n    );\r\n  }\r\n  //刷新页面第一次ｎｕｌｌ，第二次获得user;\r\n  if (!user && params.rest) {\r\n    console.log(\"PrivateRoute进入params=\",params);\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n  //console.log(\"PrivateRoute进params=\",params);\r\n  if (!user) {\r\n    return <Redirect to=\"/login\" />;\r\n    //return null;\r\n  }\r\n\r\n  return <Component path={path} />;\r\n};\r\n\r\n//给第二层次的路由器做分解用。\r\n//使用规则！:输入的path 必须是/:rest*结尾的。 专门用于嵌套路由的；path截取基本路径给<component>。\r\ninterface NestingtRouteProps {\r\n  component: any;\r\n  path?: string;\r\n}\r\n//Todo: 问题，NestingtRoute， 导致Link 后缀重复添加。\r\n//嵌套路由必须在上层路由通过path/:rest*向下一级路由去传递相对的目录路径，下级路由无需预设基础路径/通过path参数设置。\r\nconst NestingtRoute_old = ({\r\n                         component: Component,\r\n                        path,\r\n                        ...other\r\n                      }: NestingtRouteProps) => {\r\n  console.log(\"NestingtRouteProps来了 , match=\",path);\r\n  const [match, params] = useRoute(path);\r\n  // path=\"/testroot/:rest*\" >\r\n  //基于底层连接cookie-token,来获取当前用户  useRoute(`${path}:recipe*`);\r\n  const { user,loading } = useSession();\r\n  if(!match)  return null;\r\n\r\n  //const user = firebase.auth().currentUser;\r\n  let urlhead=path.lastIndexOf(\"/:rest*\")\r\n  if(urlhead<0)\r\n    return null;\r\n  let basePath= urlhead>0? path.substring(0,urlhead) : \"/\";\r\n\r\n  console.log(\"NestingtRoute进入useSession2=\",user,\";basePath=\",params, basePath);\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          boxSizing: \"border-box\",\r\n          padding: \"3rem\",\r\n          justifyContent: \"center\",\r\n          display: \"flex\"\r\n        }}\r\n      >\r\n        <Spinner />\r\n      </div>\r\n    );\r\n  }\r\n  //刷新页面第一次ｎｕｌｌ，第二次获得user;\r\n  if (!user && params.rest) {\r\n    console.log(\"PrivateRoute进入params=\",params);\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n  //console.log(\"PrivateRoute进params=\",params);\r\n  if (!user) {\r\n    return <Redirect to=\"/login\" />;\r\n    //return null;\r\n  }\r\n\r\n  return <Component path={basePath} />;\r\n};\r\n\r\nconst NestingtRoute = ({\r\n                         component: Component,\r\n                         path,\r\n                         ...other\r\n                       }: NestingtRouteProps) => {\r\n  console.log(\"NestingtRouteProps来了 , path=\",path);\r\n  //基于底层连接cookie-token,来获取当前用户  useRoute(`${path}:recipe*`);\r\n  const { user,loading } = useSession();\r\n  const [match, params] = useRoute(path);\r\n  if(!match)  return null;\r\n  let urlhead=path.lastIndexOf(\"/:rest*\")\r\n  if(urlhead<0)   return null;\r\n\r\n  console.log(\"NestingtRoute进入useSession2=\",user,\";params=\",params);\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          boxSizing: \"border-box\",\r\n          padding: \"3rem\",\r\n          justifyContent: \"center\",\r\n          display: \"flex\"\r\n        }}\r\n      >\r\n        <Spinner />\r\n      </div>\r\n    );\r\n  }\r\n  //刷新页面第一次ｎｕｌｌ，第二次获得user;\r\n  if (!user && params.rest) {\r\n    console.log(\"PrivateRoute进入params=\",params);\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n  //console.log(\"PrivateRoute进params=\",params);\r\n  if (!user) {\r\n    return <Redirect to=\"/login\" />;\r\n    //return null;\r\n  }\r\n  //采用基准相对路径模式<Component path={basePath} />的也不好管理。\r\n  return <Component />;\r\n};\r\n\r\n//延迟加载（在组件渲染的时候，再去加载该组件）：延迟加载组件，需要个渲染加载过程,用旋转圆圈提示用户，加载进行时。\r\n//js打包的，延迟加载。\r\n// Function that wraps the component in a React Suspense component. Provides a fallback Loading screen\r\nexport const WaitingComponent = (Component: any) => {\r\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n  return (props: any) => (\r\n    <Suspense\r\n      //Fallback UI fallback＝用旋转圆圈提示用户　displays a loading spinner while rendering\r\n      fallback={\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            boxSizing: \"border-box\",\r\n            padding: \"3rem\",\r\n            justifyContent: \"center\",\r\n            display: \"flex\"\r\n          }}\r\n        >\r\n          <Spinner />\r\n        </div>\r\n      }\r\n    >\r\n      <Component {...props} />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\n//路由的主页面：React.lazy()用于延迟加载组件。加载的模式　；　而require 是运行时加载的；\r\n//const ExampleRouteK3Tag = WaitingComponent(lazy(() => import(\"./Branding\")));\r\nconst Main = WaitingComponent(lazy(() => import(\"./Main\")));\r\nconst DeviceMain = WaitingComponent(lazy(() => import(\"./device/DeviceMain\")));\r\nconst UnitMain = WaitingComponent(lazy(() => import(\"./unit/DeviceMain\")));\r\nconst InspectMain = WaitingComponent(lazy(() => import(\"./inspect/InspectMain\")));\r\nconst ReportEntrance = WaitingComponent(lazy(() => import(\"./report/ReportEntrance\")));\r\nconst Maintenance = WaitingComponent(lazy(() => import(\"./maintenance/MaintenanceMain\")));\r\nconst About = WaitingComponent(lazy(() => import(\"./About\")));\r\n\r\nfunction TopRouter() {\r\n  //const { initialising, } = useAuthState(firebase.auth());\r\n  const {user,loading} = useSession();  //App初始期间，无法获取到GlobalState组件后才生成的context信息。\r\n  //报告和原始记录用的临时内存存储！，避免太多次数保存发送给后端服务器。\r\n  const [storage, setStorage] = React.useState(null);\r\n  const [filter, setFilter] = React.useState(null);\r\n    //强制URL输入框去刷新才执行的；若是浏览器后退前进的不会执行到这，该场景直接执行NestingtRoute代码。\r\n  console.log(\"PageRouters入=\",user,\"loading=\",loading );\r\n  //<Router>套在<GlobalState>底下，所以鼠标点击在网页内切换页面不会再次运行GlobalState，除非是浏览器地址栏录入和手动刷新才会重新获取后端授权信息。\r\n  //这下面第一个<div>不能改成<>报错。\r\n  return (\r\n    <div>\r\n        <Global\r\n          styles={{\r\n            body: {\r\n              margin: 0,\r\n              padding: 0\r\n            },\r\n            html: {\r\n       //       width: \"190mm\",\r\n            }\r\n          }}\r\n        /*  css={ [ { padding: \"0px\" } ,\r\n            css`@page {\r\n              size: A4;\r\n            }`,\r\n          ] } */\r\n        />\r\n        <div className=\"App\">\r\n          <Helmet titleTemplate=\"%s | 特检院\" defaultTitle=\"特检院业务平台\" />\r\n          { /*\r\n　   注意底下<Switch>下面<Route path:是内定的，不管PrivateRoute还是其他，必有path,上层路由分解必须在这层进行，不能放在PrivateRoute内部。\r\n          */ }\r\n\r\n          <EditStorageContext.Provider\r\n                    value={{ storage, setStorage }}\r\n          >\r\n            <DevfilterContext.Provider\r\n              value={{ filter, setFilter }}\r\n            >\r\n\r\n          <Switch>\r\n            {!user &&  <Route path=\"/\">   <Branding />    </Route> }\r\n\r\n            <Route path=\"/login\">   <Login />    </Route>\r\n            <PrivateRoute path=\"/about\" component={About} />\r\n            <PrivateRoute path=\"/device/likeit\" component={Branding} />\r\n            <PrivateRoute path=\"/device/company\" component={Login} />\r\n\r\n            {/* <!-- NestingtRoute path=\"/seeok/fjsei/:rest*\" component={TestRoot}/!-->  */}\r\n\r\n            <PrivateRoute path=\"/chaipu/:rest*\" component={Main} />\r\n            <Route path=\"/\">   <Branding />   </Route>\r\n\r\n            <Route path=\"/test/test2\"  component={Test}/>\r\n            { /*\r\n　           从设备的视角来导航进入。\r\n            */ }\r\n            <NestingtRoute path=\"/device/:rest*\" component={DeviceMain}/>\r\n            <NestingtRoute path=\"/unit/:rest*\" component={UnitMain}/>\r\n            <NestingtRoute path=\"/inspect/:rest*\" component={InspectMain}/>\r\n            <Route path=\"/report/guide\">   <ReportGuide />    </Route>\r\n            <NestingtRoute path=\"/report/:rest*\" component={ReportEntrance}/>\r\n            <NestingtRoute path=\"/maintenance/:rest*\" component={Maintenance}/>\r\n\r\n            <Route path=\"/test/test1\">   <Example  />    </Route>\r\n            <Route path=\"/:rest*\"><h1>没有该URL匹配的Top视图内容</h1></Route>\r\n          </Switch>\r\n\r\n            </DevfilterContext.Provider>\r\n          </EditStorageContext.Provider>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default TopRouter;\r\n\r\n//原则上：ＵＲＬ？之前路径分解用于组件层次逻辑路由用途，？之后的参数用于应用层面参数化和定制化；路由用于大层次的组织/封装性好，参数用于局部琐碎的变动/灵活性好。\r\n//注意Route，PrivateRoute，若是匹配多个路由的，界面上将会出现多个主页面的输出，那就是有问题了：上面一个页面，后面跟着其它的页面。\r\n//上面的<PrivateRoute path=\"*\" component={Main} 当中*代表任意字符串；　<PrivateRoute path=\"/he\"精确路由\r\n//同样component={Main}，一个页面组件可以匹配到多个路由，若path相互包含的，以命中范围更小那一个的路由　优先的。\r\n//优化首屏加载速度: React.lazy来进行组件的动态导入，可以很好的拆分代码build\\static\\js\\2.00384fc9.chunk.js等多个文件。\r\n//build生产系统：.map文件的作用：项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。有了map就可以像未加密的代码一样，准确的输出是哪一行哪一列有错。\r\n//<PrivateRoute path=\"/he\"等同于path=\"/he/\"　路由<PrivateRoute path=\"*\" 进入页面后props[\"*\"]实际代表URL问号?之前的扣除path*前的，但是path=\"/he\"进入的props[\"*\"]为未定义。\r\n//组件内部嵌套子路由Route， 就像一般逻辑组件内嵌模式。 例子   https://blog.csdn.net/weixin_30652879/article/details/95477606\r\n//保证路由唯一性<Switch> only renders the first matching route.支持  https://www.npmjs.com/package/wouter\r\n//注意底下<Switch>下面<Route path:是内定的，不管PrivateRoute还是其他，必有path,上层路由分解必须在这层进行，不能放在PrivateRoute内部。\r\n//路径的敲定不可避免<NestingtRoute path=；组件跳转其它多个页面，还有其他页面需要跳转本组件，这些都需要事先预知绝对路径名，无法隔离路径的插入。\r\n//像这样的https://localhost:3765//device/likeit 将不会得到任何匹配<Switch> <Route 显示是空白的！； 正规则表达？。\r\n//路由path配置， 必须/号开始的 最后面/号不需要。\r\n\r\n\r\n//        <Route path=\"/report/:rest*\">   <MainReport name={'sds'} />    </Route>\r\n//wouter新版支持嵌套时候无需知道上一级路径。\r\n","D:\\home\\sei\\front-end\\src\\context\\GlobalState.tsx",["496"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\n//最早js的，改成tsx;\r\n//import React, { useReducer,useEffect } from 'react';\r\n\r\n//import ShopContext from './Shop-context';\r\n//import { shopReducer, ADD_PRODUCT, REMOVE_PRODUCT } from './Reducers';\r\nimport {gql, useQuery } from \"@apollo/client\";\r\n\r\nimport { userContext } from \"../user-context\";\r\n\r\n//这个模式无法实现预期 context。\r\n//要超越该限制，就该要引入存储机制了：cookie /local storage /graphql缓存 /直接后端服务器读取。\r\n//只能是本身页面之内的跳转，若是直接从浏览器那个地址栏输入切换URL的就会无法保留之前的状态数据＝被清空。\r\nconst GET_POSTS = gql`\r\n  query AUTH {\r\n    auth \r\n  }\r\n`;\r\n\r\nconst GlobalState = props => {\r\n  let user=null;\r\n  //const [authj, setAuthj] = React.useState(null);\r\n    //真正的清空，初始化！\r\n\r\n  //利用Reducer做派遣动作的钩子\r\n/*  const [cartState, dispatch] = useReducer(shopReducer, { cart: [] });\r\n\r\n  const addProductToCart = product => {\r\n    setTimeout(() => {\r\n      dispatch({ type: ADD_PRODUCT, product: product });\r\n    }, 200);\r\n  };\r\n\r\n  const removeProductFromCart = productId => {\r\n    setTimeout(() => {\r\n      dispatch({ type: REMOVE_PRODUCT, productId: productId });\r\n    }, 200);\r\n  };\r\n*/\r\n\r\n\r\n  //设置'cache-first'后，若是从浏览器地址栏直接刷新进入，还是会去后端服务器取最新数据的。\r\n  const { loading, error, data } = useQuery(GET_POSTS, {\r\n    notifyOnNetworkStatusChange: true,\r\n    fetchPolicy:  'cache-first'\r\n  });\r\n      //第一个render这里loading=true，要到第二次再执行到了这里才会有data数据!\r\n  console.log(\"刚GlobalStateQuery经过\"+ JSON.stringify(data) +\"进行中\"+ JSON.stringify(loading));\r\n  if(error)   throw new Error(`用户验证${error}`);\r\n  if(!loading){\r\n    if(data){\r\n      const { auth: userJsonText }: { auth: string } = data;\r\n      if(userJsonText){\r\n        var   authjs=null;\r\n        authjs = JSON.parse(userJsonText);\r\n        if(authjs && authjs.id)    user=authjs;\r\n        //setAuthj(authjs); 报错！//React limits the number of renders to prevent an infinite loop.\r\n        console.log(\"以GlobalState1从后端获得=\" + JSON.stringify(authjs),\"user=\",user);\r\n      }\r\n    }\r\n  }\r\n  //var authj=null;\r\n      //若是把authj放在useEffect里面，就无法给Context.Provider初始化value/user了？\r\n  /*\r\n  useEffect(() => {\r\n    if(data){\r\n      const { auth:user }: { auth: any } = data;\r\n      if(user){\r\n        var  authjs = JSON.parse(user);\r\n        setAuthj(authjs);\r\n        console.log(\"以GlobalState2从后端获得=\" + JSON.stringify(authjs));\r\n      }\r\n    }\r\n  }, [loading, error]);\r\n  */\r\n\r\n  //初始化Provider,　钩子；\r\n  //每一次的ｒｅｎｄｅｒ，这里都会变动value;\r\n  //真正的清空，初始化！\r\n  return (\r\n    <userContext.Provider\r\n      value={{\r\n        user,\r\n        loading\r\n      }}\r\n    >\r\n      {props.children}\r\n    </userContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n//<Router>套在<GlobalState>底下，所以鼠标点击在网页内切换页面不会再次运行GlobalState，除非是浏览器地址栏录入和手动刷新才会重新获取后端授权信息。\r\n\r\nexport default GlobalState;\r\n","D:\\home\\sei\\front-end\\src\\auth.ts",[],"D:\\home\\sei\\front-end\\src\\utils\\helpers.ts",["497"],"import session from './session';\r\n//import routeUrls from '../configs/routeUrls';\r\n\r\ninterface ErrorData {\r\n  error: string;\r\n  field: string;\r\n  [key: string]: string;\r\n}\r\n\r\ninterface GraphQLError {\r\n  extensions: {\r\n    exception: {\r\n      errors?: ErrorData[];\r\n    } & ErrorData;\r\n  };\r\n}\r\n\r\nexport default {\r\n  logOut() {\r\n    session.remove();\r\n    //    location.href = routeUrls.auth.login;     没用？？\r\n  },\r\n  getToken() {\r\n    return session.get();\r\n  },\r\n/*\r\n  getIdFromParams() {\r\n    return location.pathname.substring(location.pathname.lastIndexOf('/') + 1);\r\n  },\r\n*/\r\n  parseErrors(errs: GraphQLError[]): any {\r\n    const errors: any = {};\r\n    for (const err of errs) {\r\n      const {\r\n        extensions: { exception }\r\n      } = err;\r\n      if (exception.errors) {\r\n        for (const e of exception.errors) {\r\n          errors[e.field] = e.error;\r\n        }\r\n      }\r\n      errors[exception.field] = exception.error;\r\n    }\r\n    return errors;\r\n  }\r\n};\r\n","D:\\home\\sei\\front-end\\src\\user-context.ts",[],"D:\\home\\sei\\front-end\\src\\Branding.tsx",[],"D:\\home\\sei\\front-end\\src\\LoginPane.tsx",["498","499","500","501","502"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//import { Redirect, Link } from \"@reach/router\";\r\nimport {  Link, } from \"wouter\";\r\nimport food from \"./images/food.svg\";\r\nimport {\r\n  useTheme,\r\n  Layer,\r\n  Text,\r\n  Button,\r\n  Link as StyledLink,\r\n  LayerLoading,\r\n  Alert,\r\n  Container, Input, InputGroup, IconArrowRight\r\n} from \"customize-easy-ui-component\";\r\nimport { useSession, useLoginToServer, useRegisterToServer } from \"./auth\";\r\n//query-string是其他的基础库所依赖的，不是直接引入的。\r\nimport queryString from \"query-string\";\r\nimport { Layout } from \"./Layout\";\r\n//import { InputGroup } from \"./comp/Form\";\r\nimport { Link as RouterLink } from \"wouter\";\r\n\r\ninterface LoginProps {\r\n}\r\nexport const Login: React.FunctionComponent<LoginProps> = props => {\r\n  const theme = useTheme();\r\n  const {user,loading:isload} = useSession();\r\n  const qs = queryString.parse(window.location.search);\r\n  const [isRegistering, setIsRegistering] = React.useState(\r\n    typeof qs.register === \"string\"\r\n  );\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [redirectToReferrer, setRedirectToReferrer] = React.useState(false);\r\n  const [error, setError] = React.useState(\"\");\r\n  const [form, setForm] = React.useState({ username: \"\", password: \"\",\r\n         mobile:'', external:'旧平台'} as any);\r\n\r\n  const { result, submit:submitfunc, error:errLogin,  } = useLoginToServer(form);\r\n  const { result:regOK, submit:registerfunc, error:errReg } = useRegisterToServer(form);\r\n  console.log(\"登录机密 开始userList=\",regOK,\"errReg=\",errReg);\r\n\r\n  async function doLogin(e: React.FormEvent  | Event)\r\n  {\r\n      e.preventDefault();\r\n      try {\r\n        setError(\"\");\r\n        setLoading(true);\r\n        await  submitfunc();\r\n        setRedirectToReferrer(true);\r\n      } catch (err) {\r\n        setLoading(false);\r\n        setError(err.message);\r\n      }\r\n  }\r\n\r\n  async function doRegister()\r\n  {\r\n    if(form?.password2!==form.password)  return setError(\"两次输入的设置密码不一致\");\r\n    try {\r\n      setError(\"\");\r\n      setLoading(true);\r\n      await  registerfunc();\r\n      setError(\"恭喜您，账户申请单已提交，等待审核与自动开通，或可立刻联系维护人员去开\");\r\n      setLoading(false);\r\n    } catch (err) {\r\n      setLoading(false);\r\n      setError(err.message);\r\n    }\r\n  }\r\n  //都可能无法刷新？ <Redirect  to={from.pathname} />;  setLocation (to: Path, replace?: boolean)\r\n  React.useEffect(() => {\r\n    if(redirectToReferrer)\r\n        window.location.href = \"/\";       //强制刷新页面。\r\n  }, [redirectToReferrer]);\r\n\r\n\r\n  return (\r\n    <Layout>\r\n      <Container>\r\n        <div\r\n          css={{\r\n            marginTop: theme.spaces.xl,\r\n            marginBottom: theme.spaces.lg,\r\n            maxWidth: \"26rem\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            display: \"block\"    //若是换成display:flex;将导致两个子元素的并排一行显示，Layer对话框宽度InputGroup受到挤压。\r\n          }}\r\n        >\r\n          <Link\r\n            css={{\r\n              textDecoration: \"none\"\r\n            }}\r\n            to=\"/\"\r\n          >\r\n            <Text\r\n              variant=\"h4\"\r\n              css={{\r\n                alignItems: \"center\",\r\n                display: \"block\",\r\n\r\n                width: \"100%\",\r\n                textAlign: \"center\",\r\n                color: \"#43596c\"\r\n              }}\r\n              gutter={false}\r\n            >\r\n              <img\r\n                css={{\r\n                  width: \"75px\",\r\n                  height: \"75px\"\r\n                }}\r\n                src={food}  alt={''}\r\n                aria-hidden\r\n              />\r\n              <div css={{ marginTop: theme.spaces.sm }}>检验平台</div>\r\n            </Text>\r\n          </Link>\r\n          <Layer\r\n            css={{\r\n              boxShadow: \"none\",\r\n\r\n              background: \"white\",\r\n              [theme.mediaQueries.md]: {\r\n                marginTop: theme.spaces.xl,\r\n                boxShadow: theme.shadows.xl\r\n              }\r\n            }}\r\n          >\r\n            <div\r\n              css={{\r\n                borderBottom: \"1px solid\",\r\n                borderColor: theme.colors.border.muted,\r\n                textAlign: \"center\",\r\n                padding: theme.spaces.lg,\r\n                paddingBottom: theme.spaces.sm\r\n              }}\r\n            >\r\n              <Text variant=\"h4\">\r\n                {isRegistering ? \"我要注册一个账户\" : \"使用前先登陆账户\"}\r\n              </Text>\r\n\r\n              <div\r\n                css={{\r\n                  textAlign: \"center\",\r\n                  paddingBottom: theme.spaces.sm\r\n                }}\r\n              >\r\n                {isRegistering ? (\r\n                  <Text css={{ fontSize: theme.fontSizes[0] }}>\r\n                    已经有账户?{\" \"}\r\n                    <StyledLink\r\n                      href=\"#\"\r\n                      onClick={e => {\r\n                        e.preventDefault();\r\n                        setIsRegistering(false);\r\n                      }}\r\n                    >\r\n                      登录.\r\n                    </StyledLink>\r\n                  </Text>\r\n                ) : (\r\n                  <Text css={{ fontSize: theme.fontSizes[0] }}>\r\n                    若没有账户?{\" \"}先要\r\n                    <StyledLink\r\n                      href=\"#\"\r\n                      onClick={e => {\r\n                        e.preventDefault();\r\n                        setIsRegistering(true);\r\n                      }}\r\n                    >\r\n                      <Button size=\"xs\" noBind intent=\"primary\" iconAfter={<IconArrowRight/>}\r\n                      >申请注册\r\n                      </Button>\r\n                    </StyledLink>\r\n\r\n                  </Text>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div\r\n              css={{\r\n                padding: theme.spaces.lg\r\n              }}\r\n            >\r\n             <div   css={{  marginTop: theme.spaces.md   }}>\r\n                {isRegistering ? (\r\n                 <React.Fragment>\r\n                  <Text css={{ fontSize: theme.fontSizes[0] }}>\r\n                    首先提供旧平台的认证信息，认证通过才能申请成功。\r\n                  </Text>\r\n                   <InputGroup label=\"旧平台的账号ID\">\r\n                     <Input value={form?.eName||''}\r\n                         onChange={e =>setForm({ ...form, eName: e.currentTarget.value }) }\r\n                     />\r\n                   </InputGroup>\r\n                   <InputGroup label=\"旧平台密码\">\r\n                     <Input value={form?.ePassword||''} type=\"password\"\r\n                            onChange={e =>setForm({ ...form, ePassword: e.currentTarget.value }) }\r\n                     />\r\n                   </InputGroup>\r\n                   <InputGroup label=\"留个电话吧\">\r\n                     <Input value={form?.mobile||''}\r\n                            onChange={e =>setForm({ ...form, mobile: e.currentTarget.value }) }\r\n                     />\r\n                   </InputGroup>\r\n                 </React.Fragment>\r\n                ) : (\r\n                  <Text muted css={{ textAlign: \"center\" }} variant=\"subtitle\">\r\n                    请使用您的用户名密码登录:\r\n                  </Text>\r\n                )}\r\n                 <InputGroup  label={isRegistering ?'申请本平台账户名字':\"账户\"}>\r\n                    <Input\r\n                      onChange={e => {\r\n                        setForm({ ...form, username: e.currentTarget.value });\r\n                      }}\r\n                      value={form.username}\r\n                      inputSize=\"md\"\r\n                      type=\"text\"\r\n                      //浏览器HTML5验证格式是否正确input type=\"email\" required multiple/>\r\n                      placeholder=\"账户\"\r\n                    />\r\n                  </InputGroup>\r\n                  <InputGroup hideLabel={!isRegistering} label={isRegistering ?'设置登录密码(强度不合格会报错)':\"密码\"}>\r\n                    <Input\r\n                      onChange={e => {\r\n                        setForm({ ...form, password: e.currentTarget.value });\r\n                      }}\r\n                      value={ form.password }\r\n                      inputSize=\"md\"\r\n                      type=\"password\"\r\n                      //type={ form.password? \"password\":\"text\"}强制要求输入密码，不采用浏览器填充记住的密码。\r\n                      placeholder=\"密码最少6位的复杂的\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  </InputGroup>\r\n\r\n                {isRegistering ? (\r\n                  <React.Fragment>\r\n                    <InputGroup label=\"第二次输入密码\">\r\n                      <Input value={form?.password2||''} type=\"password\" placeholder=\"两次密码要相同\"\r\n                             onChange={e =>setForm({ ...form, password2: e.currentTarget.value }) }\r\n                      />\r\n                    </InputGroup>\r\n                  </React.Fragment>\r\n                ) : ( null )}\r\n\r\n               {error && (\r\n                 <Alert\r\n                   css={{ marginTop: theme.spaces.md }}\r\n                   intent={regOK ? 'success':\"danger\"}\r\n                   title={regOK ? '恭喜成功':\"后端报错\"}\r\n                   subtitle={error}\r\n                 />\r\n               )}\r\n                <div css={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                  <Button\r\n                    disabled={!form.username || !form.password}\r\n                    block\r\n                    component=\"button\"\r\n                    css={{\r\n                      textAlign: \"center\",\r\n                      width: \"100%\",\r\n                      marginTop: theme.spaces.md\r\n                    }}\r\n                    type=\"submit\"\r\n                    size=\"md\"\r\n                    intent=\"primary\"\r\n                    onPress={e =>{isRegistering ? doRegister() : doLogin(e) } }\r\n                  >\r\n                    {isRegistering ? \"注册申请\" : \"登录\"}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <LayerLoading loading={loading || isload} />\r\n          </Layer>\r\n        </div>\r\n      </Container>\r\n    </Layout>\r\n  );\r\n};\r\n\r\n\r\n/*屏蔽密码的自动填充功能。\r\n    <Input\r\n      　setForm({ ...form, password: e.currentTarget.value });　这里后面的新属性替换顺序在前面的同名字属性。\r\n    type={ form.password? \"password\":\"text\"}\r\n    />\r\n*/\r\n//若用<RouterLink to=\"/login?register=true\">只是在URL?号后面修改的去路由，就不会有任何动作的，因为本身已经是/login这个页面，这样问号后面不作数了。\r\n//使用e.target时要小心，而用e.currentTarget就可放心;  https://blog.csdn.net/syleapn/article/details/81289337\r\n","D:\\home\\sei\\front-end\\src\\Main.tsx",[],"D:\\home\\sei\\front-end\\src\\context\\DevfilterContext.tsx",[],"D:\\home\\sei\\front-end\\src\\About.tsx",[],"D:\\home\\sei\\front-end\\src\\comp\\test01.tsx",["503"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  ScrollView,\r\n  List,\r\n  ListItem,\r\nSkeleton, useInfiniteScroll\r\n} from \"customize-easy-ui-component\";\r\n//import useThrottle from \"@rooks/use-throttle\";\r\nimport { useThrottle } from \"../hooks/useHelpers\";\r\n//import parseXlsx from 'excel';   //前端使用就报错.createReadStream is not a function\r\n//import { globalHistory  } from \"@reach/router\";\r\n//import excelData from \"fileTest2.xlsx\";　\r\nimport excelData from \"./dataMaintain.json\";\r\nimport { gql } from '@apollo/client';\r\nimport { Subscription } from '@apollo/client/react/components';\r\n\r\n\r\nconst HELLO_SUBSCRIPTION = gql`\r\n    subscription onQQreq {\r\n        qqCommunicate\r\n    }\r\n`\r\nvar faker = require('faker/locale/zh_CN');\r\n\r\nconst set = new Set();\r\nexport default function Example(props) {\r\n  const [number, setNumber] = React.useState(0);\r\n  const addNumber = (egr) => {\r\n    console.log(\"RecordView捕获,切花source egr=\",egr);\r\n   setNumber(number + 1);\r\n}\r\n  //let isReady=true;\r\n  const {doFunc:addNumberThrottled, ready:isReady} = useThrottle(addNumber,4000);\r\n // const [addNumberThrottled, isReady] = useThrottle(addNumber, 4000);\r\n\r\n  const [count, setCount] = React.useState(1);\r\n  const [val, setVal] = React.useState('');\r\n\r\n  const callback = React.useCallback(() => {\r\n    return count;\r\n  }, [count]);\r\n\r\n  set.add(callback);\r\n\r\n\r\n  const [ inp , dispatch] = React.useReducer( (state, action) => {\r\n    switch (action.type) {\r\n      default:\r\n        return {  ...state,  ...action  }\r\n    }\r\n  }, {\r\n  });\r\n\r\n\r\n  React.useEffect(() => {\r\n    console.log('render useEffect')\r\n    const id = setInterval(() => {\r\n\r\n        dispatch( { dfg11: `很tutyui候`  } );\r\n\r\n      console.log(`[uuu] count is ${inp}, ;`, 'inp=',inp);\r\n    }, 5000);\r\n    return () => clearInterval(id);\r\n  }, [inp]);\r\n\r\n  React.useEffect(() => {\r\n    console.log(`[change] inp is ${inp}`);\r\n  }, [inp]);\r\n\r\n\r\n\r\n  const ref = React.useRef();\r\n  const [items, setItems] = React.useState(\r\n    Array.from(new Array(4)).map(() => faker.name.firstName())\r\n  );\r\n\r\n  function fetchdata() {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve(void 0);\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n\r\n  const [page, setPage] = React.useState(0);\r\n  //customize-easy-ui-component.useInfiniteScroll必须内容撑开才可以滚动触发函数。\r\n  const [fetching] = useInfiniteScroll({\r\n    container: ref,\r\n    hasMore: page <3,\r\n    onFetch: () => {\r\n      return fetchdata().then(() => {\r\n        setItems([\r\n          ...items,\r\n          ...Array.from(new Array(3)).map(() => faker.name.firstName())\r\n        ]);\r\n        setPage(page + 1);\r\n      });\r\n    }\r\n  });\r\n\r\n  //const [option, setOption] = useHistoryState(\"\", \"option\");\r\n  //使用window.history.pushState(；必须刷新页面才有数据。 \"d:\\\\\\\\jtestx.xlsx\"\r\n  //console.log(\"来看当前的items nowPath=\",globalHistory.location.state&&globalHistory.location.state.option, omit(globalHistory.location.state,'key'), globalHistory.location.state);\r\n  //var test = require('fs').readFileSync('./test.txt', 'utf8');\r\n\r\n  console.log(\"来看当前的Spreadsheet.xlsx 没提供函数=\", excelData);\r\n\r\n\r\n\r\n  // @ts-ignore\r\n  ref.current && console.log(\"来看\", ref.current.offsetHeight,\"+\",ref.current.clientHeight,\"大于\",ref.current.scrollHeight);\r\n\r\n//addNumberThrottled('上空的飞机但是')\r\n  return (\r\n    <div>\r\n      <h1>Number: {number}</h1>\r\n      <p>Click really fast.</p>\r\n      <button onClick={addNumber}>Add number</button>\r\n      <button onClick={()=>{addNumberThrottled('上空的飞机但是')} }>Add number isReady={isReady?'yes':'no'} throttled</button>\r\n      <hr/>\r\n      <h4>{count}</h4>\r\n      <hr/>\r\n      <Child callback={callback}/>\r\n      <hr/>\r\n      <div>\r\n        <Subscription\r\n          subscription={HELLO_SUBSCRIPTION}\r\n        >\r\n          {({ data, loading }) => {\r\n            if (!loading && data && data.qqCommunicate) {\r\n              return <p>{data.qqCommunicate}</p>\r\n            } else {\r\n              return <p>Loading...</p>\r\n            }\r\n          }}\r\n        </Subscription>\r\n        <button onClick={() => setCount(count + 1)}>+加速</button>\r\n        <input value={val} onChange={event => setVal(event.target.value)}/>\r\n      </div>\r\n\r\n\r\n<ScrollView overflowY css={{ height: \"230px\" }} innerRef={ref}>\r\n      <h2>function component</h2>\r\n      <p>count is </p>\r\n      <List>\r\n        {items.map(item => (\r\n          <ListItem key={item} primary={item}　title={item} />\r\n        ))\r\n        }\r\n        {fetching && (\r\n          <ListItem\r\n            interactive={false}\r\n            aria-live=\"polite\"\r\n            aria-busy=\"true\"\r\n            primary={<Skeleton animated css={{ width: \"150px\" }} />}\r\n          />\r\n        )}\r\n      </List>\r\n    </ScrollView>\r\n  </div>\r\n  );\r\n}\r\n\r\nfunction Child({ callback }) {\r\n  const [count, setCount] = React.useState(() => callback());\r\n  React.useEffect(() => {\r\n    setCount(callback());\r\n  }, [callback]);\r\n  return <div>ghgh\r\n    {count}nnnnn\r\n  </div>\r\n}\r\n/*\r\nfunction getUser() {\r\n  faker.seed(0);\r\n\r\n  return {\r\n    name: faker.name.firstName() + \" \" + faker.name.lastName(),\r\n    uid: faker.random.uuid(),\r\n    description: faker.lorem.sentence()\r\n  };\r\n}\r\n*/\r\n\r\nexport  function Example22(props) {\r\n\r\n  const [{ count, step, inp }, dispatch] = React.useReducer( (state, action) => {\r\n    switch (action.type) {\r\n      case 'increment':\r\n        return {\r\n          ...state,\r\n          count: state.count + state.step,\r\n          step: state.step + 1,\r\n          inp: {...state.inp, ...action.inp},\r\n        }\r\n      default:\r\n        return state;\r\n    }\r\n  }, {\r\n    count: 0,\r\n    step: 1,\r\n    inp: {} as any,\r\n  });\r\n\r\n\r\n  React.useEffect(() => {\r\n    console.log('render useEffect')\r\n    const id = setInterval(() => {\r\n      if(count>11)\r\n        dispatch({ type: 'increment', inp: { dfg11: `很${count}候` } });\r\n      else\r\n        dispatch({ type: 'increment', inp: { dfg01: `很${count}候` } });\r\n      console.log(`[] count is ${count}, step is ${step}`, 'inp=',inp);\r\n    }, 5000);\r\n    return () => clearInterval(id);\r\n  }, [count, step,    inp]);\r\n\r\n  React.useEffect(() => {\r\n    console.log(`[change] count is ${count}`);\r\n  }, [count]);\r\n\r\n  React.useEffect(() => {\r\n    console.log(`[change] step is ${step}`);\r\n  }, [step]);\r\n\r\n  const ref = React.useRef();\r\n  const [items, setItems] = React.useState(\r\n    Array.from(new Array(4)).map(() => faker.name.firstName())\r\n  );\r\n\r\n  function fetchdata() {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve(void 0);\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n\r\n  const [page, setPage] = React.useState(0);\r\n  //customize-easy-ui-component.useInfiniteScroll必须内容撑开才可以滚动触发函数。\r\n  const [fetching] = useInfiniteScroll({\r\n    container: ref,\r\n    hasMore: page <3,\r\n    onFetch: () => {\r\n      return fetchdata().then(() => {\r\n        setItems([\r\n          ...items,\r\n          ...Array.from(new Array(3)).map(() => faker.name.firstName())\r\n        ]);\r\n        setPage(page + 1);\r\n      });\r\n    }\r\n  });\r\n\r\n  //const [option, setOption] = useHistoryState(\"\", \"option\");\r\n  //使用window.history.pushState(；必须刷新页面才有数据。\r\n\r\n  //console.log(\"来看当前的items nowPath=\",globalHistory.location.state&&globalHistory.location.state.option, omit(globalHistory.location.state,'key'), globalHistory.location.state);\r\n\r\n//  console.log(\"来看当前的items nowPath=\",globalHistory.location.state ,\"option=\",globalHistory);\r\n  // @ts-ignore\r\n  // ref.current && ( ref.current.scrollHeight=350);\r\n  // @ts-ignore\r\n  ref.current && console.log(\"来看\", ref.current.offsetHeight,\"+\",ref.current.clientHeight,\"大于\",ref.current.scrollHeight);\r\n\r\n\r\n  return (\r\n    <ScrollView overflowY css={{ height: \"230px\" }} innerRef={ref}>\r\n      <h2>function component</h2>\r\n      <p>count is {count}</p>\r\n      <List>\r\n        {items.map(item => (\r\n          <ListItem key={item} primary={item}　title={item} />\r\n        ))\r\n        }\r\n        {fetching && (\r\n          <ListItem\r\n            interactive={false}\r\n            aria-live=\"polite\"\r\n            aria-busy=\"true\"\r\n            primary={<Skeleton animated css={{ width: \"150px\" }} />}\r\n          />\r\n        )}\r\n      </List>\r\n    </ScrollView>\r\n  );\r\n}\r\n","D:\\home\\sei\\front-end\\src\\comp\\test02.tsx",["504"],"D:\\home\\sei\\front-end\\src\\report\\StorageContext.tsx",[],"D:\\home\\sei\\front-end\\src\\report\\Guide.tsx",["505","506","507","508","509","510","511","512","513","514","515"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, css,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Text,\r\n  Toolbar,\r\n  useTheme,\r\n  Button,\r\n  IconChevronDown,\r\n  IconChevronUp,\r\n  Select, Container, IconCloud, InputGroupLine, Input, TabPanel, IconArrowRight, Layer\r\n} from \"customize-easy-ui-component\";\r\n//import useLocation from \"wouter/use-location\";\r\nimport {  useQueryOriginalRecord } from \"./db\";\r\n//import { useUid } from \"customize-easy-ui-component/esm/Hooks/use-uid\";\r\nimport food from \"../images/food.svg\";\r\nimport { Layout } from \"./Layout\";\r\n\r\nimport { Link as RouterLink } from \"wouter\";\r\n\r\n\r\n//viewAll是否是整个报表都一起显示。\r\nexport  function Guide({printing, }:{printing?:boolean, },props) {\r\n  const theme = useTheme();\r\n  //useState(默认值) ； 后面参数值仅仅在组件的装载时期有起作用，若再次路由RouterLink进入的，它不会依照该新默认值去修改show。useRef跳出Cpature Value带来的限制\r\n  //采用RouterLink页内路由进入useState还保留旧的值，要修改就将会导致render两次；旧的值新的值各一次渲染。若采用URL刷新模式只有一次。\r\n  const [show, setShow] = React.useState(false);\r\n  const [repId, setRepId] = React.useState('');\r\n  let filtercomp={ id:repId };\r\n  //refetch() 引起 loading= True/False变化，从而需要组件范围render重做搞2次。\r\n  //若是浏览器后退前进的场景不会执行useQueryOriginalRecord代码，item已经有数据了，loading不会变化。\r\n  const {loading,items, } =useQueryOriginalRecord(filtercomp);\r\n // const [template, ] = React.useState(null   as any);\r\n  //模板的类型标识\r\n  const [tplType, setTplType] = React.useState('EL-DJ');\r\n\r\n  //复检数据拷贝初检后再度修订的。最初的初检数据原封不动。复检rexm，正检data，结论及审核改定deduction｛也可部分照搬复检rexm正检data或映射转译｝。\r\n  //原始记录录入模式复检正检，［正式报告来源项］只读的预览结论模式{动态生成结论}，(完毕提交)；\r\n  //１原始记录　组件：不可改的不保存的［推断］结论项。　　　内容细化描述；复检正检数据切换的；结论项提示性质；　－－给检验操作人员录入。\r\n  //２审核组件：回退或者往前固化结论项后保存给正式报告页面。　项目文本简化，数据需要保存给后端；－－正式报告手机可预览版，无下拉分区，不能编辑，－－核准管理人员审批。\r\n  //３正式报告那个目录的打印页面。只读的，结论项也是读后端的；正式报告文书版本或可转保存其他如pdf类型文档，无下拉分区，全展示；－－大众用户查看。\r\n  //审核但是不能修改检验数据模式，回退编制复检？或后台修正；校对转正式报告数据倒腾和推断合并结论项目，另外保存成了deduction，对表正式报告，报告排版美化。\r\n  const [inp, setInp] = React.useState(null);\r\n\r\n\r\n  //外部dat不能加到依赖，变成死循环! const  dat =items&&items.data&&JSON.parse(items.data);  这dat每次render都变了？\r\n  //从后端返回的数据可能items已经被修改了\r\n  React.useEffect(() => {\r\n    const  dat =items&&items.data&&JSON.parse(items.data);\r\n     dat && setInp(dat);\r\n  }, [items]);\r\n\r\n  //父辈组件重做render了，不意味着其儿孙组件们也需要重做render。\r\n  //依赖项[inp, show]没变化， useMemo包裹的且已经挂载的组件就不会重新render；降低重复部分的render工作量。\r\n  //？有隐藏错误：projectList长度变化了，导致RecordView内useProjectListAs部的hook调用次数顺序的修改，引起报错！　tplType变化必须刷新？。\r\n  /*\r\n  const projects= React.useMemo(() =>\r\n                  <RecordView inp={inp} showAll={show} projectList={projectList}/>\r\n                          ,[inp, show, tplType, projectList] );\r\n  */\r\n\r\n  //假如这里加 if( loading )  return <LayerLoading loading/>; 会导致子组件被unmount，随后需要再一次挂载等于这部分分支的URL刷新一样。\r\n  React.useEffect(() => {\r\n    //  loadTemplate(typeAsRoute[tplType], setTemplate);\r\n      //console.log(\"loadTemplate动态执行import!  tplType =\", tplType);\r\n  }, [tplType]);\r\n\r\n\r\n  console.log(\"祖父OriginalRecord辈：捕获 ==inp=[\",  inp,  \"]items=\", items ,\"loading=\", loading);\r\n  /*这样子的逻辑， 反而导致重度加载， &&逻辑类比 路由模式，可引起该分叉的底下所有子组件重新render等价于局部的URL刷新！得不偿失。\r\n    if(previousPar!==par && !isEqual(inp,itemVal))\r\n        return <LayerLoading loading={true} label={'更新数据，加载中请稍后'}/>;   看不出效果来，会立刻运行下一步的render了。    */\r\n\r\n  return (\r\n    <Layout>\r\n      <Container  css={{\r\n        boxSizing: \"border-box\",\r\n        flexDirection: \"column\",\r\n        flex: \"1\",\r\n        boxShadow: \"none\",\r\n        position: \"absolute\",\r\n        width: \"100%\",\r\n        borderRadius: 0,\r\n        height: `calc(100vh)`,\r\n      }}>\r\n      <Toolbar>\r\n        <RouterLink　to=\"/\">\r\n        <Text\r\n          variant=\"h5\"\r\n          css={{\r\n            alignItems: \"center\",\r\n            display: \"flex\",\r\n            color: \"#43596c\"\r\n          }}\r\n          gutter={false}\r\n        >\r\n          <img\r\n            css={{\r\n              marginRight: theme.spaces.sm,\r\n              width: \"30px\",\r\n              height: \"30px\"\r\n            }}\r\n            src={food} alt={``}\r\n            aria-hidden\r\n          />\r\n          <span>检验平台</span>\r\n        </Text>\r\n        </RouterLink>\r\n        <div css={{ marginLeft: \"auto\" }}>\r\n        </div>\r\n      </Toolbar>\r\n\r\n        <Container css={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          height: '100%'\r\n        }}>\r\n          <div css={{\r\n              margin: 'auto',\r\n              background: \"white\"\r\n            }}\r\n          >\r\n            <Text  variant=\"h5\"　css={{ textAlign: 'center' }}>\r\n              <span>目前支持电梯的定期检验</span>\r\n            </Text>\r\n            <InputGroupLine  label='报告ID{将来是从链接地址自动获得}' >\r\n              <Input  value={repId}  placeholder=\"那一份报告？将来是点击链接自动获得\"\r\n                      onChange={e => setRepId(e.currentTarget.value) } />\r\n            </InputGroupLine>\r\n            <InputGroupLine  label='本系统签发token{将来是从链接地址自动获得}' >\r\n              <Input  value={''}  placeholder=\"三月有效；登录用户无需token\"\r\n                      onChange={e => void 0 } />\r\n            </InputGroupLine>\r\n            <RouterLink to={`/report/EL-DJ/ver/1/preview/${repId}`}>\r\n              <Button\r\n                size=\"lg\" noBind\r\n                intent=\"primary\"\r\n                variant=\"ghost\"\r\n                iconAfter={<IconCloud />}\r\n              >\r\n                读取该份报告内容\r\n              </Button>\r\n            </RouterLink>\r\n          </div>\r\n        </Container>\r\n\r\n        <hr/>\r\n        <Text variant=\"h5\" css={{ textAlign: 'center' }}>\r\n          业务端客户可以无密码登录进入浏览报告，但是必须提供本系统签发的token来验明真身，token三个月有效期，过期想看报告需申请。\r\n        </Text>\r\n      </Container>\r\n    </Layout>\r\n  );\r\n}\r\n\r\n","D:\\home\\sei\\front-end\\src\\unit\\DeviceMain.tsx",["516","517","518"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, css } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Toolbar,\r\n  Navbar,\r\n  useTheme,\r\n  IconButton,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  Layer,\r\n  TabPanel,\r\n  MenuList,\r\n  MenuItem,\r\n  Tooltip,\r\n  ResponsivePopover,\r\n  IconChevronDown,\r\n  IconPlus,\r\n  DarkMode,\r\n  LightMode,\r\n  Pager, IconArchive\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport { useSession,  useSignOut } from \"../auth\";\r\nimport { Link, useRoute, useLocation, Switch, Route } from \"wouter\";\r\nimport { useMedia } from \"use-media\";\r\nimport { Layout } from \"./Layout\";\r\nimport { TaskList } from \"./task/TaskList\";\r\nimport { DispatchIspMen } from \"./task/DispatchIspMen\";\r\nimport { UnitList } from \"./UnitList\";\r\nimport { IspEntrance } from \"./task/IspEntrance\";\r\nimport { useCountOfTask } from \"./db\";\r\nimport { Link as RouterLink } from \"wouter\";\r\nimport { DetailedGuide } from \"./DetailedGuide\";\r\n\r\ninterface DeviceMainProps {\r\n  id?: string;\r\n}\r\n\r\nexport const DeviceMain: React.FunctionComponent<DeviceMainProps> = props => {\r\n  const theme = useTheme();\r\n  const {user} = useSession();\r\n  const isLarge = useMedia({ minWidth: \"768px\" });\r\n\r\n  const [, params] = useRoute(\"/unit/:recipe*\");\r\n  let showingRecipe = params.recipe;\r\n  let initTab=0;\r\n\r\n  const [activeTab, setActiveTab] = React.useState(initTab);\r\n  const [, setLocation] = useLocation();\r\n  const renderList = isLarge || !showingRecipe;  　//大屏或者小屏但是没有显示具体明细页的场合。\r\n\r\n  function onLogoutDo() {\r\n    setLocation(\"/login\",  { replace: false } );\r\n  }\r\n  const { submitfunc:signOut,  } = useSignOut(onLogoutDo);\r\n  //const { item:sumofTask,  } = useCountOfTask({dep:\"\", status:\"\"} );\r\n\r\n  return (\r\n    <Layout>\r\n      <div\r\n        css={css`\r\n          display: flex;\r\n          box-sizing: border-box;\r\n        `}\r\n      >\r\n        {/*左半部分,小的列表*/}\r\n        <Layer\r\n          aria-hidden={!renderList}\r\n          css={{\r\n            display: renderList ? \"flex\" : \"none\",   //最关键！\r\n            boxSizing: \"border-box\",\r\n            flexDirection: \"column\",\r\n            flex: \"1\",\r\n            boxShadow: \"none\",\r\n            background: \"white\",\r\n            position: \"absolute\",\r\n            width: \"100%\",\r\n            borderRadius: 0,\r\n            margin: 0,\r\n            height: `calc(100vh)`,\r\n            [theme.mediaQueries.md]: {\r\n              display: \"flex\",\r\n              position: \"absolute\",\r\n              zIndex: theme.zIndices.fixed,\r\n              top: 0,\r\n              boxShadow: theme.shadows.xl,\r\n              overflow: \"hidden\",\r\n              width: \"100%\",\r\n              maxWidth: \"46vw\",\r\n              borderRadius: theme.radii.lg,\r\n              margin: theme.spaces.lg,\r\n              height: `calc(100vh - ${theme.spaces.lg} - ${theme.spaces.lg})`\r\n            },\r\n            [theme.mediaQueries.xl]: {\r\n              margin: theme.spaces.xl,\r\n              maxWidth: \"40vw\",\r\n              height: `calc(100vh - ${theme.spaces.xl} - ${theme.spaces.xl})`\r\n            }\r\n          }}\r\n        >\r\n          {/*　顶部黑色工具条2行，sticky模式，这黑色标题区导致很多烦恼！高度被不规律占用; 两行合计105px=\r\n            64px =是Toolbar引起的；\r\n                minHeight: MOBILE_HEIGHT,  MOBILE_HEIGHT = \"56px\";   来源于UI基础<Toolbar部件的（要看参数compressed和屏幕）,\r\n                },  _b[theme.mediaQueries.md] = {\r\n                  minHeight: DESKTOP_HEIGHT, DESKTOP_HEIGHT = \"64px\";\r\n            41px =是字0.875rem + 2 * 10px；　   来源于<Tab 组件的 按钮+文本。\r\n            实际上<TabPanel组件和Tabs按钮的白色脖子样边条还要算入7px的;\r\n          */}\r\n          <div\r\n            css={[\r\n              {\r\n                width: \"100%\",\r\n                top: 0,\r\n                background: theme.colors.palette.gray.base,\r\n                zIndex: theme.zIndices.sticky,\r\n                position: \"sticky\",\r\n              }\r\n            ]}\r\n          >\r\n            <Navbar\r\n              position=\"static\"\r\n              css={{\r\n                flex: \"0 0 auto\",\r\n                background: theme.colors.palette.gray.base,\r\n                color: \"white\"\r\n              }}\r\n            >\r\n              <Toolbar\r\n                css={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\"\r\n                }}\r\n              >\r\n                <div css={{ width: \"42px\" }} />\r\n                <LightMode>\r\n                  <ResponsivePopover\r\n                    content={\r\n                      <MenuList>\r\n                        <MenuItem onPress={()=>signOut()}>退出登录帐户</MenuItem>\r\n                      </MenuList>\r\n                    }\r\n                  >\r\n                    <DarkMode>\r\n                      <Button\r\n                        size=\"md\"\r\n                        iconAfter={<IconChevronDown />}\r\n                        variant=\"ghost\"\r\n                      >\r\n                        {user.username || user.mobile}\r\n                      </Button>\r\n                    </DarkMode>\r\n                  </ResponsivePopover>\r\n                </LightMode>\r\n                <Tooltip content=\"单位新增\">\r\n                  <div>\r\n                    <DarkMode>\r\n                      <RouterLink to=\"/unit/new\">\r\n                      <IconButton\r\n                        noBind\r\n                        variant=\"ghost\"\r\n                        label=\"加设备\"\r\n                        size=\"md\"\r\n                        icon={<IconPlus />}\r\n                      />\r\n                      </RouterLink>\r\n                    </DarkMode>\r\n                  </div>\r\n                </Tooltip>\r\n                <Tooltip content=\"返回首页\">\r\n                  <div>\r\n                    <DarkMode>\r\n                      <Link to=\"/\">\r\n                        <IconButton\r\n                          variant=\"ghost\"\r\n                          label=\"首页\"\r\n                          size=\"md\"\r\n                          icon={<IconArchive />}\r\n                        />\r\n                      </Link>\r\n                    </DarkMode>\r\n                  </div>\r\n                </Tooltip>\r\n              </Toolbar>\r\n            </Navbar>\r\n            <div css={{ flex: \"0 0 auto\", zIndex: 2 }}>\r\n              <DarkMode>\r\n                <Tabs\r\n                  css={{\r\n                    position: \"sticky\",\r\n                    top: 0,\r\n                    background: theme.colors.palette.gray.base\r\n                  }}\r\n                  onChange={i => setActiveTab(i)}\r\n                  value={activeTab}\r\n                  variant=\"evenly-spaced\"\r\n                >\r\n                  <Tab id=\"company\">\r\n                    找企业\r\n                  </Tab>\r\n                  <Tab id=\"person\">\r\n                    找个人\r\n                  </Tab>\r\n                  <Tab id=\"owns\">名下设备</Tab>\r\n                  <Tab id=\"maintain\">其他功能</Tab>\r\n                </Tabs>\r\n              </DarkMode>\r\n            </div>\r\n          </div>\r\n\r\n          <Pager\r\n            enableScrollLock={false}\r\n            value={activeTab}\r\n            onRequestChange={i => setActiveTab(i)}\r\n            lazyLoad\r\n          >\r\n            <TabPanel id=\"company\">\r\n              <UnitList company />\r\n            </TabPanel>\r\n            <TabPanel id=\"person\">\r\n              <UnitList  />\r\n            </TabPanel>\r\n            <TabPanel  id=\"owns\">\r\n              <TaskList />\r\n            </TabPanel>\r\n            <TabPanel id=\"maintain\">\r\n              未开启，建设中。。。\r\n            </TabPanel>\r\n          </Pager>\r\n        </Layer>\r\n        {\r\n          //实际情况：在小屏场合，左半边内容被后面的右中文档流后面的界面部分给屏蔽遮盖掉了。\r\n        }\r\n        {showingRecipe && (\r\n          <div\r\n            css={{\r\n              display: \"block\",\r\n              position: \"relative\",\r\n              flex: 1,      　//对布局影响最大\r\n              [theme.mediaQueries.md]: {\r\n                display: \"flex\",\r\n                justifyContent: \"center\"\r\n              }\r\n            }}\r\n          >\r\n\r\n            <div\r\n              css={{\r\n                display: \"block\",\r\n                position: \"absolute\",\r\n                width: \"100%\",\r\n                boxSizing: \"border-box\",\r\n                [theme.mediaQueries.md]: {\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  padding: theme.spaces.lg,\r\n                  minHeight: \"100vh\",\r\n                  paddingLeft: \"calc(46vw + 3rem)\"\r\n                },\r\n                [theme.mediaQueries.xl]: {\r\n                  paddingRight: theme.spaces.xl,\r\n                  paddingLeft: \"calc(40vw + 6rem)\"\r\n                }\r\n              }}\r\n            >\r\n              <Layer\r\n                elevation=\"xl\"\r\n                //组件id! 缺少key导致：遇到小屏幕轮转显示正常，大屏整个显示模式却必须手动刷新才能切换内容。\r\n                key={showingRecipe}\r\n                css={{\r\n                  borderRadius: 0,\r\n                  position: \"relative\",\r\n                  boxShadow: \"none\",\r\n                  width: \"100%\",\r\n                  [theme.mediaQueries.md]: {\r\n                    marginTop: \"auto\",\r\n                    height: \"auto\",\r\n                    overflow: \"hidden\",\r\n                    boxSizing: \"border-box\",\r\n                    marginBottom: \"auto\",\r\n                    width: \"100%\",\r\n                    borderRadius: theme.radii.lg,\r\n                    boxShadow: theme.shadows.xl\r\n                  }\r\n                }}\r\n              >\r\n                <SecondRouterContent />\r\n              </Layer>\r\n            </div>\r\n\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\n\r\n//路由和刷新？Mutation数据更新 refetchQueries:[''] 对应查询函数必须是挂载的组件内才能重做查询，路由导致分岔屏蔽掉。\r\nfunction SecondRouterContent({}) {\r\n  return (\r\n    <Switch>\r\n      <Route path={\"/unit/new\"}>\r\n        <DetailedGuide />\r\n      </Route>\r\n      <Route path={\"/unit/:id/company\"}>\r\n        <DetailedGuide company/>\r\n      </Route>\r\n      <Route path={\"/unit/:id/person\"}>\r\n        <DetailedGuide company={false}/>\r\n      </Route>\r\n      <Route path={\"/unit/:id/task/:taskId/dispatch\"} component={DispatchIspMen} />\r\n      <Route path={\"/unit/:id/task/:taskId\"} component={IspEntrance} />\r\n      <Route path={\"/unit/:id/:rest*\"}>\r\n        <DetailedGuide />\r\n      </Route>\r\n\r\n      <Route path=\"/:rest*\">\r\n        <h1>没有该URL匹配的second视图内容</h1>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\n\r\nexport default DeviceMain;\r\n\r\n","D:\\home\\sei\\front-end\\src\\inspect\\InspectMain.tsx",["519"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, css } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Toolbar,\r\n  Navbar,\r\n  useTheme,\r\n  IconButton,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  Layer,\r\n  TabPanel,\r\n  MenuList,\r\n  MenuItem,\r\n  Tooltip,\r\n  ResponsivePopover,\r\n  IconChevronDown,\r\n  IconPlus,\r\n  DarkMode,\r\n  LightMode,\r\n  Pager, IconArchive\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport { useSession,  useSignOut } from \"../auth\";\r\nimport { Link, useRoute, useLocation, Switch, Route } from \"wouter\";\r\nimport { useMedia } from \"use-media\";\r\nimport { Layout } from \"./Layout\";\r\nimport { RelationList } from \"./RelationList\";\r\nimport { IspDetail } from \"./IspDetail\";\r\nimport { ReportSample } from \"./ReportSample\";\r\nimport { AddReport } from \"./report/AddReport\";\r\n\r\n\r\nexport interface InspectMainProps {\r\n  id?: string;\r\n}\r\nexport const InspectMain: React.FunctionComponent<InspectMainProps> = props => {\r\n  const theme = useTheme();\r\n  const {user} = useSession();\r\n  const isLarge = useMedia({ minWidth: \"768px\" });\r\n\r\n  const [match, params] = useRoute(\"/inspect/:recipe/report/:rep\");\r\n  const [match1, params1] = useRoute(\"/inspect/:recipe*\");\r\n  let showingRecipe = (match && params.recipe) || (match1 && params1.recipe);\r\n  let initTab= showingRecipe=== \"list\"? 1:\r\n              showingRecipe=== \"check\"? 2: 1;\r\n  if(showingRecipe)   initTab=1;\r\n\r\n  const [activeTab, setActiveTab] = React.useState(initTab);\r\n  const [, setLocation] = useLocation(); 　\r\n  const renderList = isLarge || !showingRecipe;  　//大屏或者小屏但是没有显示具体明细页的场合。\r\n\r\n  console.log(\"来InspectMain看当前的params showingRecipe=\",showingRecipe ,\"initTab=\",initTab);\r\n\r\n  function onLogoutDo() {\r\n    setLocation(\"/login\",  { replace: false } );\r\n  }\r\n  const { submitfunc:signOut,  } = useSignOut(onLogoutDo);\r\n\r\n  return (\r\n    <Layout>\r\n      <div\r\n        css={css`\r\n          display: flex;\r\n          box-sizing: border-box;\r\n        `}\r\n      >\r\n        {/*左半部分,小的列表*/}\r\n        <Layer\r\n          aria-hidden={!renderList}\r\n          css={{\r\n            display: renderList ? \"flex\" : \"none\",   //最关键！\r\n            boxSizing: \"border-box\",\r\n            flexDirection: \"column\",\r\n            flex: \"1\",\r\n            boxShadow: \"none\",\r\n            background: \"white\",\r\n            position: \"absolute\",\r\n            width: \"100%\",\r\n            borderRadius: 0,\r\n            margin: 0,\r\n            height: `calc(100vh)`,\r\n            [theme.mediaQueries.md]: {\r\n              display: \"flex\",\r\n              position: \"absolute\",\r\n              zIndex: theme.zIndices.fixed,\r\n              top: 0,\r\n              boxShadow: theme.shadows.xl,\r\n              overflow: \"hidden\",\r\n              width: \"100%\",\r\n              maxWidth: \"46vw\",\r\n              borderRadius: theme.radii.lg,\r\n              margin: theme.spaces.lg,\r\n              height: `calc(100vh - ${theme.spaces.lg} - ${theme.spaces.lg})`\r\n            },\r\n            [theme.mediaQueries.xl]: {\r\n              margin: theme.spaces.xl,\r\n              maxWidth: \"40vw\",\r\n             height: `calc(100vh - ${theme.spaces.xl} - ${theme.spaces.xl})`\r\n            }\r\n          }}\r\n        >\r\n          {/*　顶部黑色工具条2行，sticky模式，这黑色标题区导致很多烦恼！高度被不规律占用; 两行合计105px=\r\n            64px =是Toolbar引起的；\r\n                minHeight: MOBILE_HEIGHT,  MOBILE_HEIGHT = \"56px\";   来源于UI基础<Toolbar部件的（要看参数compressed和屏幕）,\r\n                },  _b[theme.mediaQueries.md] = {\r\n                  minHeight: DESKTOP_HEIGHT, DESKTOP_HEIGHT = \"64px\";\r\n            41px =是字0.875rem + 2 * 10px；　   来源于<Tab 组件的 按钮+文本。\r\n            实际上<TabPanel组件和Tabs按钮的白色脖子样边条还要算入7px的;\r\n          */}\r\n          <div\r\n            css={[\r\n              {\r\n                width: \"100%\",\r\n                top: 0,\r\n                background: theme.colors.palette.gray.base,\r\n                zIndex: theme.zIndices.sticky,\r\n                position: \"sticky\",\r\n              }\r\n            ]}\r\n          >\r\n            <Navbar\r\n              position=\"static\"\r\n              css={{\r\n                flex: \"0 0 auto\",\r\n                background: theme.colors.palette.gray.base,\r\n                color: \"white\"\r\n              }}\r\n            >\r\n              <Toolbar\r\n                css={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\"\r\n                }}\r\n              >\r\n                <div css={{ width: \"42px\" }} />\r\n                <LightMode>\r\n                  <ResponsivePopover\r\n                    content={\r\n                      <MenuList>\r\n                        <MenuItem onPress={()=>signOut()}>退出登录帐户</MenuItem>\r\n                      </MenuList>\r\n                    }\r\n                  >\r\n                    <DarkMode>\r\n                      <Button\r\n                        size=\"md\"\r\n                        iconAfter={<IconChevronDown />}\r\n                        variant=\"ghost\"\r\n                      >\r\n                        {user.username || user.mobile}\r\n                      </Button>\r\n                    </DarkMode>\r\n                  </ResponsivePopover>\r\n                </LightMode>\r\n                <Tooltip content=\"增加个检验报告\">\r\n                  <div>\r\n                    <DarkMode>\r\n                      <Link to={\"/inspect/\"+showingRecipe+\"/addReport/choose\"} >\r\n                          <IconButton  disabled={!showingRecipe}\r\n                            variant=\"ghost\"\r\n                            label=\"增加\"\r\n                            size=\"md\"\r\n                            icon={<IconPlus />}\r\n                          />\r\n                      </Link>\r\n                    </DarkMode>\r\n                  </div>\r\n                </Tooltip>\r\n                <Tooltip content=\"返回首页\">\r\n                  <div>\r\n                    <DarkMode>\r\n                      <Link to=\"/\">\r\n                        <IconButton\r\n                          variant=\"ghost\"\r\n                          label=\"首页\"\r\n                          size=\"md\"\r\n                          icon={<IconArchive />}\r\n                        />\r\n                      </Link>\r\n                    </DarkMode>\r\n                  </div>\r\n                </Tooltip>\r\n              </Toolbar>\r\n            </Navbar>\r\n            <div css={{ flex: \"0 0 auto\", zIndex: 2 }}>\r\n              <DarkMode>\r\n                <Tabs\r\n                  css={{\r\n                    position: \"sticky\",\r\n                    top: 0,\r\n                    background: theme.colors.palette.gray.base\r\n                  }}\r\n                  onChange={i => setActiveTab(i)}\r\n                  value={activeTab}\r\n                  variant=\"evenly-spaced\"\r\n                >\r\n                  <Tab\r\n                    badge={ //揭示数目\r\n                      !false\r\n                        ? 1\r\n                        : null\r\n                    }\r\n                    id=\"schedule\"\r\n                  >\r\n                    我的待办事项\r\n                  </Tab>\r\n                  <Tab id=\"ISPlist\">我参与的检验</Tab>\r\n                  <Tab id=\"myCheck\">待我审核报告</Tab>\r\n                  <Tab id=\"report\">关注的报告列表</Tab>\r\n                </Tabs>\r\n              </DarkMode>\r\n            </div>\r\n          </div>\r\n\r\n          <Pager\r\n            enableScrollLock={false}\r\n            value={activeTab}\r\n            onRequestChange={i => setActiveTab(i)}\r\n            lazyLoad\r\n          >\r\n            <TabPanel id=\"schedule\">\r\n            </TabPanel>\r\n            <TabPanel  id=\"ISPlist\">\r\n              <RelationList />\r\n            </TabPanel>\r\n            <TabPanel id=\"myCheck\">\r\n              <RelationList check/>\r\n            </TabPanel>\r\n            <TabPanel id=\"report\">\r\n              {/* 所有关注的，列表形式showingRecipe && ( <BoundReports key={showingRecipe} id={showingRecipe} /> ) */}\r\n              {  '建设当中，未完成。。。' }\r\n            </TabPanel>\r\n          </Pager>\r\n        </Layer>\r\n        {\r\n          //实际情况：在小屏场合，左半边内容被后面的右中文档流后面的界面部分给屏蔽遮盖掉了。\r\n        }\r\n        {showingRecipe && (\r\n          <div\r\n            css={{\r\n              display: \"block\",\r\n              position: \"relative\",\r\n              flex: 1,      　//对布局影响最大\r\n              [theme.mediaQueries.md]: {\r\n                display: \"flex\",    　\r\n                justifyContent: \"center\"\r\n              }\r\n            }}\r\n          >\r\n\r\n            <div\r\n              css={{\r\n                display: \"block\",\r\n                position: \"absolute\",\r\n                width: \"100%\",\r\n                boxSizing: \"border-box\",\r\n                [theme.mediaQueries.md]: {\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  padding: theme.spaces.lg,\r\n                  minHeight: \"100vh\",\r\n                  paddingLeft: \"calc(46vw + 3rem)\"\r\n                },\r\n                [theme.mediaQueries.xl]: {\r\n                  paddingRight: theme.spaces.xl,\r\n                  paddingLeft: \"calc(40vw + 6rem)\"\r\n                }\r\n              }}\r\n            >\r\n              <Layer\r\n                elevation=\"xl\"\r\n            //组件id! 缺少key导致：遇到小屏幕轮转显示正常，大屏整个显示模式却必须手动刷新才能切换内容。\r\n                key={showingRecipe}\r\n                css={{\r\n                  borderRadius: 0,\r\n                  position: \"relative\",\r\n                  boxShadow: \"none\",\r\n                  width: \"100%\",\r\n                  [theme.mediaQueries.md]: {\r\n                    marginTop: \"auto\",\r\n                    height: \"auto\",\r\n                    overflow: \"hidden\",\r\n                    boxSizing: \"border-box\",\r\n                    marginBottom: \"auto\",\r\n                    width: \"100%\",\r\n                    borderRadius: theme.radii.lg,\r\n                    boxShadow: theme.shadows.xl\r\n                  }\r\n                }}\r\n              >\r\n                <SecondRouterContent id={showingRecipe} />\r\n              </Layer>\r\n            </div>\r\n\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\n\r\ninterface SecondRouterProps {\r\n  id?: string;\r\n}\r\nfunction SecondRouterContent({id}: SecondRouterProps) {\r\n  return (\r\n    <Switch>\r\n      <Route path={\"/inspect/:id/addReport/:rest*\"} component={AddReport} />\r\n      <Route path={\"/inspect/:id/report/:repId/:rest*\"} component={ReportSample} />\r\n\r\n      <Route path=\"/inspect/:id\">\r\n        {params => <IspDetail readOnly params={params}/>}\r\n      </Route>\r\n\r\n      <Route path=\"/:rest*\">\r\n          <h1>没有该URL匹配的视图sdf内容</h1>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\n\r\nexport default InspectMain;\r\n\r\n","D:\\home\\sei\\front-end\\src\\maintenance\\MaintenanceMain.tsx",["520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, css,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Text,\r\n  Toolbar,\r\n  useTheme,\r\n  Button,\r\n  IconChevronDown,\r\n  IconChevronUp,\r\n  Select,\r\n  Container,\r\n  IconCloud,\r\n  List,\r\n  ListItem,\r\n  Skeleton,\r\n  Avatar,\r\n  ResponsivePopover,\r\n  MenuList,\r\n  MenuItem,\r\n  IconPackage,\r\n  IconButton, IconMoreVertical, IconTruck, IconArrowRight\r\n} from \"customize-easy-ui-component\";\r\n//import useLocation from \"wouter/use-location\";\r\nimport {  useQueryOriginalRecord } from \"./db\";\r\n//import { useUid } from \"customize-easy-ui-component/esm/Hooks/use-uid\";\r\nimport food from \"../images/food.svg\";\r\nimport { Layout } from \"./Layout\";\r\n//import queryString from \"query-string\";\r\n//import pick from \"lodash.pick\";\r\nimport {RecordView} from \"./RecordView\";\r\n  /*类比路由功能的配置表，根据类型来映射组件的文件名*/\r\nimport typeAsRoute from \"../typeAsRoute.json\";\r\nimport { loadTemplate } from \"./template\";\r\nimport { useQuery,gql,useMutation } from \"@apollo/client\";\r\nimport { Link as RouterLink } from \"wouter\";\r\nimport { ContainLine, TransparentInput } from \"../comp/base\";\r\nimport { useEffect } from \"react\";\r\n\r\n/* 同步功能的接口可选列表， 底下定义gql`mutation WEI_HU ...`中，可直接替换：\r\n老旧unit同步+ES同步： syncUnitFromOld\r\n老旧EQP同步：syncEqpFromOld\r\n从Eqp腾挪复制到EqpEs索引: syncEqpEsFromEqp\r\n\r\n*/\r\n\r\n//根据老旧平台unit做同步\r\nconst WEI_HU_UNIT = gql`\r\n  mutation WEI_HU($offset: Int!, $limit: Int!) {\r\n    res: syncEqpEsFromEqp(offset: $offset, limit: $limit) \r\n  }\r\n`;\r\n//可能2个分片一起发起submitfunc请求的；点击停止后，任务实际继续直到已经发起的分片任务返回结果；调整参数使每个分片5-10秒能解决。\r\nconst UnitDetail= ( { id, onCancel }\r\n) => {\r\n  const theme = useTheme();\r\n  const [limit, setLimit] = React.useState(40 );\r\n  const [offset, setOffset] = React.useState(0 );\r\n  const [submitfunc, {error, data, loading, called}] = useMutation(WEI_HU_UNIT, {\r\n    variables: {offset, limit }\r\n  });\r\n  const [doing, setDoing] = React.useState(false );\r\n\r\n  React.useEffect(() => {\r\n    if(doing && !loading)   submitfunc();\r\n  }, [doing, offset, loading, submitfunc]);\r\n  //let hasEvents=data?.res.filter(a => a !== \"成功\");\r\n  useEffect( () => {\r\n      if(!doing)  return;　　 //界面data显示比console.log输出还早了;\r\n      if(data?.res.length <= 0)    setDoing(false);\r\n      var someOneis=false;\r\n      data?.res.map((value,key) => {\r\n        if(value !== \"成功\") {\r\n          //可能重复,多执行了\r\n          console.log(\"UnitEventskey=\", key, value);\r\n          if(!someOneis)  someOneis=true;\r\n        }\r\n      });\r\n      if(someOneis)     setDoing(false);\r\n      if(data?.res.length>0)     setOffset(offset + limit);\r\n    },\r\n    [data,loading,doing,offset,limit]);\r\n\r\n  if (error) return <React.Fragment>Error! ${error}</React.Fragment>;\r\n\r\n  //长期运行：导致，浏览器崩溃,内存溢出了。　\r\n  //console.log(\"UnitDetail捕offset=\", offset);\r\n\r\n  /*    setOffset(`${Number(offset) + limit}`);\r\n        setOffset(String(Number(offset) + limit));\r\n        <button onClick={() => refetch()}>Refetch!</button>\r\n  */\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Text  variant=\"h5\"　css={{ textAlign: 'center' }}>\r\n        <span>从老旧平台同步单位数据来</span>\r\n      </Text>\r\n      <ContainLine display={'指定TB_UNT_MGE起点offset'}>\r\n        <TransparentInput\r\n          autoFocus={true}\r\n          placeholder=\"起点offset记录数\" type='number'\r\n          value={offset}\r\n          onChange={e => setOffset( Number(e.currentTarget.value) ) }\r\n        />\r\n     </ContainLine>\r\n      <ContainLine display={'指定一批执行记录数limit'}>\r\n        <TransparentInput\r\n          autoFocus={true}\r\n          placeholder=\"一批执行记录数\" type='number'\r\n          value={limit}\r\n          onChange={e => setLimit( Number(e.currentTarget.value) ) }\r\n        />\r\n      </ContainLine>\r\n      <Text  css={{wordWrap: 'break-word'}}>{`下一步准备抓取的,当前进度offset是=( ${offset} )`}</Text>\r\n      <List>\r\n        {\r\n          data?.res?.map((hit,i) => (\r\n            <ListItem key={i}\r\n                      contentBefore={\r\n                        <React.Fragment>\r\n                          {hit === \"成功\" ?\r\n                            <Avatar size=\"sm\" name={'OK'}/> :\r\n                            <Avatar size=\"sm\" name={'ERROR!'}/>\r\n                          }\r\n                        </React.Fragment>\r\n                      }\r\n                      primary={`${hit}`}\r\n            />\r\n          ))}\r\n\r\n      </List>\r\n      <Button\r\n        size=\"lg\"\r\n        intent=\"primary\"\r\n        iconBefore={<IconTruck />}\r\n        iconAfter={<IconArrowRight />}\r\n        onPress={ async () => {\r\n          setDoing(!doing);\r\n        }}\r\n      >\r\n        {doing? '停止同步吧!' : '继续同步数据去'}\r\n      </Button>\r\n    <br/>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\n//前端任务，分片分批次，要确保允许短时间内重新执行同一个分片而没有影响。\r\n//viewAll是否是整个报表都一起显示。\r\nexport default function MaintenanceMain({printing, }:{printing?:boolean, },props) {\r\n  const theme = useTheme();\r\n  //useState(默认值) ； 后面参数值仅仅在组件的装载时期有起作用，若再次路由RouterLink进入的，它不会依照该新默认值去修改show。useRef跳出Cpature Value带来的限制\r\n  //采用RouterLink页内路由进入useState还保留旧的值，要修改就将会导致render两次；旧的值新的值各一次渲染。若采用URL刷新模式只有一次。\r\n  const [show, setShow] = React.useState(false);\r\n\r\n  let filtercomp={ id:231 };\r\n  //refetch() 引起 loading= True/False变化，从而需要组件范围render重做搞2次。\r\n  //若是浏览器后退前进的场景不会执行useQueryOriginalRecord代码，item已经有数据了，loading不会变化。\r\n  //const {loading,items, refetch } =useQueryOriginalRecord(filtercomp);\r\n  const [template, setTemplate] = React.useState(null   as any);\r\n  //模板的类型标识\r\n  const [tplType, setTplType] = React.useState('EL-DJ');\r\n\r\n  //复检数据拷贝初检后再度修订的。最初的初检数据原封不动。复检rexm，正检data，结论及审核改定deduction｛也可部分照搬复检rexm正检data或映射转译｝。\r\n  //原始记录录入模式复检正检，［正式报告来源项］只读的预览结论模式{动态生成结论}，(完毕提交)；\r\n  //１原始记录　组件：不可改的不保存的［推断］结论项。　　　内容细化描述；复检正检数据切换的；结论项提示性质；　－－给检验操作人员录入。\r\n  //２审核组件：回退或者往前固化结论项后保存给正式报告页面。　项目文本简化，数据需要保存给后端；－－正式报告手机可预览版，无下拉分区，不能编辑，－－核准管理人员审批。\r\n  //３正式报告那个目录的打印页面。只读的，结论项也是读后端的；正式报告文书版本或可转保存其他如pdf类型文档，无下拉分区，全展示；－－大众用户查看。\r\n  //审核但是不能修改检验数据模式，回退编制复检？或后台修正；校对转正式报告数据倒腾和推断合并结论项目，另外保存成了deduction，对表正式报告，报告排版美化。\r\n  const [inp, setInp] = React.useState(null);\r\n\r\n\r\n  //外部dat不能加到依赖，变成死循环! const  dat =items&&items.data&&JSON.parse(items.data);  这dat每次render都变了？\r\n  //从后端返回的数据可能items已经被修改了\r\n\r\n\r\n  //父辈组件重做render了，不意味着其儿孙组件们也需要重做render。\r\n  //依赖项[inp, show]没变化， useMemo包裹的且已经挂载的组件就不会重新render；降低重复部分的render工作量。\r\n  //？有隐藏错误：projectList长度变化了，导致RecordView内useProjectListAs部的hook调用次数顺序的修改，引起报错！　tplType变化必须刷新？。\r\n  /*\r\n  const projects= React.useMemo(() =>\r\n                  <RecordView inp={inp} showAll={show} projectList={projectList}/>\r\n                          ,[inp, show, tplType, projectList] );\r\n  */\r\n\r\n  //假如这里加 if( loading )  return <LayerLoading loading/>; 会导致子组件被unmount，随后需要再一次挂载等于这部分分支的URL刷新一样。\r\n  React.useEffect(() => {\r\n      loadTemplate(typeAsRoute[tplType], setTemplate);\r\n      //console.log(\"loadTemplate动态执行import!  tplType =\", tplType);\r\n  }, [tplType]);\r\n\r\n\r\n  //console.log(\"祖父OriginalRecord辈：捕获 ==inp=[\",  inp,  \"]items=\", items ,\"loading=\", loading);\r\n\r\n  /*这样子的逻辑， 反而导致重度加载， &&逻辑类比 路由模式，可引起该分叉的底下所有子组件重新render等价于局部的URL刷新！得不偿失。\r\n    if(previousPar!==par && !isEqual(inp,itemVal))\r\n        return <LayerLoading loading={true} label={'更新数据，加载中请稍后'}/>;   看不出效果来，会立刻运行下一步的render了。    */\r\n\r\n  return (\r\n    <Layout>\r\n      <Container>\r\n      <Text  variant=\"h4\"　css={{ textAlign: 'center' }}>\r\n        <span>后台和数据同步等任务前端在线运行</span>\r\n      </Text>\r\n      <Toolbar>\r\n        <Text\r\n          variant=\"h5\"\r\n          css={{\r\n            alignItems: \"center\",\r\n            display: \"flex\",\r\n            color: \"#43596c\"\r\n          }}\r\n          gutter={false}\r\n        >\r\n          <img\r\n            css={{\r\n              marginRight: theme.spaces.sm,\r\n              width: \"30px\",\r\n              height: \"30px\"\r\n            }}\r\n            src={food} alt={``}\r\n            aria-hidden\r\n          />\r\n          <span>检验平台</span>\r\n        </Text>\r\n\r\n        <Select inputSize=\"md\" css={{minWidth:'140px',fontSize:'2rem',padding:'0 1rem'}} divStyle={css`max-width:240px;`}\r\n                value={tplType}  onChange={e => setTplType(e.currentTarget.value) }\r\n        >\r\n          <option>EL-DJ</option>\r\n          <option>模板类型编号</option>\r\n          <option>EL-JJ</option>\r\n        </Select>\r\n\r\n        <div css={{ marginLeft: \"auto\" }}>\r\n          <Button\r\n            aria-controls=\"collapse\"\r\n            variant=\"ghost\"\r\n            intent=\"primary\"\r\n            iconAfter={show ? <IconChevronUp /> : <IconChevronDown />}\r\n            onPress={() => {\r\n                //异步的，但是多个setXXX合并执行的,　然后才做render。 而传递到useEffect（,[tplType])需要等到下一次render;\r\n                // !show&&setTplType('EL-JJ');     show&&setTplType('EL-DJ');\r\n               setShow(!show);\r\n              }  }\r\n          >\r\n            {show ? \"都收起\" : \"都显示\"}\r\n          </Button>\r\n        </div>\r\n      </Toolbar>\r\n        {\r\n          inp && template &&  <RecordView inp={inp} showAll={show} template={template}/>\r\n        }\r\n        <UnitDetail id={1}\r\n                    onCancel={() => {\r\n                      //取消这\r\n                    } }\r\n        />\r\n        <Button\r\n          aria-controls=\"collapse\"\r\n          variant=\"ghost\"\r\n          intent=\"primary\"\r\n          iconAfter={<IconCloud />}\r\n          onPress={() => {} }\r\n        >拉取后端最新数据\r\n        </Button>\r\n      </Container>\r\n      <Text  variant=\"h6\"　css={{ textAlign: 'center' }}>\r\n        <span>性能波动大，请确保60秒之内完成分片任务，最好控制单步运行5秒就能完成</span>\r\n      </Text>\r\n    </Layout>\r\n  );\r\n}\r\n\r\n","D:\\home\\sei\\front-end\\src\\report\\ReportEntrance.tsx",["536"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx} from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//import { globalHistory  } from \"@reach/router\";\r\nimport { useQueryOriginalRecord } from \"./db\";\r\nimport { LayerLoading, Text } from \"customize-easy-ui-component\";\r\nimport { lazy } from \"react\";\r\nimport { WaitingComponent } from \"../TopRouter\";\r\nimport { EditStorageContext } from \"./StorageContext\";\r\nimport { useRoute } from \"wouter\";\r\n\r\n\r\nconst TemplateMain = WaitingComponent(lazy(() => import(\"./TemplateMain\")));\r\n\r\n\r\nexport default function ReportEntrance({ name },props )\r\n{\r\n  const [match, params] = useRoute(\"/report/:template/ver/:verId/:action/:repId\");\r\n  let action = params &&  params.action;\r\n  let id= params &&  params.repId;\r\n  if(!match || !params || !params.template || !params.verId || !params.action || !id)\r\n    throw new Error(`没路由了`);\r\n  let filtercomp={ id: id };\r\n  //refetch() 引起 loading= True/False变化，从而需要组件范围render重做搞2次。\r\n  //若是浏览器后退前进的场景不会执行useQueryOriginalRecord代码，item已经有数据了，loading不会变化。\r\n  const {loading,items, error} =useQueryOriginalRecord(filtercomp);\r\n  const {storage, setStorage} =React.useContext(EditStorageContext);\r\n\r\n  //外部dat不能加到依赖，变成死循环! const  dat =items&&items.data&&JSON.parse(items.data);  这dat每次render都变了？\r\n  //从后端返回的数据可能items已经被修改了\r\n  React.useEffect(() => {\r\n    const  dat =items&&items.data&&JSON.parse(items.data);\r\n    const  snap =items&&items.snapshot&&JSON.parse(items.snapshot);\r\n    if(snap)   dat && setStorage({...dat, ...snap});\r\n    else  dat && setStorage(dat);\r\n  }, [items, setStorage]);\r\n\r\n  console.log(\"ReportEntrance：捕获 ==storage=[\",  storage,  \"]items=\", items ,\"snap=\", items&&items.snapshot);\r\n  //const printSizeW = useMedia('print');  这个printSizeW在打印场景时会摇摆，先是true然后变false。打印预览useMedia最终看到false。\r\n  //打印预览不仅打印，还同时会更新网页。打印预览实际是根据当前页面最新状态去打印的。【特别注意】包括动态特征的显示！点击也算；打印实际不是从刷新页面后才去照搬的。\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <LayerLoading loading={loading} label={'更新数据，加载中请稍后'}/>\r\n       { storage && <TemplateMain  template={params.template} verId={params.verId} action={action}\r\n                                id={id}  source={storage}\r\n                />\r\n       }\r\n      {!loading && items &&!storage &&\r\n        <Text>未初始化原始记录， 报告ID={id} </Text>\r\n      }\r\n      {!loading && !items &&\r\n        <Text>没找到该份报告， 报告ID={id} </Text>\r\n      }\r\n      {error && error.message}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\n\r\n/*\r\n制作模板尺寸格式 <Table fixed={isPrint? [\"150px\", \"300px\", \"15%\", \"15%\", \"50px\"] : undefined}>\r\n   实际表格尺寸会被调整；其中x%部分会优先分配的，150px实际也会被调小调大，不限定的\"%\"的{可变动很大！,最多用在某个列}。\r\n   固定数100px会导致适应不同纸张和缩放比例后打印表格的各列尺寸变化较大！最好统一用％的相对尺寸设置。\r\n*/\r\n","D:\\home\\sei\\front-end\\src\\device\\DeviceMain.tsx",["537","538","539"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, css } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Toolbar,\r\n  Navbar,\r\n  useTheme,\r\n  IconButton,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  Layer,\r\n  TabPanel,\r\n  MenuList,\r\n  MenuItem,\r\n  Tooltip,\r\n  ResponsivePopover,\r\n  IconChevronDown,\r\n  IconPlus,\r\n  DarkMode,\r\n  LightMode,\r\n  Pager, IconArchive\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport { useSession,  useSignOut } from \"../auth\";\r\nimport { Link, useRoute, useLocation, Switch, Route } from \"wouter\";\r\nimport { useMedia } from \"use-media\";\r\nimport { Layout } from \"./Layout\";\r\nimport { TaskList } from \"./task/TaskList\";\r\nimport { DispatchIspMen } from \"./task/DispatchIspMen\";\r\nimport { DeviceList } from \"./DeviceList\";\r\nimport { IspEntrance } from \"./task/IspEntrance\";\r\nimport { useCountOfTask } from \"./db\";\r\nimport { Link as RouterLink } from \"wouter\";\r\nimport { DetailedGuide } from \"./DetailedGuide\";\r\nimport queryString from \"query-string\";\r\nimport { DevfilterContext } from \"../context/DevfilterContext\";\r\n\r\ninterface DeviceMainProps {\r\n  id?: string;\r\n}\r\n\r\nexport const DeviceMain: React.FunctionComponent<DeviceMainProps> =(props ,context)=> {\r\n  const theme = useTheme();\r\n  const {user} = useSession();\r\n  const isLarge = useMedia({ minWidth: \"768px\" });\r\n  const qs = queryString.parse(window.location.search);\r\n  const {filter:devfl, setFilter:setDevfl} =React.useContext(DevfilterContext);\r\n  const [, params] = useRoute(\"/device/:recipe*\");\r\n  let showingRecipe = params.recipe;\r\n  let initTab=0;\r\n  console.log(\"DeviceMain金准\" ,params ,\"props:\",props,\"devfl:\",devfl,\"qs=\",qs);\r\n  const [activeTab, setActiveTab] = React.useState(initTab);\r\n  const [, setLocation] = useLocation();\r\n  const renderList = isLarge || !showingRecipe;  　//大屏或者小屏但是没有显示具体明细页的场合。\r\n\r\n  function onLogoutDo() {\r\n    setLocation(\"/login\",  { replace: false } );\r\n  }\r\n  const { submitfunc:signOut,  } = useSignOut(onLogoutDo);\r\n  const { item:sumofTask,  } = useCountOfTask({dep:\"\", status:\"\"} );\r\n\r\n  return (\r\n    <Layout>\r\n      <div\r\n        css={css`\r\n          display: flex;\r\n          box-sizing: border-box;\r\n        `}\r\n      >\r\n        {/*左半部分,小的列表*/}\r\n        <Layer\r\n          aria-hidden={!renderList}\r\n          css={{\r\n            display: renderList ? \"flex\" : \"none\",   //最关键！\r\n            boxSizing: \"border-box\",\r\n            flexDirection: \"column\",\r\n            flex: \"1\",\r\n            boxShadow: \"none\",\r\n            background: \"white\",\r\n            position: \"absolute\",\r\n            width: \"100%\",\r\n            borderRadius: 0,\r\n            margin: 0,\r\n            height: `calc(100vh)`,\r\n            [theme.mediaQueries.md]: {\r\n              display: \"flex\",\r\n              position: \"absolute\",\r\n              zIndex: theme.zIndices.fixed,\r\n              top: 0,\r\n              boxShadow: theme.shadows.xl,\r\n              overflow: \"hidden\",\r\n              width: \"100%\",\r\n              maxWidth: \"46vw\",\r\n              borderRadius: theme.radii.lg,\r\n              margin: theme.spaces.lg,\r\n              height: `calc(100vh - ${theme.spaces.lg} - ${theme.spaces.lg})`\r\n            },\r\n            [theme.mediaQueries.xl]: {\r\n              margin: theme.spaces.xl,\r\n              maxWidth: \"40vw\",\r\n              height: `calc(100vh - ${theme.spaces.xl} - ${theme.spaces.xl})`\r\n            }\r\n          }}\r\n        >\r\n          {/*　顶部黑色工具条2行，sticky模式，这黑色标题区导致很多烦恼！高度被不规律占用; 两行合计105px=\r\n            64px =是Toolbar引起的；\r\n                minHeight: MOBILE_HEIGHT,  MOBILE_HEIGHT = \"56px\";   来源于UI基础<Toolbar部件的（要看参数compressed和屏幕）,\r\n                },  _b[theme.mediaQueries.md] = {\r\n                  minHeight: DESKTOP_HEIGHT, DESKTOP_HEIGHT = \"64px\";\r\n            41px =是字0.875rem + 2 * 10px；　   来源于<Tab 组件的 按钮+文本。\r\n            实际上<TabPanel组件和Tabs按钮的白色脖子样边条还要算入7px的;\r\n          */}\r\n          <div\r\n            css={[\r\n              {\r\n                width: \"100%\",\r\n                top: 0,\r\n                background: theme.colors.palette.gray.base,\r\n                zIndex: theme.zIndices.sticky,\r\n                position: \"sticky\",\r\n              }\r\n            ]}\r\n          >\r\n            <Navbar\r\n              position=\"static\"\r\n              css={{\r\n                flex: \"0 0 auto\",\r\n                background: theme.colors.palette.gray.base,\r\n                color: \"white\"\r\n              }}\r\n            >\r\n              <Toolbar\r\n                css={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\"\r\n                }}\r\n              >\r\n                <div css={{ width: \"42px\" }} />\r\n                <LightMode>\r\n                  <ResponsivePopover\r\n                    content={\r\n                      <MenuList>\r\n                        <MenuItem onPress={()=>signOut()}>退出登录帐户</MenuItem>\r\n                      </MenuList>\r\n                    }\r\n                  >\r\n                    <DarkMode>\r\n                      <Button\r\n                        size=\"md\"\r\n                        iconAfter={<IconChevronDown />}\r\n                        variant=\"ghost\"\r\n                      >\r\n                        {user.username || user.mobile}\r\n                      </Button>\r\n                    </DarkMode>\r\n                  </ResponsivePopover>\r\n                </LightMode>\r\n                <Tooltip content=\"导入设备或新增\">\r\n                  <div>\r\n                    <DarkMode>\r\n                      <RouterLink to=\"/device/new\">\r\n                      <IconButton\r\n                        noBind\r\n                        variant=\"ghost\"\r\n                        label=\"加设备\"\r\n                        size=\"md\"\r\n                        icon={<IconPlus />}\r\n                      />\r\n                      </RouterLink>\r\n                    </DarkMode>\r\n                  </div>\r\n                </Tooltip>\r\n                <Tooltip content=\"返回首页\">\r\n                  <div>\r\n                    <DarkMode>\r\n                      <Link to=\"/\">\r\n                        <IconButton noBind\r\n                          variant=\"ghost\"\r\n                          label=\"首页\"\r\n                          size=\"md\"\r\n                          icon={<IconArchive />}\r\n                        />\r\n                      </Link>\r\n                    </DarkMode>\r\n                  </div>\r\n                </Tooltip>\r\n              </Toolbar>\r\n            </Navbar>\r\n            <div css={{ flex: \"0 0 auto\", zIndex: 2 }}>\r\n              <DarkMode>\r\n                <Tabs\r\n                  css={{\r\n                    position: \"sticky\",\r\n                    top: 0,\r\n                    background: theme.colors.palette.gray.base\r\n                  }}\r\n                  onChange={i => setActiveTab(i)}\r\n                  value={activeTab}\r\n                  variant=\"evenly-spaced\"\r\n                >\r\n                  <Tab id=\"device\">\r\n                    我关注的设备\r\n                  </Tab>\r\n                  <Tab  badge={ sumofTask }\r\n                    id=\"task\">我的检验任务</Tab>\r\n                  <Tab id=\"maintain\">其他功能</Tab>\r\n                </Tabs>\r\n              </DarkMode>\r\n            </div>\r\n          </div>\r\n\r\n          <Pager\r\n            enableScrollLock={false}\r\n            value={activeTab}\r\n            onRequestChange={i => setActiveTab(i)}\r\n            lazyLoad\r\n          >\r\n            <TabPanel id=\"device\">\r\n              <DeviceList />\r\n            </TabPanel>\r\n            <TabPanel  id=\"task\">\r\n              <TaskList />\r\n            </TabPanel>\r\n            <TabPanel id=\"maintain\">\r\n              未开启，建设中。。。\r\n            </TabPanel>\r\n          </Pager>\r\n        </Layer>\r\n        {\r\n          //实际情况：在小屏场合，左半边内容被后面的右中文档流后面的界面部分给屏蔽遮盖掉了。\r\n        }\r\n        {showingRecipe && (\r\n          <div\r\n            css={{\r\n              display: \"block\",\r\n              position: \"relative\",\r\n              flex: 1,      　//对布局影响最大\r\n              [theme.mediaQueries.md]: {\r\n                display: \"flex\",\r\n                justifyContent: \"center\"\r\n              }\r\n            }}\r\n          >\r\n\r\n            <div\r\n              css={{\r\n                display: \"block\",\r\n                position: \"absolute\",\r\n                width: \"100%\",\r\n                boxSizing: \"border-box\",\r\n                [theme.mediaQueries.md]: {\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  padding: theme.spaces.lg,\r\n                  minHeight: \"100vh\",\r\n                  paddingLeft: \"calc(46vw + 3rem)\"\r\n                },\r\n                [theme.mediaQueries.xl]: {\r\n                  paddingRight: theme.spaces.xl,\r\n                  paddingLeft: \"calc(40vw + 6rem)\"\r\n                }\r\n              }}\r\n            >\r\n              <Layer\r\n                elevation=\"xl\"\r\n                //组件id! 缺少key导致：遇到小屏幕轮转显示正常，大屏整个显示模式却必须手动刷新才能切换内容。\r\n                key={showingRecipe}\r\n                css={{\r\n                  borderRadius: 0,\r\n                  position: \"relative\",\r\n                  boxShadow: \"none\",\r\n                  width: \"100%\",\r\n                  [theme.mediaQueries.md]: {\r\n                    marginTop: \"auto\",\r\n                    height: \"auto\",\r\n                    overflow: \"hidden\",\r\n                    boxSizing: \"border-box\",\r\n                    marginBottom: \"auto\",\r\n                    width: \"100%\",\r\n                    borderRadius: theme.radii.lg,\r\n                    boxShadow: theme.shadows.xl\r\n                  }\r\n                }}\r\n              >\r\n                <SecondRouterContent />\r\n              </Layer>\r\n            </div>\r\n\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\n\r\n//路由和刷新？Mutation数据更新 refetchQueries:[''] 对应查询函数必须是挂载的组件内才能重做查询，路由导致分岔屏蔽掉。\r\nfunction SecondRouterContent({}) {\r\n  return (\r\n    <Switch>\r\n      <Route path={\"/device/new\"}>\r\n        <DetailedGuide />\r\n      </Route>\r\n      <Route path={\"/device/:id/task/:taskId/dispatch\"} component={DispatchIspMen} />\r\n      <Route path={\"/device/:id/task/:taskId\"} component={IspEntrance} />\r\n      <Route path={\"/device/:id/:rest*\"}>\r\n        <DetailedGuide />\r\n      </Route>\r\n\r\n      <Route path=\"/:rest*\">\r\n        <h1>没有该URL匹配的视图内容</h1>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\n\r\nexport default DeviceMain;\r\n\r\n","D:\\home\\sei\\front-end\\src\\utils\\session.ts",["540"],"import storage from './storage';\r\n\r\nexport default {\r\n  isTokenSet() {\r\n    const authToken = storage.get('token');\r\n    return authToken && !!authToken.trim();\r\n  },\r\n\r\n  get() {\r\n    const  token=storage.get('token');\r\n     return token? token : '没有初始化吧？的';\r\n    //  return storage.get('token');\r\n  },\r\n\r\n  set(tokenValue: string) {\r\n    storage.set('token', tokenValue);\r\n  },\r\n\r\n  remove() {\r\n    storage.remove('token');\r\n  }\r\n};\r\n","D:\\home\\sei\\front-end\\src\\report\\db.ts",[],"D:\\home\\sei\\front-end\\src\\device\\db.ts",["541"],"import * as React from \"react\";\r\nimport debug from \"debug\";\r\n\r\n\r\n\r\nimport {gql, useMutation, useQuery } from \"@apollo/client\";\r\n\r\n\r\n\r\nconst log = debug(\"app:db\");\r\nlog.log = console.log.bind(console);\r\n\r\n\r\nexport interface RecipeOptions {\r\n  title: string;\r\n  plain: string;\r\n  userId: string;\r\n  description: string;\r\n  image?: string;\r\n  createdBy?: {\r\n    email: string;\r\n    photoURL: string;\r\n  };\r\n  author: string;\r\n//  ingredients: Ingredient[];\r\n}\r\n\r\nconst CREATE_DEVICE = gql`\r\n  mutation CREATE_DEVICE($cod: String!,$oid: String!) {\r\n    res: newEQP(cod: $cod,type:\"电梯4000\",oid: $oid) {\r\n      id cod oid\r\n      pos {\r\n       id name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n//创立或导入设备　\r\nexport const useCreateDevice = (options) => {\r\n  console.log(\"保 useCreateDevice @@ options=\", options);\r\n  const [submit, {error, data, loading, called}] = useMutation(CREATE_DEVICE, {\r\n    variables: {...options},\r\n  })\r\n  const { res : result} = data||{};\r\n  return { result ,submit, error, loading, called };\r\n};\r\n\r\n\r\nconst UPDATE_DEVICE_MUTATION = gql`\r\n    mutation UPDATE_DEVICE_MUTATION($id: ID!,$unt: ID!,$info: DeviceCommonInput) {\r\n    buildEQP(id: $id, owner: $unt, info: $info) {\r\n      id cod oid\r\n      pos {\r\n       id address\r\n      } ownerUnt{ id name }\r\n    }\r\n    }\r\n`;\r\n\r\nexport const useUpdateEntry = (options) => {\r\n  const [result, setResult] = React.useState(null);\r\n // console.log(\"进入useUpdateEntry.filter=\",options );\r\n  const [submitfunc, {error, }] = useMutation(UPDATE_DEVICE_MUTATION, {\r\n    variables: {...options},\r\n    update: (proxy, mutationResult) => {\r\n      const newPost = mutationResult.data.buildEQP;     //新的一条,登录ok；　　.data.createPost;\r\n      console.log(\"useUpdateEntry返回Q1=\" + JSON.stringify(mutationResult.data) + newPost);\r\n      setResult( newPost );\r\n    },\r\n    onCompleted: (data) => {\r\n      console.log(\"useUpdateEntry返回Q=Completed=\" ,data );  //onCompleted比update慢的多。\r\n    }\r\n  })\r\n  return { result ,submitfunc, error};\r\n};\r\n\r\n//从graphQL的后端 模型数据库服务器 取模型数据。\r\n//3.2版本findAllEQPsFilter2不能再用dev:findAllEQPsFilter2这样子做别名了,cache typePolicies不支持。\r\nconst GET_DEVICES = gql`\r\n  query findAllEQPsFilter($where: DeviceCommonInput,$offset:Int!,$limit:Int=10,$orderBy:String,$asc:Boolean=true) {\r\n    findAllEQPsFilter(where: $where,offset:$offset,limit:$limit,orderBy:$orderBy,asc:$asc) {\r\n      id cod oid type sort vart   \r\n     }\r\n  }\r\n`;\r\nconst GET_DEVICES_ES = gql`\r\n  query findAllEQPsFilter($where: DeviceCommonInput,$offset:Int!,$limit:Int=10,$orderBy:String,$asc:Boolean=true) {\r\n    eqps:getAllEqpEsFilter(where: $where,offset:$offset,limit:$limit,orderBy:$orderBy,asc:$asc) {\r\n      id cod oid type sort vart   \r\n     }\r\n  }\r\n`;\r\n\r\n/*\r\n       ... on IfElevator {\r\n          liftHeight\r\n        }\r\n       ... on EQP{\r\n         factoryNo\r\n       }\r\n*/\r\n//底下usePaginateQueryDevice有可能不会实际执行的，还参考接口参数变量的变化。\r\nexport function usePaginateQueryDevice(filter:any) {\r\n  const { loading, error, data, updateQuery,\r\n       fetchMore, refetch} = useQuery(GET_DEVICES_ES, {\r\n    variables: { ...filter },\r\n    notifyOnNetworkStatusChange: true,\r\n    partialRefetch: true,    //没效果\r\n    //returnPartialData: false 没效果\r\n  });\r\n  return {items:　data　&&　data.eqps,\r\n    error, loading, refetch, fetchMore, updateQuery};\r\n}\r\n\r\n\r\n\r\nconst BUILD_TASK = gql`\r\nmutation BUILD_TASK($devs: ID!,$dep: String!,$date: String!) {\r\n  buildTask(devs: $devs,dep: $dep,date: $date) {\r\n    id dep date\r\n    devs {\r\n      id\r\n      cod\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\n//适配封装层：针对不同类型接口(REST,graphql,等?)，都对外统一处理。\r\n//事务更新处理类型：\r\n//立刻更新受到影响的页面，其数据来自DEVICE_BY_ID这个函数[可能多个，必须针对性的避免扩大化无效查询]。　\r\n//这里refetchQueries:  ['DEVICE_BY_ID']不一定执行的，对应查询Hook与当前页面同时加载的组件场景下才能生效，查询需放在做更新组件的上级去。\r\nexport const useAddToTask = (options) => {\r\n  const [submit, {error, data, loading, called}] = useMutation( BUILD_TASK, {\r\n    variables: {...options},\r\n    refetchQueries:  ['DEVICE_BY_ID']\r\n  })\r\n  const { buildTask : result} = data||{};\r\n  return { result ,submit, error, loading, called };\r\n};\r\n\r\nconst GET＿COUNT_TASK = gql`\r\n  query countTask($dep: String,$status: String) {\r\n    result:countTask(dep: $dep,status: $status) \r\n  }\r\n`;\r\nexport function useCountOfTask(filter:any) {\r\n  const { loading, error, data,  refetch} = useQuery(GET＿COUNT_TASK, {\r\n    variables: { ...filter },\r\n    notifyOnNetworkStatusChange: true\r\n  });\r\n  return {item: data&&data.result, error, loading, refetch};\r\n}\r\n\r\nconst INVALIDATE_EQP = gql`\r\n    mutation invalidateEQP($whichEqp: ID!, $reason: String!) {\r\n      res: invalidateEQP(whichEqp: $whichEqp, reason: $reason)\r\n    }\r\n`;\r\n\r\nexport const useInvalidateEQP = (options) => {\r\n  const [submit, {error, data, loading, called}] = useMutation( INVALIDATE_EQP, {\r\n    variables: {...options},\r\n  })\r\n  const { res : result} = data||{};\r\n  return { result ,submit, error, loading, called };\r\n};\r\n\r\n//這若id='new'的照样能发送给后端的底层去处理的。 id=null undefined就不发送。\r\nconst DEVICE_BY_ID = gql`\r\n  query DEVICE_BY_ID($id: ID! ) {\r\n    all:getDeviceSelf(id: $id) {\r\n\t\t\tid,oid,cod,isps{\r\n\t\t\t\tid\r\n\t\t\t},pos{\r\n\t\t\t\tid,name\r\n\t\t\t},useU{\r\n\t\t\t\tid,name\r\n\t\t\t},task{\r\n\t\t\t\tid,date,dep,status,isps{ id,dev{id} }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n///点击设备获取详细；\r\n//cache-and-network参数＝每次点击都发起后端查询请求，但是同时cache也同时可用作替补来显示，断网时照样有数据用。缺省参数cache-first固执优先用cache旧数据。\r\nexport function useDeviceDetail(filter:any) {\r\n  const { loading, error, data, fetchMore, refetch} = useQuery(DEVICE_BY_ID, {\r\n    variables: { ...filter },\r\n    notifyOnNetworkStatusChange: true,\r\n    fetchPolicy: 'cache-and-network'\r\n  });\r\n  return {items:　data && data.all ,\r\n    error, loadMore:fetchMore, loading, refetch};\r\n}\r\n\r\n","D:\\home\\sei\\front-end\\src\\comp\\rootRarelyVary.tsx",["542","543","544","545"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Text, Link, Divider, Embed, useTheme, Container\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport { Link as RouterLink } from \"wouter\";\r\n\r\n\r\n//重复性代码抽象抽取参数化后可复用。\r\nexport const 首页末尾链接= (\r\n) => {\r\n  const theme = useTheme();\r\n  return  <div\r\n    css={{\r\n      textAlign: \"center\",\r\n      position: \"relative\",\r\n      paddingBottom: theme.spaces.lg,\r\n      paddingTop: \"4rem\",\r\n      background: theme.colors.background.tint2,\r\n      width: \"100%\",\r\n      overflow: \"hidden\"\r\n    }}\r\n  >\r\n    <svg\r\n      css={{\r\n        position: \"absolute\",\r\n        top: \"-1px\",\r\n        pointerEvents: \"none\",\r\n        transform: \"rotate(180deg)\",\r\n        left: 0,\r\n        fill: theme.colors.background.tint1\r\n      }}\r\n      fillRule=\"evenodd\"\r\n      clipRule=\"evenodd\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 1920 240\"\r\n    >\r\n      <g>\r\n        <path d=\"M1920,144.5l0,95.5l-1920,0l0,-65.5c196,-36 452.146,-15.726 657.5,8.5c229.698,27.098 870,57 1262.5,-38.5Z\" />\r\n      </g>\r\n    </svg>\r\n    <Container>\r\n      <Text\r\n        css={{\r\n          position: \"relative\",\r\n          zIndex: 10,\r\n          fontSize: theme.fontSizes[0]\r\n        }}\r\n      >\r\n        制作者 <Link href=\"/chaipu\">hez</Link> 维护人QQ号码<Link href=\"/about\">1736273864</Link>\r\n        <br />\r\n        <Link href=\"mailto:herzhang@163.com\">有问题发个电子邮件</Link> 欢迎提出问题!\r\n        <Link href=\"/maintenance/\">后台维护传送门</Link>\r\n        <br />\r\n        <div>\r\n          Icons made by{\" \"}\r\n          <Link\r\n            href=\"https://www.flaticon.com/authors/smashicons\"\r\n            title=\"Smashicons\"\r\n          >\r\n            Smashicons\r\n          </Link>{\" \"}\r\n          from{\" \"}\r\n          <Link href=\"/report\" title=\"福建特检\">\r\n            福建特检信息中心\r\n          </Link>{\" \"}\r\n          is licensed by{\" \"}\r\n          <Link\r\n            href=\"http://creativecommons.org/licenses/by/3.0/\"\r\n            title=\"Creative Commons BY 3.0\"\r\n            target=\"_blank\"\r\n          >\r\n            CC 3.0 BY\r\n          </Link>\r\n        </div>\r\n      </Text>\r\n    </Container>\r\n  </div>;\r\n};\r\n\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\maintenance\\template.ts",[],"D:\\home\\sei\\front-end\\src\\Layout.tsx",[],"D:\\home\\sei\\front-end\\src\\hooks\\useHelpers.ts",[],"D:\\home\\sei\\front-end\\src\\RecipeList.tsx",["546"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//import algoliasearch from \"algoliasearch\";\r\n//import algolia from \"./Search\";\r\n\r\n//import { Link } from \"@reach/router\";\r\nimport { useRoute, useLocation } from \"wouter\";\r\nimport { useSession } from \"./auth\";\r\n//import * as firebase from \"firebase/app\";\r\nimport orderBy from \"lodash.orderby\";\r\nimport {\r\n  Text,\r\n  List,\r\n  ListItem,\r\n  Spinner,\r\n  Button,\r\n  useTheme,\r\n  Embed,\r\n  Skeleton,\r\n} from \"customize-easy-ui-component\";\r\nimport { useFirebaseImage } from \"./Image\";\r\nimport { FadeImage } from \"./FadeImage\";\r\nimport { usePaginateQueryRecipe } from \"./db\";\r\nimport { SearchBox } from \"./SearchBox\";\r\nimport { useInView } from 'react-intersection-observer'\r\nimport { PullToRefresh,PullDownContent,RefreshContent,ReleaseContent } from \"react-js-pull-to-refresh\";\r\nimport { useEffect } from \"react\";\r\n\r\n//import usePaginateQuery from \"firestore-pagination-hook\";\r\n//const log = debug(\"app:RecipeList\");\r\n\r\nexport interface Ingredient {\r\n  name: string;\r\n  amount: string;\r\n}\r\n\r\ntype Action<K, V = void> = V extends void ? { type: K } : { type: K } & V;\r\n\r\nexport interface Recipe {\r\n  id: string;\r\n  title: string;\r\n  plain: string;\r\n  updatedAt: any;\r\n  userId: string;\r\n  image?: string;\r\n  createdBy?: {\r\n    email: string;\r\n    photoURL: string;\r\n  };\r\n  author: string;\r\n  description: string;\r\n  ingredients: Ingredient[];\r\n}\r\n\r\n// ts 的强类型，预编译。\r\ninterface ResponseLikeAlgoliasearch<T=any> {\r\n  hits: T[];     //范型　T，缺省的＝ any[];\r\n  page: number;\r\n  facets?: {\r\n    [facetName: string]: { [facetValue: string]: number };\r\n  };\r\n  //key-value的范式；实现 {\"key\"　:　{\"value\" } }\r\n  facets_stats?: {\r\n    [facetName: string]: {\r\n      max: number,\r\n      min: number,\r\n    };\r\n  };\r\n  id: string;\r\n  title: string;\r\n  plain: string;\r\n  updatedAt: any;\r\n  userId: string;\r\n  image?: string;\r\n  createdBy?: {\r\n    email: string;\r\n    photoURL: string;\r\n  };\r\n}\r\n\r\nexport type ActionType =\r\n  | Action<\"QUERY\", { value: string }>\r\n  | Action<\"UNDO\", { value: string }>\r\n  | Action<\"REDO\", { value: string }>\r\n  | Action<\"SEARCH\", { value: ResponseLikeAlgoliasearch[] }>;\r\n\r\n//每个通信方法，都需要设定状态的存储变量/依据数据类型分开的。\r\ninterface StateType {\r\n  searchResponse: ResponseLikeAlgoliasearch[] | null;\r\n  query: string;\r\n  past: string[];      //状态转移机，测试\r\n  present: string;    //initialState,\r\n  future: string[];\r\n}\r\n\r\n//旧版本的开发的使用模式；\"SEARCH\"用于搜索菜谱应答信息，  \"QUERY\"没用处的。\r\nfunction reducer(state: StateType, action: ActionType) {\r\n  const { past, future, present } = state;\r\n  switch (action.type) {\r\n    case \"QUERY\":\r\n      return {\r\n        ...state,\r\n        query: action.value\r\n      };    //返回action执行之后的应该给出的新状态。\r\n\r\n    case \"SEARCH\":\r\n      let hihi={\r\n        ...state,\r\n        searchResponse: action.value\r\n      };\r\n      console.log(\"准示state.searchResponse hihi=\",hihi);\r\n      return {\r\n        ...state,\r\n        searchResponse: action.value\r\n      };\r\n    case 'UNDO':        //状态转移机，测试;\r\n      const previous = past[past.length - 1]\r\n      const newPast = past.slice(0, past.length - 1)\r\n      return {\r\n        ...state,              //这个是必须的，不能省略。\r\n        past: newPast,\r\n        present: previous,\r\n        future: [present, ...future],\r\n      }\r\n    case 'REDO':\r\n      const next = future[0]\r\n      const newFuture = future.slice(1)\r\n      return {\r\n        ...state,\r\n        past: [...past, present],  　   //数组解构＋合成；\r\n        present: next,\r\n        future: newFuture,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nexport interface RecipeListProps {\r\n  //query?: string;\r\n  //refPanel?: React.RefObject<any>;\r\n  userid?: string;\r\n}\r\n\r\nconst initialState = {\r\n  searchResponse: null,\r\n  query: \"\",\r\n  past: [\"\",],      //状态转移机，测试\r\n  present: \"\",\r\n  future: [\"\",],\r\n};\r\n\r\n//如果做了云搜索searchResponse就显示云搜索结果菜谱列表，否则就该显示当前用户的菜谱列表。\r\n//搜索全局含其他人的搜到的菜谱，不一定能看，必须关注该用户，经过批准才能看。\r\nexport const RecipeList: React.FunctionComponent<RecipeListProps> = ({\r\n      userid\r\n}) => {\r\n  const theme = useTheme();\r\n // const refPanel = React.useRef();\r\n  const [query, setQuery] = React.useState(\"\");\r\n  //react上一个版本的做法遗留。　这里dispatch和一般地useState钩子setxxx的使用差不多。\r\n  const [state, dispatch] = React.useReducer(reducer, initialState);\r\n  const {user,} = useSession();\r\n\r\n  const [hasMore, setHasMore] = React.useState(true);\r\n  //分页，　从数据库读取的部分　当前用户的　菜单列表　，按时间排序。\r\n  const {\r\n    loadingMore,\r\n    loadingMoreError,\r\n  } ={ loadingMoreError:false, loadingMore:false, };\r\n\r\n\r\n  const condition = React.useMemo( () =>{\r\n    let wheres={a: {s:'createdBy.id',o:'EQ',lv:user.id } , };\r\n    ///Like相似'自带通配符'  单个字符 _ 任意个字符 %\r\n    let wheresQ={a: {s:'title',o:'LK',sv:query } ,\r\n    };\r\n    return query? wheresQ:wheres;\r\n  }, [user.id, query]);\r\n\r\n  const [filter, setFilter] = React.useState({where: condition,\r\n    offset:0,\r\n    first:5,\r\n    orderBy: \"updatedAt\",\r\n    asc: true\r\n  } as any);\r\n\r\n  const {\r\n    loading,\r\n    loadingError,\r\n    items,\r\n    loadMore, refetch\r\n  } =usePaginateQueryRecipe(filter);\r\n\r\n  //根据id和界面操作后的参数，来要修正graphQL的Query()的参数 = 要做重新查询。\r\n  React.useEffect(() => {\r\n    setFilter({where: condition,\r\n      offset:0,\r\n      first:5,\r\n      orderBy: \"updatedAt\",\r\n      asc: true\r\n    } as any);\r\n    setHasMore(true);\r\n  }, [query,condition]);\r\n  //云搜索的菜谱显示， perform an algolia query when query changes 看query去不停地搜索\r\n  React.useEffect(() => {\r\n    if (query) {\r\n      //云搜索 搜索区编码＝posts;  //this.client!.initIndex(\"posts\");\r\n     //   algolia.search(query).then(results => {\r\n     //     log(\"results: %o\", results);\r\n        console.log(\"准备要dispatch答　results=\"+ JSON.stringify(items) );\r\n        dispatch({\r\n          type: \"SEARCH\",\r\n          value: items\r\n        });\r\n     //    });\r\n    }\r\n  }, [query, items]);\r\n  //这上面的 deps[，] 必须有items； 才能保证查询useReducer方式目标返回state.searchResponse结果 能够反馈给UI界面层次。\r\n  //实际上，两个操作模式下都走读items给UI显示的话，就没必要麻烦dispatch　再去绕一圈了。\r\n  //console.log(\"准示state.searchResponse=\"+ JSON.stringify(query) + JSON.stringify(state.searchResponse));\r\n\r\n  async function toRefresh() {\r\n    setHasMore(true);\r\n    refetch( {} );\r\n  }\r\n\r\n  const toLoadMore = React.useCallback(\r\n    async () => {\r\n      items && loadMore({\r\n        variables: {\r\n          offset: items.length,\r\n        },\r\n        updateQuery: (prev, { fetchMoreResult }) => {\r\n          console.log(\"fetch来useInfiniteScroll看=\"+ JSON.stringify(fetchMoreResult)+\",itemslength=\",items.length);\r\n          if (!fetchMoreResult)   return prev;\r\n          if (!fetchMoreResult.recipe)   return prev;\r\n          if(fetchMoreResult.recipe.length===0)\r\n            setHasMore(false);\r\n          if(prev.recipe.length + fetchMoreResult.recipe.length > 2000 )\r\n            setHasMore(false);\r\n          //console.log(\"跑到了updateQuery-- hasMore=\", hasMore );\r\n          return Object.assign({}, prev, {\r\n            recipe: [...prev.recipe, ...fetchMoreResult.recipe],\r\n          });\r\n        },\r\n      })\r\n    },\r\n    [loadMore ,items]\r\n  );\r\n  /*\r\n  async function toLoadMore() {\r\n\r\n  }*/\r\n\r\n   //直接用{　callback:  some => toLoadMore(),　} 无法更新items&& items.length，都是初始的。\r\n    const [refMore, acrossMore] = useInView({threshold: 0});\r\n\r\n    useEffect( () =>   {\r\n            acrossMore && hasMore && toLoadMore()\r\n            }, [acrossMore,hasMore,    toLoadMore]   );\r\n\r\n  //底下style={{  height: `100vh` }} 用于触发滚动条强制开启。 : height: calc(100vh - 164px);\r\n  return (\r\n    <div       css={{\r\n      overflowY: \"scroll\",\r\n      //height: `calc(100vh - 2 * ${theme.spaces.xs} - 0.875rem - 2 * 10px - 63px)`,     //上一级已经设置高度了。\r\n      [theme.mediaQueries.md]: {\r\n        height: `calc(100vh - 2 * ${theme.spaces.lg} - 0.875rem - 2 * 10px - 71px)`\r\n      },\r\n      [theme.mediaQueries.xl]: {\r\n        height: `calc(100vh - 2 * ${theme.spaces.xl} - 0.875rem - 2 * 10px - 71px)`\r\n      }\r\n    }}>\r\n\r\n      <div  css={{  flex: \"0 0 auto\"  }}  >\r\n        <SearchBox query={query} setQuery={setQuery} />\r\n      </div>\r\n\r\n      <PullToRefresh\r\n        pullDownContent={<PullDownContent/>}\r\n        releaseContent={<ReleaseContent label={'立刻刷新内容'}/>}\r\n        refreshContent={<RefreshContent />}\r\n        onRefresh={() => toRefresh() }\r\n        pullDownThreshold={40}\r\n        backgroundColor=\"white\"\r\n        triggerHeight=\"auto\"\r\n      >\r\n\r\n\r\n      <div\r\n        css={{   /*特意把父div滚动条启动开。`calc(100vh - ${ileapHeight}px)`,   '750px',  注意串里的空格必须要有！\r\n          //关键是靠内容持续增长列表的紧上一级DIV来控制，把这一个div高度撑开，迫使最近的窗口所附属的滚动条启动。\r\n          minHeight: `calc(100vh - 164px)`,\r\n          [theme.mediaQueries.md]: {\r\n            minHeight: `calc(100vh - 164px - ${theme.spaces.lg} - ${theme.spaces.lg})`\r\n          },\r\n          [theme.mediaQueries.xl]: {\r\n            minHeight: `calc(100vh - 164px - ${theme.spaces.xl} - ${theme.spaces.xl})`\r\n          }, */\r\n        }}\r\n    >\r\n      {query && state.searchResponse ? (\r\n        <div>\r\n          <List>\r\n            {state.searchResponse &&\r\n              state.searchResponse.map(hit => (\r\n              <RecipeListItem\r\n                key={hit.id}\r\n                editable={hit.userId === user!.uid}\r\n                recipe={hit as any}\r\n                id={hit.id}\r\n                highlight={null}\r\n              />\r\n            ))}\r\n\r\n            {loading && (\r\n              <ListItem\r\n                interactive={false}\r\n                aria-live=\"polite\"\r\n                aria-busy=\"true\"\r\n                primary={<Skeleton animated css={{ width: \"150px\" }} />}\r\n              />\r\n            )}\r\n          </List>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          {/*loading && <Spinner css={{ marginTop: theme.spaces.md }} center /> */}\r\n          {!loading && items.length === 0 && (\r\n            <Text\r\n              muted\r\n              css={{\r\n                display: \"block\",\r\n                fontSize: theme.fontSizes[0],\r\n                margin: theme.spaces.lg\r\n              }}\r\n            >\r\n              自己还没有做菜谱哦. Create your first by clicking the plus\r\n              arrow above.\r\n            </Text>\r\n          )}\r\n\r\n          <List>\r\n            {\r\n              //这函数是firebase.firestore才有的？ item.get(\"updatedAt\").toMillis(),　is not a function！\r\n              console.log(\"准备要orderBy hasMore=\", hasMore )\r\n            }\r\n            {loading && (\r\n              <React.Fragment>\r\n                <ListItem\r\n                  interactive={false}\r\n                  contentBefore={\r\n                    <Skeleton\r\n                      css={{\r\n                        width: \"32px\",\r\n                        height: \"32px\",\r\n                        borderRadius: \"50%\"\r\n                      }}\r\n                    />\r\n                  }\r\n                  primary={<Skeleton css={{ maxWidth: \"160px\" }} />}\r\n                />\r\n                <ListItem\r\n                  interactive={false}\r\n                  contentBefore={\r\n                    <Skeleton\r\n                      css={{\r\n                        width: \"32px\",\r\n                        height: \"32px\",\r\n                        borderRadius: \"50%\"\r\n                      }}\r\n                    />\r\n                  }\r\n                  primary={<Skeleton css={{ maxWidth: \"200px\" }} />}\r\n                />\r\n              </React.Fragment>\r\n            )}\r\n\r\n            {orderBy(\r\n              items,\r\n              item => item.updatedAt,\r\n              \"desc\"\r\n            ).map(recipe => (\r\n              <RecipeListItem\r\n                id={recipe.id}\r\n                key={recipe.id}\r\n                editable\r\n                recipe={recipe as Recipe}\r\n              />\r\n            ))}\r\n\r\n            {loading && (\r\n              <ListItem\r\n                interactive={false}\r\n                aria-live=\"polite\"\r\n                aria-busy=\"true\"\r\n                primary={<Skeleton animated css={{ width: \"150px\" }} />}\r\n              />\r\n            )}\r\n          </List>\r\n          {/*分两种情况：１是搜索到的（通过dispatch=.useReducer的模式做），２是个人的＋排序*/}\r\n        </div>\r\n      )}\r\n\r\n      {loadingMore && <Spinner />}\r\n      {loadingError || (loadingMoreError && <div>Loading error...</div>)}\r\n\r\n        <div\r\n          css={{\r\n            textAlign: \"center\",\r\n            marginBottom: theme.spaces.md,\r\n            marginTop: theme.spaces.md\r\n          }}\r\n        >\r\n          { hasMore && !loadingMore && (\r\n            <div>\r\n              <Button onPress={ () => toLoadMore() }>\r\n                按，拉扯获取更多......\r\n              </Button>\r\n            </div>\r\n          )}\r\n          {!hasMore && <span>嘿，没有更多了</span> }\r\n        </div>\r\n        <div  ref={refMore}> </div>\r\n     </div>\r\n\r\n      </PullToRefresh>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface RecipeListItemProps {\r\n  editable?: boolean;\r\n  recipe: Recipe;\r\n  id: string;\r\n  highlight?: any;\r\n}\r\n\r\n//缩略图和完整图都是同一个图片的数据内容，　不做差异化处理！\r\nexport function RecipeListItem({ recipe, id, highlight }: RecipeListItemProps) {\r\n  const theme = useTheme();\r\n  //缩略图thumb-sm@和完整图片thumb@的url不一样的；后端支持缩略？　没必要做；\r\n  const { src, error } = useFirebaseImage(\"thumb-sm@\", recipe.image);\r\n\r\n  const href = `/chaipu/${id}`;\r\n  //被点击中匹配href，成功=true=isActive[? ,..];　表示正好跟界面显示同样的一个路由。\r\n  const [isActive,] = useRoute(href);\r\n  const [, setLocation] = useLocation();\r\n  //下面highlight. 是algoliasearch.Response返回的，必须有预先定义。\r\n  //console.log(\"进RecipeListItem；href=\",href);\r\n\r\n  return (\r\n    <ListItem\r\n      wrap={false}\r\n      onClick={e => {\r\n        e.preventDefault();\r\n        setLocation(href);\r\n        //navigate(href , { replace: true });\r\n      }}\r\n      aria-current={isActive}\r\n      href={`/chaipu/${id}`}\r\n      css={{\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n        height: \"56px\",\r\n        alignItems: \"center\",\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        \"& em\": {\r\n          fontStyle: \"normal\",\r\n          color: theme.colors.text.selected\r\n        },\r\n        backgroundColor: isActive ? theme.colors.background.tint1 : null,\r\n        \"& > *\": {\r\n          flex: 1,\r\n          overflow: \"hidden\"\r\n        }\r\n      }}\r\n      contentAfter={\r\n        recipe.image && !error ? (\r\n          <Embed css={{ width: \"60px\" }} width={75} height={50}>\r\n            <FadeImage src={src} hidden />\r\n          </Embed>\r\n        ) : null\r\n      }\r\n      // secondary={\r\n      //   highlight ? (\r\n      //     <span dangerouslySetInnerHTML={{ __html: highlight.author.value }} />\r\n      //   ) : (\r\n      //     recipe.author\r\n      //   )\r\n      // }\r\n      primary={\r\n        highlight ? (\r\n          <span dangerouslySetInnerHTML={{ __html: highlight.title.value }} />\r\n        ) : (\r\n          recipe.title\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\n\r\n//外部不安全的数据：<span dangerouslySetInnerHTML={{ __html: highlight.title.value }} />\r\n//页面在console输出报警key/id冲突，可能导致显示异常，重复内容的显示。\r\n//useReducer在复杂的状态管理场景下比useState更好。diapatch 一个action，使用reducer来更新state; https://juejin.im/post/5cbe8423f265da036706a9dd\r\n//使用React Hooks新特性useReducer、useContext替代传统Redux高阶组件;　useReducer接受可选的第三个参数initialAction。　https://www.jianshu.com/p/6c43b440dab8#usecallback\r\n//React: 传统思维下的　let　var　变量，对付状态更新转换的需求，是不可以再使用了。\r\n","D:\\home\\sei\\front-end\\src\\FollowingList.tsx",["547"],"/** @jsxImportSource @emotion/react */\r\n//import { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport { useFollowerIngs } from \"./hooks/useHelpers\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  Avatar,\r\n  IconButton,\r\n  Button,\r\n  Popover,\r\n  MenuList,\r\n  Stack,\r\n  MenuItem,\r\n  Text,\r\n  useTheme,\r\n  useToast,\r\n  IconPlus,\r\n  IconChevronRight,\r\n  IconMoreVertical,\r\n  StackTitle,\r\n  Skeleton\r\n} from \"customize-easy-ui-component\";\r\nimport { SearchBox } from \"./SearchBox\";\r\nimport debug from \"debug\";\r\n//import algoliasearch from \"algoliasearch\";\r\nimport { useSession } from \"./auth\";\r\nimport find from \"lodash.find\";\r\nimport { useDeleteRequestFollow, usePaginateQueryUser, useRequestFollow } from \"./db\";\r\n//import GestureView from \"react-gesture-view\";\r\nimport { FollowingRecipes } from \"./FollowingRecipes\";\r\n//import { User } from \"firebase\";\r\nimport { StackItem, StackContext } from \"react-gesture-stack\";\r\nimport { animated } from \"react-spring\";\r\nimport {SearchTitle} from \"./comp/base\"\r\n\r\n/*const client = algoliasearch(\r\n  config.ALGOLIA_APP_ID,\r\n  config.ALGOLIA_USER_SEARCH_KEY\r\n);\r\n//这里两个地方algoliasearch完全独立　initIndex名称不同的。\r\n//这个users必须在https://www.algolia.com/apps/24MA89MM0B/explorer/browse/users网站创立。\r\n//const index = client.initIndex(\"users\");\r\n\r\nfunction searchAlgoliaForUsers(query: string) {\r\n  return index.search({ query });\r\n}*/\r\n\r\nconst log = debug(\"app:FollowingList\");\r\n\r\n//接口参数类型\r\ninterface ResponseLikeAlgoliasearch<T=any> {\r\n  hits: T[];\r\n  //processingTimeMS: number;\r\n}\r\n\r\nexport interface FollowingListProps {}\r\n\r\nexport const FollowingList: React.FunctionComponent<\r\n  FollowingListProps\r\n> = props => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  const {user,} = useSession();\r\n  //graphQl的查询usexxx钩子函数，无法主动从后端读取最新数据。\r\n  const { loading, userList:followings } = useFollowerIngs(false);\r\n  //搜索user的输入:\r\n  const [query, setQuery] = React.useState(\"\");\r\n  const [\r\n    queryResults,\r\n    setQueryResults\r\n  ] = React.useState<ResponseLikeAlgoliasearch | null>(null);\r\n\r\n  //状态管理　relation＝当前显示的或者按钮点击事件产生,关注的user是谁。\r\n  const [relation, setRelation] = React.useState(null);\r\n  //console.log(\"来看当前的relation=\",relation );\r\n  const { submitfunc:requestFollow } = useRequestFollow(user, relation||{});\r\n  //钩子函数必须放在组件代码顶部，不能放置在逻辑条件分子语句内部，要确保都能调用到钩子函数。\r\n  const {submitfunc:deleteRequestFollow } = useDeleteRequestFollow(relation && relation.id);\r\n\r\n  const [filter, setFilter] = React.useState({where:\r\n        {a: {s:'username',o:'LK',sv:query },   },\r\n     });\r\n\r\n  const {\r\n    items: usersFind,\r\n  } =usePaginateQueryUser(filter);\r\n\r\n\r\n  async function inviteUser(otherUser: any) {\r\n    try {\r\n      setRelation(otherUser);\r\n      log(\"otherUser: %o\", otherUser);\r\n      //await requestFollow(user, otherUser);\r\n      await requestFollow( otherUser);\r\n      toast({\r\n        title: `A request has been sent to ${otherUser.displayName ||\r\n          otherUser.email}`,\r\n        intent: \"success\"\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast({\r\n        title: \"An error occurred while making your request.\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n    }\r\n  }\r\n\r\n  async function deleteRequest(id: string) {\r\n    try {\r\n      log(\"delete request: %s\", id);\r\n      await deleteRequestFollow();\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast({\r\n        title: \"An error occurred while cancelling your request.\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n    }\r\n  }\r\n\r\n  const noUsers = !query && (!followings || (followings && followings.length === 0));\r\n  //界面轮播 setIndex切换显示界面；   //index不是组件外部那一个同名index；\r\n  const [index, setIndex] = React.useState(0);\r\n\r\n\r\n  function unfollow(id: string) {\r\n    deleteRequest(id);\r\n    setRelation(null);\r\n    setIndex(0);\r\n  }\r\n\r\n  function showRelation(user: any) {\r\n    console.log(\"点击showRelation？=\", user);\r\n    setRelation(user);\r\n    setIndex(1);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    //console.log(\"伪善setQueryResul02=\" ,query,usersFind);\r\n    let filtercomp={where:\r\n        {a:\r\n          {s:'username',o:'LK',sv:query },\r\n        },\r\n      offset:0,\r\n      first:5,\r\n      orderBy: \"lastPasswordResetDate\",\r\n      asc: false\r\n    };\r\n    setFilter(filtercomp);\r\n  }, [query]);\r\n  //这两个useEffect的前后顺序不能颠倒，顺序非常重要，后面的依赖于前面的useEffect更新结果。\r\n  //操作UI副作用；要进一步做修正性处理。\r\n  React.useEffect(() => {\r\n    //console.log(\"伪善setQueryResul00=\" ,query,usersFind);\r\n    async function fetchUsers() {\r\n      if (!query) {\r\n        return;\r\n      }\r\n      //云搜索的results；　搜索目标＝索引区域是users的缓存。\r\n      //const results =usersFind;     results =await searchAlgoliaForUsers(query);\r\n      log(\"search results: %o\", usersFind);\r\n      //扣除已经关注的，从搜索结果剔除。\r\n      const hits = usersFind\r\n        .filter(hit => {\r\n          if (hit.id === user.uid) {\r\n            return false;    // 我自己的user.uid ，剔除！\r\n          }\r\n          //扣除已经关注followings=的用户，\r\n          return !find(followings, { toUser:{id: hit.id} });\r\n        });\r\n      /*   .map(hit => {\r\n          const relationU = find(followings, { toUser:{id: hit.objectID} });    //能找已经关注的\r\n          　　//这requested没用到？\r\n            //实际上面filter过滤之后，执行到这里relationU必定是null的;　　新增加字段requested, 深度拷贝hit;\r\n          return {\r\n            ...hit,\r\n            requested: relationU ? relationU.toUser.id : null\r\n          };\r\n        });*/\r\n\r\n      console.log(\"伪善setQueryResults=\" ,hits,usersFind);\r\n      //其实只有hits有用处的；\r\n      setQueryResults({\r\n        hits\r\n      });\r\n    }\r\n    //因为其它操作副作用的，导致需要进一步更新要求：\r\n    fetchUsers();\r\n  }, [query, followings, usersFind, user.uid]);\r\n  //上面这个副作用必须 加usersFind，否则无法继续处理后端数据带来的必要的UI反馈变化。\r\n  //控件<Stack 是堆叠式的，像导航条；适用同一个模板显示只需上级给下级参数调整的场景。根据上一叠页面选择触发状态relation给下一叠参数来控制下一级显示；更多嵌套很困难。\r\n  return (\r\n    <Stack\r\n      css={{\r\n        height: \"100%\",\r\n        [theme.mediaQueries.md]: {\r\n          minHeight: `calc(100vh - 164px)`,  //上级窗口还没限制高度\r\n        },\r\n      }}\r\n      index={index}\r\n      navHeight={60}\r\n      onIndexChange={i => setIndex(i)}\r\n      items={[\r\n        {\r\n          title: (\r\n            <SearchTitle>\r\n              <SearchBox\r\n                css={{ borderBottom: \"none\" }}\r\n                label=\"Search 从algoliasearch云 来搜寻某个用户 to follow\"\r\n                query={query}\r\n                setQuery={setQuery}\r\n              />\r\n            </SearchTitle>\r\n          ),\r\n          content: (\r\n            <StackItem >\r\n              <div\r\n                css={{\r\n                  overflowY: \"scroll\",\r\n                  height: \"100%\",\r\n                }}\r\n              >\r\n                {!loading && noUsers && (\r\n                  <Text\r\n                    muted\r\n                    css={{\r\n                      fontSize: theme.fontSizes[0],\r\n                      display: \"block\",\r\n                      margin: theme.spaces.lg\r\n                    }}\r\n                  >\r\n                    您还没有following anyone. Start following\r\n                    someone by searching for their email in the box above.\r\n                  </Text>\r\n                )}\r\n\r\n                <List>\r\n                  {/*新搜索到的用户，扣除已经关注的，单独排列在 上部分;  没有分页加载更多的user*/}\r\n                  {loading && (\r\n                    <React.Fragment>\r\n                      <ListItem\r\n                        interactive={false}\r\n                        contentBefore={\r\n                          <Skeleton\r\n                            css={{\r\n                              width: \"32px\",\r\n                              height: \"32px\",\r\n                              borderRadius: \"50%\"\r\n                            }}\r\n                          />\r\n                        }\r\n                        primary={<Skeleton css={{ maxWidth: \"160px\" }} />}\r\n                      />\r\n                      <ListItem\r\n                        interactive={false}\r\n                        contentBefore={\r\n                          <Skeleton\r\n                            css={{\r\n                              width: \"32px\",\r\n                              height: \"32px\",\r\n                              borderRadius: \"50%\"\r\n                            }}\r\n                          />\r\n                        }\r\n                        primary={<Skeleton css={{ maxWidth: \"200px\" }} />}\r\n                      />\r\n                    </React.Fragment>\r\n                  )}\r\n\r\n                  {query &&\r\n                   queryResults &&\r\n                   queryResults.hits.map(hit => (\r\n                    <ListItem\r\n                      key={hit.id}\r\n                      onPress={() => inviteUser(hit)}\r\n                      contentBefore={\r\n                        <Avatar\r\n                          size=\"sm\"\r\n                          src={hit.photoURL}\r\n                          name={hit.username || hit.mobile}\r\n                        />\r\n                      }\r\n                      primary={hit.id || hit.mobile }\r\n                      contentAfter={\r\n                        <IconPlus\r\n                          color={theme.colors.text.muted}\r\n                          aria-hidden\r\n                          size=\"lg\"\r\n                        />\r\n                      }\r\n                    />\r\n                  ))}\r\n\r\n                  {followings　&&　followings.map(userB => {\r\n                    return (\r\n                      <ListItem\r\n                        key={userB.toUser.id}\r\n                        interactive={userB.confirmed ? true : false}\r\n                        onPress={() =>\r\n                          showRelation({ ...userB.toUser  } )\r\n                        }\r\n                        contentBefore={\r\n                          <Avatar\r\n                            size=\"sm\"\r\n                            src={userB.toUser.photoURL}\r\n                            name={\r\n                              userB.toUser.username || userB.toUser.email || ('图片' || userB.toUser.id)\r\n                            }\r\n                          />\r\n                        }\r\n                        primary={userB.toUser.username || userB.toUser.email || userB.toUser.id}\r\n                        contentAfter={\r\n                          userB.confirmed ? (\r\n                            <IconChevronRight\r\n                              color={theme.colors.text.muted}\r\n                              aria-hidden\r\n                            />\r\n                          ) : (\r\n                            <Button\r\n                              onPress={e => {\r\n                                e.stopPropagation();\r\n                                e.preventDefault();\r\n                                setRelation(userB.toUser);\r\n                                deleteRequest(userB.toUser.id);\r\n                              }}\r\n                              size=\"sm\"\r\n                            >\r\n                              我要取消这条关注{userB.toUser.id}的请求\r\n                            </Button>\r\n                          )\r\n                        }\r\n                      />\r\n                    );\r\n                  })}\r\n                </List>\r\n\r\n              </div>\r\n            </StackItem>\r\n          )\r\n        },\r\n        {\r\n          title: (\r\n            <StackTitle\r\n              backTitle={\"回退吧\"}\r\n              contentAfter={\r\n                relation && (\r\n                  <Popover\r\n                    content={\r\n                      <MenuList>\r\n                        <MenuItem onPress={() => unfollow(relation.id)}>\r\n                          Unfollow　不想关注他了={relation.id || '空的？'} user\r\n                        </MenuItem>\r\n                      </MenuList>\r\n                    }\r\n                  >\r\n                    <IconButton\r\n                      onPress={e => e.stopPropagation()}\r\n                      variant=\"ghost\"\r\n                      icon={<IconMoreVertical />}\r\n                      label=\"Options菜单\"\r\n                    />\r\n                  </Popover>\r\n                )\r\n              }\r\n              title={relation ? relation.username || relation.mobile : \"\"}\r\n            />\r\n          ),\r\n          content: (\r\n            <StackItem>\r\n              {relation && (\r\n                <FollowingRecipes key={relation.id} id={relation.id} />\r\n              )}\r\n            </StackItem>\r\n          )\r\n        }\r\n      ]}\r\n    />\r\n  );\r\n\r\n};\r\n\r\n\r\n\r\n//别人封装好的组件也可定制和替换：SearchTitle用于代替基本构件库react-gesture-stack的已有标准样式StackTitle部分，相当于定制修改原生就有的组件。\r\nfunction SearchTitle_删除({ children }) {\r\n  const {\r\n    active,\r\n    opacity,\r\n    transform\r\n  } = React.useContext(StackContext);\r\n\r\n  return (\r\n    <div\r\n      className=\"StackTitle\"\r\n      aria-hidden={!active}\r\n      style={{\r\n        pointerEvents: active ? \"auto\" : \"none\",\r\n        zIndex: 10,\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0\r\n      }}\r\n    >\r\n      {/*<animated.div 版本不支持暂时改成div*/}\r\n      <animated.div\r\n        className=\"StackTitle__heading\"\r\n        style={{\r\n          textOverflow: \"ellipsis\",\r\n          whiteSpace: \"nowrap\",\r\n          overflow: \"hidden\",\r\n          opacity,          //版本不支持，！暂时改\r\n       //   transform: transform.to(x => `translateX(${x * 0.85}%)`)\r\n       //   opacity:  '$(opacity.animation.to)',\r\n          transform: `translateX(${transform.to(x => `translateX(${x * 0.85}%)` )})`\r\n        } as any }\r\n      >\r\n        {children}\r\n      </animated.div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n//报错Cannot read property 'map' of null标记出错代码行，竟可能会差错！实际错误点实在下方，报错指示却在上方的代码行，两处都有.map的代码。\r\n//<Stack 组件，实际上是内部状态控制界面的呈现，实际上DOM数据内容并没有同步地变更，只是页面切换着看；适用数据库组织的；PK的，导航堆叠场景实际是源代码组织的。\r\n//幸运的事！！<StackItem>底下内嵌的组件可以做到每一个都是独立自主的。这里<FollowingRecipes key={}/>对每一个按钮进入和后退的，虽然组件同一个，但内部状态数据可各自独立的。\r\n//overflowY:\"scroll\"若遇到 css={{height: \"100%\", 和 minHeight: '300px' 不能同时添加的。overflowY:和\"100%\"一起使用，且要在内层DIV上用。组件中间层可能屏蔽掉。\r\n//多层DIV的height: \"100%\", 需要在中间层次添加100%传递父辈限制大小，配合内部层的overflowY: \"scroll\",才能滚动。\r\n\r\n","D:\\home\\sei\\front-end\\src\\Compose.tsx",[],"D:\\home\\sei\\front-end\\src\\Recipe.tsx",["548"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//import firebase from \"firebase/app\";\r\nimport { Compose } from \"./Compose\";\r\nimport { useSession } from \"./auth\";\r\n//import { useDocument } from \"react-firebase-hooks/firestore\";\r\nimport { useTheme, Text } from \"customize-easy-ui-component\";\r\nimport {gql, useQuery } from \"@apollo/client\";\r\n//import { gql } from \"apollo-boost\";\r\n\r\n\r\n\r\nconst GET_POSTS = gql`\r\n  query findRecipe($id: ID!) {\r\n    findRecipe(id: $id) {\r\n    id,title,author,image,ingredients,description,createdBy{\r\n    id,username,\r\n    }\r\n     }\r\n  }\r\n`;\r\n\r\nexport interface RecipeProps {\r\n  id: string;\r\n}\r\n\r\n//id 184213562 ;这个id是　云搜索algoliasearch内部生成的objectID:　竟然这样? http://localhost:3000/184213562 ？\r\nexport const Recipe: React.FunctionComponent<RecipeProps> = ({ id }) => {\r\n  const theme = useTheme();\r\n  const {user,} = useSession();\r\n  var   value=null;\r\n  console.log(\"Recipe页面id=\"+ JSON.stringify(id) );\r\n  const { loading, error, data,  } = useQuery(GET_POSTS, {\r\n    variables: { id },\r\n    notifyOnNetworkStatusChange: true\r\n  });\r\n  //第一个render这里loading=true，要到第二次再执行到了这里才会有data数据!\r\n  console.log(\"刚Recipe经过\"+ JSON.stringify(data) +\"进行中\"+ JSON.stringify(loading));\r\n\r\n  if(!loading){\r\n    if(data){\r\n      const { findRecipe:recipe } = data;\r\n      if(recipe){\r\n        value=recipe;\r\n       //  authjs = JSON.parse(user);\r\n        //setAuthj(authjs); 报错！//React limits the number of renders to prevent an infinite loop.\r\n        console.log(\"以Recipe从后端获得=\" + JSON.stringify(value));\r\n      }\r\n    }\r\n  }\r\n /* const { value, loading, error } = useDocument(\r\n    firebase\r\n      .firestore()\r\n      .collection(\"recipes\")\r\n      .doc(id)\r\n  ); */\r\n\r\n  if (loading) {\r\n    return null;\r\n  }\r\n\r\n  if (!loading && !value) {\r\n    return null;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Text\r\n        muted\r\n        css={{\r\n          display: \"block\",\r\n          padding: theme.spaces.lg,\r\n          textAlign: \"center\"\r\n        }}\r\n      >\r\n        Oh bummer! A loading error occurred. Please try reloading.\r\n      </Text>\r\n    );\r\n  }\r\n\r\n  //菜谱内容: 富文本编辑器内容defaultDescription={x.description}\r\n  if (value) {\r\n    return (\r\n      <Compose\r\n        readOnly={true}\r\n        id={id}\r\n        editable={true || value.createdBy.id === user.uid}\r\n        defaultCredit={value.author}\r\n        defaultDescription={value.description}\r\n        defaultTitle={value.title}\r\n        defaultIngredients={ JSON.parse( value.ingredients ) }\r\n        defaultImage={value.image}\r\n      />\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n","D:\\home\\sei\\front-end\\src\\FollowersList.tsx",[],"D:\\home\\sei\\front-end\\src\\FadeImage.tsx",[],"D:\\home\\sei\\front-end\\src\\report\\Layout.tsx",["549"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, Global } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport { useTheme } from \"customize-easy-ui-component\";\r\nimport cutting_board_knife from '../images/cutting-board-knife.jpg';\r\n//骨架-背景\r\n//各个子网站和子路由的Layout可以分开单独；做不一样的。\r\n\r\nexport interface LayoutProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const Layout: React.FunctionComponent<LayoutProps> = ({ children }) => {\r\n  const theme = useTheme();\r\n  return (\r\n    <React.Fragment>\r\n      <Global\r\n        styles={{\r\n          html: {\r\n            [theme.mediaQueries.md]: {\r\n              backgroundAttachment: \"fixed\",\r\n              backgroundSize: \"cover\",\r\n              backgroundImage: `url(${cutting_board_knife})`\r\n            }\r\n          }\r\n        }}\r\n      />\r\n      {children}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\device\\DetailedGuide.tsx",["550","551","552","553","554","555","556","557","558"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, css } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Navbar,\r\n  Toolbar,\r\n  Text,\r\n  Button,\r\n  IconButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useTheme,\r\n  useToast,\r\n  LayerLoading,\r\n  Container,\r\n  ResponsivePopover,\r\n  IconMoreVertical,\r\n  IconArrowLeft, IconArrowRight, Select, IconPackage, IconPlus, DarkMode\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport {Helmet} from \"react-helmet\";\r\nimport { Link as RouterLink, Route, Switch, useLocation, useRoute } from \"wouter\";\r\nimport { ContainLine, TransparentInput } from \"../comp/base\";\r\nimport { useDeviceDetail } from \"./db\";\r\nimport { AddToTask } from \"./task/AddToTask\";\r\nimport { DeviceDetail } from \"./DeviceDetail\";\r\nimport { ComposeDevice } from \"./ComposeDevice\";\r\nimport { useInvalidateEQP } from \"./db\";\r\n\r\n\r\ninterface DetailedGuideProps {\r\n  id?: string;   　//来自上级<Route path={\"/device/:id/\"} component={} />给的:id。\r\n}\r\n//右半边页面\r\nexport const DetailedGuide: React.FunctionComponent<DetailedGuideProps> = ({\r\n   id: parId,\r\n}) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  const [, setLocation] = useLocation();\r\n  const [match, params] = useRoute(\"/device/:id/:rest*\");\r\n  let id =(match && params.id);\r\n  if(id==='new')  id=null;\r\n\r\n  const { loading ,items: dtvalue, error ,refetch} = useDeviceDetail( { id } );\r\n  const {result, submit:updateFunc, } = useInvalidateEQP({\r\n      whichEqp: id, reason:'测试期',\r\n  });\r\n\r\n  async function updateRecipe(id: string) {\r\n    try {\r\n      await updateFunc();\r\n    } catch (err) {\r\n      toast({\r\n        title: \"后端报错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      return;\r\n    }\r\n    toast({\r\n      title: \"返回了\",\r\n      subtitle: '作废 ID＝'+id,\r\n      intent: \"info\"\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\",\r\n        }\r\n      }}\r\n    >\r\n      <Navbar\r\n        css={{\r\n          zIndex: theme.zIndices.sticky,\r\n          backgroundColor: \"white\",\r\n          boxShadow: theme.shadows.sm,\r\n          position: \"sticky\",\r\n          top: 0,\r\n          [theme.mediaQueries.md]: {\r\n            position: \"static\"\r\n          }\r\n        }}\r\n      >\r\n        <Toolbar\r\n          css={{\r\n            alignItems: \"center\",\r\n            display: \"flex\"\r\n          }}\r\n        >\r\n          <RouterLink to=\"/device\">\r\n            <IconButton  icon={<IconArrowLeft />}\r\n              noBind\r\n              variant=\"ghost\"\r\n              label=\"后退\"\r\n              size=\"md\"\r\n              css={{\r\n                marginRight: theme.spaces.sm,\r\n                [theme.mediaQueries.md]: {\r\n                  display: \"none\"\r\n                }\r\n              }}\r\n            />\r\n          </RouterLink>\r\n           <Text\r\n              css={{\r\n                flex: 1,\r\n                textAlign: \"center\",\r\n                [theme.mediaQueries.md]: {\r\n                  textAlign: \"left\"\r\n                }\r\n              }}\r\n              wrap={false}\r\n              variant=\"h5\"\r\n              gutter={false}\r\n            >\r\n              设备ID号：{id}\r\n           </Text>\r\n          <div\r\n            css={{\r\n            display: 'inline-flex',\r\n          }}\r\n          >\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem contentBefore={<IconPackage />}  onPress={() => {\r\n                      setLocation(\"/device/\"+id+\"/addTask\", { replace: false });\r\n                   } }>\r\n                    生成新任务\r\n                  </MenuItem>\r\n                  <MenuItem onPress={ async () => {\r\n                       }\r\n                    }>其他功能\r\n                  </MenuItem>\r\n                  <MenuItem onPress={() => updateRecipe(id) }>法定设备导入后的拆除报废</MenuItem>\r\n                  <MenuItem onPress={() => updateRecipe(id) }>委托设备不再维护时删除</MenuItem>\r\n                  <MenuItem onPress={() => refetch( {} )}>刷新获最新数据</MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <IconButton\r\n                css={{ marginLeft: theme.spaces.sm}}\r\n                variant=\"ghost\"\r\n                icon={<IconMoreVertical />}\r\n                label=\"菜单\"\r\n              />\r\n            </ResponsivePopover>\r\n          </div>\r\n        </Toolbar>\r\n      </Navbar>\r\n\r\n      <div\r\n        css={{  //控制小屏时的导航条底下的整个页面滚动。\r\n          flex: 1,\r\n          [theme.mediaQueries.md]: {\r\n            height: \"auto\",\r\n            display: \"block\",\r\n          }\r\n        }}\r\n      >\r\n        <div>\r\n\r\n          <Container>\r\n            <div\r\n              css={{\r\n                display: 'flex',\r\n                alignItems:'center',\r\n                justifyContent:'center',\r\n                minHeight: '85vh',\r\n                [theme.mediaQueries.md]: {\r\n                  paddingTop: theme.spaces.lg,\r\n                  paddingBottom: theme.spaces.lg,\r\n                  minHeight:'unset',\r\n                }\r\n              }}\r\n            >\r\n                <div\r\n                  css={{\r\n                  width:'100%',\r\n                }}\r\n                >\r\n                  {/*三级路由了： 嵌套再嵌套了一层 布局级别的组件*/}\r\n                  {id && error && error.message}\r\n                  <ThirdRouterContent id={id} device={dtvalue}/>\r\n\r\n                  <div css={{ marginTop: theme.spaces.sm }}>\r\n                    <RouterLink to={`/device/`}>\r\n                      <Button\r\n                        size=\"lg\" noBind\r\n                        intent=\"primary\"\r\n                        iconAfter={<IconArrowRight />}\r\n                      >\r\n                        其他功能\r\n                      </Button>\r\n                    </RouterLink>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n      <LayerLoading loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\ninterface ThirdRouterProps {\r\n  id?: string;\r\n  device: any;\r\n}\r\n//为了能立刻刷新操作反馈页面，引入三级路由，把数据获取放在了公共上级组件去，某页面操作的同时能更新查询另外页面显示立即反馈到。\r\nfunction ThirdRouterContent({id, device}: ThirdRouterProps) {\r\n  return (\r\n   <React.Fragment>\r\n    <Switch>\r\n      <Route path={\"/device/new\"}>\r\n          <ComposeDevice  readOnly={false}/>\r\n      </Route>\r\n      <Route path={\"/device/:id/addTask\"}>\r\n        <AddToTask id={id} dt={device}/>\r\n      </Route>\r\n      <Route path={`/device/:id`}>\r\n          <DeviceDetail id={id} eqp={device}/>\r\n      </Route>\r\n      <Route path=\"/:rest*\">没该URL内容</Route>\r\n    </Switch>\r\n  </React.Fragment>\r\n  );\r\n}\r\n","D:\\home\\sei\\front-end\\src\\device\\DeviceList.tsx",["559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  Avatar,\r\n  IconButton,\r\n  Button,\r\n  MenuList,\r\n  Stack,\r\n  useTheme,\r\n  IconMoreVertical,\r\n  StackTitle,\r\n  Skeleton, MenuItem, IconPackage, ResponsivePopover\r\n} from \"customize-easy-ui-component\";\r\nimport { SearchDeviceBox } from \"./SearchDeviceBox\";\r\n\r\n//import algoliasearch from \"algoliasearch\";\r\n//import config from \"./firebase-config\";\r\n\r\nimport {  usePaginateQueryDevice,  } from \"./db\";\r\n\r\n//import { FollowingRecipes } from \"./FollowingRecipes\";\r\n\r\nimport { StackItem, StackContext } from \"react-gesture-stack\";\r\n\r\n//import { useHistory } from \"react-router-dom\";\r\n//@reach 的 Link 可以附带state ；\r\n//import { Link, navigate, globalHistory } from \"@reach/router\";\r\n\r\n//import useHistoryState from \"use-history-state\";\r\nimport { useEffect } from \"react\";\r\nimport { useInView } from 'react-intersection-observer'\r\n//import { PullToRefresh,PullDownContent,RefreshContent,ReleaseContent } from \"react-js-pull-to-refresh\";\r\nimport { DevfilterContext } from \"../context/DevfilterContext\";\r\nimport {DeviceListInner} from \"./DeviceListInner\"\r\nimport {SearchTitle} from \"../comp/base\"\r\n\r\ninterface DeviceListProps {}\r\nexport const DeviceList: React.FunctionComponent<\r\n  DeviceListProps\r\n> = props => {\r\n  const theme = useTheme();\r\n  //搜索编辑框的输入:\r\n  const [query, setQuery] = React.useState(\"\" as any);\r\n\r\n // const [queryResults,setQueryResults] = React.useState<any>( null );\r\n\r\n  //状态管理　relation＝当前显示的或者按钮点击事件产生,关注的user是谁。\r\n  const [relation, ] = React.useState(null);\r\n  const {filter:devfl, } =React.useContext(DevfilterContext);\r\n  //console.log(\"DeviceList当前的查询 queryResults=\", queryResults);\r\n  //根据options选择结果，来组织后端的查询参数。\r\n  //经过路由跳转的情况useState会重新初始化mount,还有一种仅仅是界面上同一大组件底下切换显示的不会经过路由，数据列表状态不变也不会触发去后端读取更新。\r\n   const [filter, setFilter] = React.useState({where: { ...devfl },\r\n    offset:0, limit:1,\r\n  } as any);\r\n\r\n  //界面轮播 setIndex切换显示界面；   //index不是组件外部那一个同名index；\r\n  const [index, setIndex] = React.useState(0);\r\n  //根据query的改变来重新查询哪。\r\n  React.useEffect(() => {\r\n    let filtercomp={where: {cod: query, ...devfl},\r\n      offset:0,\r\n      limit:10,\r\n      asc: false\r\n    };\r\n    //      orderBy: \"id\",\r\n    console.log(\"伪set Filter 回调=filtercomp=\",filtercomp);\r\n    setFilter(filtercomp);\r\n  }, [query,devfl]);\r\n\r\n  console.log(\"霉变render query=\",query);\r\n\r\n  //控件<Stack 是堆叠式的，像导航条；适用同一个模板显示只需上级给下级参数调整的场景。根据上一叠页面选择触发状态relation给下一叠参数来控制下一级显示；更多嵌套很困难。\r\n  return (\r\n    <Stack\r\n      css={{        //上级窗口已经限制高度，要在里面滚动适应。\r\n        //height: \"100%\",     minHeight改成了height\r\n        height: `calc(100vh - 2 * ${theme.spaces.xs} - 0.875rem - 2 * 10px - 63px)`,\r\n        [theme.mediaQueries.md]: {\r\n          height: `calc(100vh - 2 * ${theme.spaces.lg} - 0.875rem - 2 * 10px - 71px)`\r\n        },\r\n        [theme.mediaQueries.xl]: {\r\n          height: `calc(100vh - 2 * ${theme.spaces.xl} - 0.875rem - 2 * 10px - 71px)`\r\n        }\r\n      }}\r\n      index={index}\r\n      navHeight={60}\r\n      onIndexChange={i => setIndex(i)}\r\n      items={[\r\n        {\r\n          title: (\r\n            <SearchTitle>\r\n              <SearchDeviceBox\r\n                css={{ borderBottom: \"none\" }}\r\n                label=\"搜某设备,列表数量限制,用参数缩小范围\"\r\n                query={query}\r\n                setQuery={setQuery}\r\n              />\r\n            </SearchTitle>\r\n          ),\r\n          content: (\r\n            <StackItem >\r\n              <div\r\n                css={{\r\n                  overflowY: \"auto\",\r\n                  //overflowY: \"scroll\", 滚动触发，小屏幕很明显的条，滚动条会随浏览器屏幕设备模式变化样式。\r\n                  height: \"100%\",\r\n                }}\r\n              >\r\n\r\n                <DeviceListInner filter={filter}/>\r\n\r\n                </div>\r\n            </StackItem>\r\n          )\r\n        },\r\n        {\r\n          title: (\r\n            <StackTitle\r\n              backTitle={\"作废\"}\r\n              contentAfter={\r\n                relation && ( 349 )\r\n              }\r\n              title={relation ? relation.username || relation.mobile : \"\"}\r\n            />\r\n          ),\r\n          content: (\r\n            <StackItem>\r\n              {relation && ( false\r\n               //作废了，未用  <FollowingRecipes key={relation.id} id={relation.id} />\r\n              )}\r\n            </StackItem>\r\n          )\r\n        }\r\n      ]}\r\n    />\r\n  );\r\n\r\n};\r\n\r\n\r\n\r\n\r\n//报错Cannot read property 'map' of null标记出错代码行，竟可能会差错！实际错误点实在下方，报错指示却在上方的代码行，两处都有.map的代码。\r\n//<Stack 组件，实际上是内部状态控制界面的呈现，实际上DOM数据内容并没有同步地变更，只是页面切换着看；适用数据库组织的；PK的，导航堆叠场景实际是源代码组织的。\r\n//幸运的事！！<StackItem>底下内嵌的组件可以做到每一个都是独立自主的。这里<FollowingRecipes key={}/>对每一个按钮进入和后退的，虽然组件同一个，但内部状态数据可各自独立的。\r\n//overflowY:\"scroll\"若遇到 css={{height: \"100%\", 和 minHeight: '300px' 不能同时添加的。overflowY:和\"100%\"一起使用，且要在内层DIV上用。组件中间层可能屏蔽掉。\r\n//多层DIV的height: \"100%\", 需要在中间层次添加100%传递父辈限制大小，配合内部层的overflowY: \"scroll\",才能滚动。\r\n//[query] = React.useState(\"\"); 为何导致 if(!query) 成立， \"\"即空字符串等于false。\r\n\r\n","D:\\home\\sei\\front-end\\src\\device\\Layout.tsx",["575"],"D:\\home\\sei\\front-end\\src\\comp\\base.tsx",["576","577","578","579"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, } from \"@emotion/react\";\r\n//import * as React from \"react\";\r\nimport {\r\n  Input,\r\n  Text,\r\n  useTheme,\r\n  InputBaseProps,\r\n} from \"customize-easy-ui-component\";\r\nimport * as React from \"react\";\r\nimport { StackContext } from \"react-gesture-stack\";\r\nimport { animated } from \"react-spring\";\r\n//import { useSession } from \"../auth\";\r\n//import {Helmet} from \"react-helmet\";\r\n\r\n//通用UI组件 定制后的；\r\n\r\n//透视隐形的输入框框; Input组件底下不能挂接chidren了。\r\ninterface TransparentInputProps extends InputBaseProps {}\r\nexport const TransparentInput = (props: TransparentInputProps) => {\r\n  const theme = useTheme();\r\n  return (\r\n    <Input\r\n      css={{\r\n        background: \"none\",\r\n        border: \"none\",\r\n        boxShadow: \"none\",\r\n        \":focus\": {\r\n          outline: \"none\",\r\n          boxShadow: \"none\",\r\n          background: theme.colors.palette.gray.lightest\r\n        },\r\n\r\n\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\n//带并排标题的　单行的嵌套输入子控件空间\r\nexport const ContainLine =({ display, children, ...props })  => {\r\n  const theme = useTheme();\r\n  return (\r\n    <div\r\n      css={{\r\n        marginTop: \"-0.25rem\",\r\n        marginLeft: \"-0.75rem\",\r\n        marginRight: \"-0.75rem\",\r\n        width: '100%',\r\n        margin: 'auto',\r\n        maxWidth: '600px'\r\n      }}\r\n      {...props}\r\n    >\r\n\r\n      <div\r\n        css={{\r\n          backgroundColor: \"transparent\",\r\n          display: \"flex\",\r\n          [theme.mediaQueries.md]: {\r\n            maxWidth: \"600px\"\r\n          }\r\n        }}\r\n      >\r\n        <Text\r\n          css={{\r\n            display: \"block\",\r\n            width: \"100%\",\r\n            padding: \"0.5rem 0.75rem\"   //无法和输入组建的大小联动。\r\n          }}\r\n        >\r\n          {display}\r\n          </Text>\r\n\r\n        {children}\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\n//最早来自https://github.com/bmcmahen/julienne/blob/master/src/FollowingList.tsx\r\n//别人封装好的组件也可定制和替换：SearchTitle用于代替基本构件库的已有标准样式StackTitle部分，相当于定制修改原生就有的组件。\r\nexport function SearchTitle({ children }: { children: React.ReactNode }) {\r\n  const {\r\n    navHeight,\r\n    index,\r\n    active,\r\n    changeIndex,\r\n    opacity,\r\n    transform\r\n  } = React.useContext(StackContext);\r\n\r\n  return (\r\n    <div\r\n      className=\"StackTitle\"\r\n      aria-hidden={!active}\r\n      style={{\r\n        pointerEvents: active ? \"auto\" : \"none\",\r\n        zIndex: 10,\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0\r\n      }}\r\n    >\r\n      <animated.div\r\n        className=\"StackTitle__heading\"\r\n        style={{\r\n          textOverflow: \"ellipsis\",\r\n          whiteSpace: \"nowrap\",\r\n          overflow: \"hidden\",\r\n          opacity,\r\n          transform: transform.to(x => `translateX(${x * 0.85}%)`)\r\n        } as any }\r\n      >\r\n        {children}\r\n      </animated.div>\r\n    </div>\r\n  );\r\n}\r\n\r\n","D:\\home\\sei\\front-end\\src\\report\\TemplateMain.tsx",["580","581"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, css } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Toolbar,\r\n  Navbar,\r\n  useTheme,\r\n  IconButton,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  Layer,\r\n  TabPanel,\r\n  MenuList,\r\n  MenuItem,\r\n  Tooltip,\r\n  ResponsivePopover,\r\n  IconChevronDown,\r\n  IconPlus,\r\n  DarkMode,\r\n  LightMode,\r\n  Pager, IconArchive, IconArrowRight, Touchable\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport { useSession,  useSignOut } from \"../auth\";\r\nimport { Link, useLocation, Switch, Route, Link as RouterLink } from \"wouter\";\r\nimport { useMedia } from \"use-media\";\r\nimport { Layout } from \"./Layout\";\r\nimport { RelationList } from \"../inspect/RelationList\";\r\nimport typeAsRoute from \"../typeAsRoute.json\";\r\nimport { RecordStarter, ReportStarter } from \"./TemplateLoader\";\r\nimport { InternalItemHandResult, ReportViewProps } from \"./comp/base\";\r\n\r\n//模板的版本号和相应代码维护管理是个问题；不是下载离线的，而是时刻web在线的文档格式；配套数据库数据加上配套模板才能拼凑出正式文档。要保留维护几年？有人还在用旧的。\r\n//模板类型：支持主报告类型1个+分报告类型多个的情况，报告展示入口管理。模板版本号由后端管理。\r\n\r\ninterface TemplateMainProps {\r\n  template: string;\r\n  verId: string;\r\n  action: string;\r\n  id?: string;\r\n  source?: any;\r\n}\r\n//首次render时刻template应该还没有获取到的，需要第二次render才能获得到template。\r\nfunction TemplateMain( {\r\n                         template: templateID,\r\n                         verId, action, id,\r\n                         source\r\n         }:  TemplateMainProps\r\n) {\r\n  const [template, setTemplate] = React.useState(null as any);\r\n  const path =typeAsRoute[templateID] +\".E\";\r\n  //import参数变量，会被替换为【.*】；  不可这么写 import(path) 这是无效的。\r\n  //useLayoutEffect\r\n  React.useEffect(() => {\r\n    //console.log(\"不会重复执行到这里的！ template=\", \"path=\", path);\r\n    import(`${path}`).then(module => {\r\n      if(module.originalTemplate===undefined)\r\n        throw new Error(`没找到模板入口O组件${path}`);\r\n      if(module.reportTemplate===undefined)\r\n        throw new Error(`没找到模板入口R组件${path}`);\r\n\r\n      setTemplate({original: module.originalTemplate[verId], report: module.reportTemplate[verId]});\r\n    })\r\n      .catch(error => {\r\n        throw new Error(`错误导致后续操作模板查找失败${error}`);\r\n      });\r\n\r\n  }, [path, verId]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      { template &&\r\n        <Switch>\r\n          <Route path=\"/report/:template/ver/:verId/preview/:repId\">\r\n           { source &&\r\n               <ReportStarter id={id} source={source} template={template.report}/>\r\n           }\r\n          </Route>\r\n          <Route path=\"/report/:rest*\">\r\n           { source &&\r\n               <RecordEditorOrPrint id={id} source={source} action={action} templateSet={template}\r\n                                    templateID={templateID} verId={verId} />\r\n           }\r\n          </Route>\r\n        </Switch>\r\n      }\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\nexport interface RecordEditorOrPrintProps {\r\n  id: string;\r\n  source: any;  //原始记录的json数据 + 。\r\n  templateSet: any;\r\n  templateID: string;\r\n  verId: string;\r\n  action: string;\r\n}\r\n//带原始记录的场景。\r\nexport const RecordEditorOrPrint: React.FunctionComponent<RecordEditorOrPrintProps> = (\r\n  {source,templateSet, action, id, templateID, verId}\r\n  ) => {\r\n  const theme = useTheme();\r\n  const {user} = useSession();\r\n  let showingRecipe = (action!=='none');\r\n  const [activeTab, setActiveTab] = React.useState(0);\r\n  const [, setLocation] = useLocation();\r\n  //isLarge在A4竖打印是false;\r\n  const isLarge = useMedia({ minWidth: \"800px\" });\r\n  //大屏或者小屏但是没有显示具体明细页的场合。\r\n  let renderList =isLarge || action==='none';\r\n  if(!isLarge && action!=='none')   renderList=false;\r\n  function onLogoutDo() {\r\n    setLocation(\"/login\",  { replace: false } );\r\n  }\r\n  const { submitfunc:signOut,  } = useSignOut(onLogoutDo);\r\n  if(!templateSet)   throw new Error(`没模板哦`);\r\n  //console.log(\"来TemplateMain当前的params action=\",action ,\"showingRecipe=\",showingRecipe);\r\n\r\n  return (\r\n    <Layout>\r\n      <div\r\n        css={css`\r\n          display: flex;\r\n          box-sizing: border-box;\r\n        `}\r\n      >\r\n        {/*左半部分,包括菜单+列表*/}\r\n        <Layer\r\n          aria-hidden={!renderList}\r\n          css={{\r\n            display: renderList ? \"flex\" : \"none\",   //最关键！\r\n            boxSizing: \"border-box\",\r\n            flexDirection: \"column\",\r\n            flex: \"1\",\r\n            boxShadow: \"none\",\r\n            background: \"white\",\r\n            position: \"absolute\",\r\n            width: \"100%\",\r\n            borderRadius: 0,\r\n            margin: 0,\r\n            height: `calc(100vh)`,\r\n            \"@media (min-width:800px)\": {\r\n              position: \"fixed\",    //\"absolute\"会跟随右边滚动\r\n              zIndex: theme.zIndices.fixed,\r\n              top: 0,\r\n              boxShadow: theme.shadows.xl,\r\n              overflow: \"hidden\",\r\n              width: \"100%\",\r\n              maxWidth: \"46vw\",\r\n              borderRadius: theme.radii.lg,\r\n              margin: theme.spaces.lg,\r\n              height: `calc(100vh - ${theme.spaces.lg} - ${theme.spaces.lg})`\r\n            },\r\n            [theme.mediaQueries.xl]: {\r\n              margin: theme.spaces.xl,\r\n              maxWidth: \"40vw\",\r\n              height: `calc(100vh - ${theme.spaces.xl} - ${theme.spaces.xl})`\r\n            },\r\n            \"@media print\": {\r\n              display: \"none\"\r\n            }\r\n          }}\r\n        >\r\n          {/*　顶部黑色工具条2行，sticky模式，这黑色标题区导致很多烦恼！高度被不规律占用; 两行合计105px=\r\n            64px =是Toolbar引起的；\r\n                minHeight: MOBILE_HEIGHT,  MOBILE_HEIGHT = \"56px\";   来源于UI基础<Toolbar部件的（要看参数compressed和屏幕）,\r\n                },  _b[theme.mediaQueries.md] = {\r\n                  minHeight: DESKTOP_HEIGHT, DESKTOP_HEIGHT = \"64px\";\r\n            41px =是字0.875rem + 2 * 10px；　   来源于<Tab 组件的 按钮+文本。\r\n            实际上<TabPanel组件和Tabs按钮的白色脖子样边条还要算入7px的;\r\n          */}\r\n          <div\r\n            css={[\r\n              {\r\n                width: \"100%\",\r\n                top: 0,\r\n                background: theme.colors.palette.gray.base,\r\n                zIndex: theme.zIndices.sticky,\r\n                position: \"sticky\",\r\n              }\r\n            ]}\r\n          >\r\n            <Navbar\r\n              position=\"static\"\r\n              css={{\r\n                flex: \"0 0 auto\",\r\n                background: theme.colors.palette.gray.base,\r\n                color: \"white\"\r\n              }}\r\n            >\r\n              <Toolbar\r\n                css={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\"\r\n                }}\r\n              >\r\n                <div css={{ width: \"42px\" }} />\r\n                <LightMode>\r\n                  <ResponsivePopover\r\n                    content={\r\n                      <MenuList>\r\n                        <MenuItem onPress={()=>signOut()}>退出登录帐户</MenuItem>\r\n                      </MenuList>\r\n                    }\r\n                  >\r\n                    <DarkMode>\r\n                      <Button\r\n                        size=\"md\"\r\n                        iconAfter={<IconChevronDown />}\r\n                        variant=\"ghost\"\r\n                      >\r\n                        {user.username || user.mobile}\r\n                      </Button>\r\n                    </DarkMode>\r\n                  </ResponsivePopover>\r\n                </LightMode>\r\n                <Tooltip content=\"增加个检验报告\">\r\n                  <div>\r\n                    <DarkMode>\r\n                      <Link to=\"/\">\r\n                        <IconButton\r\n                          variant=\"ghost\"\r\n                          label=\"增加\"\r\n                          size=\"md\"\r\n                          icon={<IconPlus />}\r\n                        />\r\n                      </Link>\r\n                    </DarkMode>\r\n                  </div>\r\n                </Tooltip>\r\n                <Tooltip content=\"返回首页\">\r\n                  <div>\r\n                    <DarkMode>\r\n                      <Link to=\"/\">\r\n                        <IconButton\r\n                          variant=\"ghost\"\r\n                          label=\"首页\"\r\n                          size=\"md\"\r\n                          icon={<IconArchive />}\r\n                        />\r\n                      </Link>\r\n                    </DarkMode>\r\n                  </div>\r\n                </Tooltip>\r\n              </Toolbar>\r\n            </Navbar>\r\n            <div css={{ flex: \"0 0 auto\", zIndex: 2 }}>\r\n              <DarkMode>\r\n                <Tabs\r\n                  css={{\r\n                    position: \"sticky\",\r\n                    top: 0,\r\n                    background: theme.colors.palette.gray.base\r\n                  }}\r\n                  onChange={i => setActiveTab(i)}\r\n                  value={activeTab}\r\n                  variant=\"evenly-spaced\"\r\n                >\r\n                  <Tab id=\"original\">原始记录录入</Tab>\r\n                  <Tab id=\"ISPlist\">检验溯源</Tab>\r\n                  <RouterLink to={`/report/${templateID}/ver/${verId}/preview/${id}?&print=1`}>\r\n                    <Tab id=\"report\">检验报告</Tab>\r\n                  </RouterLink>\r\n                </Tabs>\r\n              </DarkMode>\r\n            </div>\r\n          </div>\r\n          {/*这才是小窗口的主体，独立的可滚动部分*/}\r\n          <Pager\r\n            enableScrollLock={false}\r\n            value={activeTab}\r\n            onRequestChange={i => setActiveTab(i)}\r\n            lazyLoad={true}\r\n          >\r\n            <TabPanel id=\"original\"  css={{\r\n              height: '100%'\r\n            }}>\r\n              {templateSet?.report &&\r\n              <EmbeddedReport id={id}  source={source} template={templateSet.report}/>\r\n              }\r\n            </TabPanel>\r\n            <TabPanel  id=\"ISPlist\">\r\n              {/*实际直接引入检验大模块的左半边的嵌入组件*/}\r\n              <RelationList />\r\n            </TabPanel>\r\n            <RouterLink to={`/report/${templateID}/ver/${verId}/preview/${id}?&print=1`}>\r\n              <TabPanel id=\"report\" css={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                height: '100%'\r\n              }}>\r\n                  <Button css={{\r\n                    margin: 'auto'\r\n                  }}\r\n                    size=\"lg\" noBind\r\n                    intent=\"primary\"\r\n                    iconAfter={<IconArrowRight />}\r\n                  >\r\n                    查看正式报告和打印\r\n                  </Button>\r\n              </TabPanel>\r\n            </RouterLink>\r\n          </Pager>\r\n\r\n        </Layer>\r\n        {\r\n          //实际情况：在小屏场合，左半边内容被后面的右中文档流后面的界面部分给屏蔽遮盖掉了。\r\n        }\r\n        {showingRecipe && (\r\n          <div\r\n            css={{\r\n              display: \"block\",\r\n              position: \"relative\",\r\n              flex: 1,      　//对布局影响最大\r\n              \"@media (min-width:800px)\": {\r\n                display: \"flex\",    　\r\n                justifyContent: \"center\"\r\n              }\r\n            }}\r\n          >\r\n\r\n            <div\r\n              css={{\r\n                display: \"block\",\r\n                position: \"absolute\",\r\n                width: \"100%\",\r\n                boxSizing: \"border-box\",\r\n                \"@media (min-width:800px)\": {\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  padding: theme.spaces.lg,\r\n                  minHeight: \"100vh\",\r\n                  paddingLeft: \"calc(46vw + 3rem)\"\r\n                },\r\n                [theme.mediaQueries.xl]: {\r\n                  paddingRight: theme.spaces.xl,\r\n                  paddingLeft: \"calc(40vw + 6rem)\"\r\n                }\r\n              }}\r\n            >\r\n              <Layer\r\n                elevation=\"xl\"\r\n            //组件id! 缺少key导致：遇到小屏幕轮转显示正常，大屏整个显示模式却必须手动刷新才能切换内容。\r\n                key={action}\r\n                css={{\r\n                  borderRadius: 0,\r\n                  position: \"relative\",\r\n                  boxShadow: \"none\",\r\n                  width: \"100%\",\r\n                  \"@media (min-width:800px)\": {\r\n                    marginTop: \"auto\",\r\n                    height: \"auto\",\r\n                    overflow: \"hidden\",\r\n                    boxSizing: \"border-box\",\r\n                    marginBottom: \"auto\",\r\n                    width: \"100%\",\r\n                    borderRadius: theme.radii.lg,\r\n                    boxShadow: theme.shadows.xl\r\n                  }\r\n                }}\r\n              >\r\n                {templateSet?.original\r\n                 && <RecordStarter id={id} action={action}  source={source} template={templateSet.original}\r\n                                   templateID={templateID} verId={verId}\r\n                         css={{\r\n                           display: action!=='none' ? \"unset\" : \"none\",\r\n                         }}\r\n                    />\r\n                }\r\n              </Layer>\r\n            </div>\r\n\r\n          </div>\r\n        )}\r\n\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\n\r\ninterface EmbeddedReportProps {\r\n  id: string;\r\n  source: any;\r\n  template: React.ReactElement<React.ForwardRefRenderFunction<InternalItemHandResult,ReportViewProps>>;\r\n}\r\nconst EmbeddedReport: React.FunctionComponent<EmbeddedReportProps> = ({ id, source, template}\r\n) => {\r\n  const theme = useTheme();\r\n  return (\r\n    <div\r\n      css={{   //特意把父div滚动条启动开。`calc(100vh - ${ileapHeight}px)`,   '750px',  注意串里的空格必须要有！\r\n        //关键是靠内容持续增长列表的紧上一级DIV来控制，把这一个div高度撑开，迫使最近的窗口所附属的滚动条启动。\r\n        overflowY: 'scroll',\r\n        height: '100%',\r\n        minHeight: `calc(100vh - 164px)`,\r\n        [theme.mediaQueries.md]: {\r\n          minHeight: `calc(100vh - 164px - ${theme.spaces.lg} - ${theme.spaces.lg})`\r\n        },\r\n        [theme.mediaQueries.xl]: {\r\n          minHeight: `calc(100vh - 164px - ${theme.spaces.xl} - ${theme.spaces.xl})`\r\n        },\r\n      }}\r\n    >\r\n      <ReportStarter id={id}  source={source} template={template}/>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default TemplateMain;\r\n","D:\\home\\sei\\front-end\\src\\device\\task\\IspEntrance.tsx",["582","583"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  useTheme,\r\n  LayerLoading,\r\n  Text,\r\n  Button,\r\n  IconTruck,\r\n  IconArrowRight,\r\n  Navbar,\r\n  Toolbar,\r\n  IconButton,\r\n  IconArrowLeft,\r\n  ResponsivePopover,\r\n  MenuList, MenuItem, IconMoreVertical\r\n} from \"customize-easy-ui-component\";\r\nimport {  useLookIspOfDevTask } from \"./db\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport { Link as RouterLink, useLocation } from \"wouter\";\r\nimport { TransparentInput } from \"../../comp/base\";\r\n\r\n//[HOOK限制]按钮点击函数内部直接上toast()或toaster.notify()很可能无法正常显示。而放在函数组件顶层render代码前却能正常。\r\n\r\ninterface IspEntranceProps {\r\n  params?:any;   //上级路由器传入的参数。\r\n}\r\n//[我的任务列表]底下某设备去点击，首先要到这：\"/device/:id/task/:taskId\"路由来的；　然後setLocation再次路由。\r\nexport const IspEntrance: React.FunctionComponent<IspEntranceProps> = ({\r\n  params: { id:devId, taskId},      //来自上级<Route path={\"/device/:id/addTask\"} />路由器给的:id。\r\n}) => {\r\n  const theme = useTheme();\r\n  const [, setLocation] = useLocation();\r\n\r\n  let filtercomp={ dev:devId ,task:taskId};\r\n  const {loading, error, item } =useLookIspOfDevTask(filtercomp);\r\n  console.log(\"早就跳转页面逻辑错误 devId:\", devId,\";task=\", taskId, \"ISP=\",item,\"loading=\",loading,\"error=\",error);\r\n\r\n  //加载数据后立刻跳转，重定向操作。 要么直接去ISP页面；  要么先去派工吧。\r\n  //用useEffect跳转setLocation，操之过急！，useLookIspOfDevTask后面数据还会更新的，可是这里却早早就跳转页面了，所以逻辑错误！\r\n  //useLookIspOfDevTask实际查询后端比cache慢了1节拍要多一次render，若是cache也算数的立刻setLocation跳转，导致后端查询结果被遗弃，都无法更新cache了。\r\n  React.useEffect(() => {\r\n    if(!loading && !error){\r\n      if(!item){\r\n       //setLocation(\"/device/\"+id+\"/task/\"+taskId+\"/dispatch\", true);\r\n       }\r\n      else{\r\n       // setLocation(\"/inspect/\" + item.id, true) ;\r\n      }\r\n    }\r\n  }, [item, devId, taskId, error ,loading ,setLocation]);\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\",\r\n        }\r\n      }}\r\n    >\r\n      <Helmet title={\"ISP入口\"} />\r\n      <Navbar\r\n        css={{\r\n          zIndex: theme.zIndices.sticky,\r\n          backgroundColor: \"white\",\r\n          boxShadow: theme.shadows.sm,\r\n          position: \"sticky\",\r\n          top: 0,\r\n          [theme.mediaQueries.md]: {\r\n            position: \"static\"\r\n          }\r\n        }}\r\n      >\r\n        <Toolbar\r\n          css={{\r\n            alignItems: \"center\",\r\n            display: \"flex\"\r\n          }}\r\n        >\r\n          <RouterLink to=\"/device\">\r\n            <IconButton  icon={<IconArrowLeft />}\r\n                         noBind\r\n                         variant=\"ghost\"\r\n                         label=\"后退\"\r\n                         size=\"md\"\r\n                         css={{\r\n                           marginRight: theme.spaces.sm,\r\n                           [theme.mediaQueries.md]: {\r\n                             display: \"none\"\r\n                           }\r\n                         }}\r\n            />\r\n          </RouterLink>\r\n            <Text\r\n              css={{\r\n                flex: 1,\r\n                textAlign: \"center\",\r\n                [theme.mediaQueries.md]: {\r\n                  textAlign: \"left\"\r\n                }\r\n              }}\r\n              wrap={false}\r\n              variant=\"h5\"\r\n              gutter={false}\r\n            >\r\n            {item? '发现了': '没找到有'}关联的ISP\r\n            </Text>\r\n          <div\r\n            css={{\r\n              display: 'inline-flex',\r\n            }}\r\n          >\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem onPress={() =>0 }>其它功能</MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <IconButton\r\n                css={{\r\n                  marginLeft: theme.spaces.sm\r\n                }}\r\n                variant=\"ghost\"\r\n                icon={<IconMoreVertical />}\r\n                label=\"菜单\"\r\n              />\r\n            </ResponsivePopover>\r\n          </div>\r\n        </Toolbar>\r\n      </Navbar>\r\n        {!item && <React.Fragment>\r\n          <Text  variant=\"h4\"　css={{ textAlign: 'center' }}>\r\n           设备ID {devId} 任务ID {taskId} 底下还没找到有关联的ISP,请先去派工吧！\r\n          </Text><br/>\r\n          <RouterLink to={\"/device/\"+devId+\"/task/\"+taskId+\"/dispatch\"}>\r\n            <Button\r\n              size=\"lg\" noBind\r\n              intent=\"primary\"\r\n              iconBefore={<IconTruck />}\r\n              iconAfter={<IconArrowRight />}\r\n            >\r\n             得先去派工\r\n            </Button>\r\n          </RouterLink>\r\n        </React.Fragment>\r\n        }\r\n        {item && <React.Fragment>\r\n        <Text  variant=\"h4\"　css={{ textAlign: 'center' }}>\r\n          设备ID {devId} 任务ID {taskId} 底下发现了关联ISP,请看检验详情。\r\n        </Text><br/>\r\n        <RouterLink to={\"/inspect/\"+item.id}>\r\n          <Button\r\n            size=\"lg\" noBind\r\n            intent=\"primary\"\r\n            iconBefore={<IconTruck />}\r\n            iconAfter={<IconArrowRight />}\r\n          >\r\n          查看ISP详情\r\n          </Button>\r\n        </RouterLink>\r\n      </React.Fragment>\r\n      }\r\n      <LayerLoading loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\n","D:\\home\\sei\\front-end\\src\\device\\task\\DispatchIspMen.tsx",["584","585","586","587"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Navbar,\r\n  Toolbar,\r\n  Text,\r\n  Button,\r\n  IconButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useTheme,\r\n  useToast,\r\n  LayerLoading,\r\n  Container,\r\n  ResponsivePopover,\r\n  IconMoreVertical,\r\n  IconArrowLeft,\r\n} from \"customize-easy-ui-component\";\r\nimport {   useDispatchIspMen } from \"./db\";\r\n\r\nimport {Helmet} from \"react-helmet\";\r\nimport { Link as RouterLink } from \"wouter\";\r\nimport { ContainLine, TransparentInput } from \"../../comp/base\";\r\nimport { useSession } from \"../../auth\";\r\n\r\n//[HOOK限制]按钮点击函数内部直接上toast()或toaster.notify()很可能无法正常显示。而放在函数组件顶层render代码前却能正常。\r\n\r\n//const log = debug(\"app:Compose\");\r\n\r\ninterface DispatchIspMenProps {\r\n  defaultTitle?: string;\r\n  defaultImage?: string;\r\n  defaultDescription?: string;\r\n  defaultIngredients?: any[];\r\n  readOnly?: boolean;\r\n  editable?: boolean;\r\n  defaultCredit?: string;\r\n  dt?:any;\r\n  params?:any;   //上级路由器传入的参数。\r\n}\r\n\r\nexport const DispatchIspMen: React.FunctionComponent<DispatchIspMenProps> = ({\r\n  readOnly,\r\n  editable,\r\n  defaultCredit = \"\",\r\n  defaultDescription,\r\n  defaultImage,\r\n  defaultIngredients,\r\n  defaultTitle = \"\",\r\n  dt=null,\r\n  params: { id, taskId},      //来自上级<Route path={\"/device/:id/addTask\"} />路由器给的:id。\r\n}) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  //const ref = React.useRef(null);\r\n  const {user,} = useSession();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [editing, setEditing] = React.useState(!readOnly);\r\n  const [content, ] = React.useState(() => {\r\n    return defaultDescription\r\n      ? ''\r\n      : null;\r\n  });\r\n  const [image, ] = React.useState(defaultImage);\r\n  const [title, setTitle] = React.useState(defaultTitle);\r\n  const [credit, ] = React.useState(defaultCredit);\r\n  //ingredients 原来是[]数组，改成对象。ingredients.length无定义了。\r\n  console.log(\"来React.useruseState=\"+ JSON.stringify(title) +\",user=\",user);\r\n  const [ingredients, setIngredients] = React.useState<any>( dt||{ispMen: user.username} );\r\n  //const [, setLocation] = useLocation();\r\n\r\n\r\n  const {result, submit:updateFunc, error:updateError, } = useDispatchIspMen({\r\n    task: taskId,\r\n    dev: id, username:ingredients && ingredients.ispMen,\r\n    });\r\n  console.log(\"AddToTask页面刷新 router-ID:\", id,\",dt=,\",dt,\";ingredients=\", ingredients);\r\n\r\n  //不能在这点击触发函数内部执行HOOKs!! 必须上移动外移到 界面组件的头部初始化hooks，随后点击触发调用hook钩子函数。\r\n  async function updateRecipe(\r\n    id: string\r\n  ) {\r\n    let yes= result && result.id;\r\n    console.log(\"生成任务－更新: %s\", id, yes);\r\n    setLoading(true);\r\n    try {\r\n      //这里放HOOK()报错＝Hooks can only be called inside of the body of a function component.\r\n      //考虑封装适配不同类型的接口，不采用这种：\r\n      //const {data: { buildTask: some }} = await updateFunc();\r\n      await updateFunc();\r\n      //等待后端服务器处理完成才能继续运行下面的代码。可长时间等待，挂着页面10分钟都允许。\r\n       setEditing(false);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      //这里先要setLoading(),还有err.message而非err；否则很可能也能导致？setMessage:toast()显示异常。\r\n      setLoading(false);\r\n      toast({\r\n        title: \"后端请求错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      //很多错误是在这里捕获的。\r\n      console.log(\"useAddToTask返回 捕获err\", err);\r\n    }\r\n    //这里无法获得result值，就算所在组件顶层已经获得result值，这里可能还是await () 前那样null;\r\n     console.log(\"生成任务返回了＝\", result,\"yes=\", yes);\r\n    toast({\r\n      title: \"派工返回了\",\r\n      subtitle: '新ISP的ID＝'+result?.id,\r\n      intent: \"info\"\r\n    });\r\n    //除非用const {data: { buildTask: some }} = await updateFunc()捕捉当前操作结果; 否则这时这地方只能用旧的result,点击函数里获取不到最新结果。\r\n    //须用其它机制，切换界面setXXX(标记),result？():();设置新的URL转场页面, 结果要在点击函数外面/组件顶层获得；组件根据操作结果切换页面/链接。\r\n  }\r\n\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\",\r\n        }\r\n      }}\r\n    >\r\n      <Helmet title={result ? '有结果了' : \"新增任务\"} />\r\n      <Navbar\r\n        css={{\r\n          zIndex: theme.zIndices.sticky,\r\n          backgroundColor: \"white\",\r\n          boxShadow: theme.shadows.sm,\r\n          position: \"sticky\",\r\n          top: 0,\r\n          [theme.mediaQueries.md]: {\r\n            position: \"static\"\r\n          }\r\n        }}\r\n      >\r\n        <Toolbar\r\n          css={{\r\n            alignItems: \"center\",\r\n            display: \"flex\"\r\n          }}\r\n        >\r\n          <RouterLink to=\"/device\">\r\n            <IconButton  icon={<IconArrowLeft />}\r\n                         noBind\r\n                         variant=\"ghost\"\r\n                         label=\"后退\"\r\n                         size=\"md\"\r\n                         css={{\r\n                           marginRight: theme.spaces.sm,\r\n                           [theme.mediaQueries.md]: {\r\n                             display: \"none\"\r\n                           }\r\n                         }}\r\n            />\r\n          </RouterLink>\r\n          {editing ? (\r\n            <div css={{ marginLeft: \"-0.75rem\", flex: 1 }}>\r\n              <TransparentInput\r\n                autoComplete=\"off\"\r\n                autoFocus\r\n                inputSize=\"lg\"\r\n                value={title}\r\n                placeholder=\"把任务派给某个检验员\"\r\n                aria-label=\"Recipe title\"\r\n                onChange={e => {\r\n                  setTitle(e.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <Text\r\n              css={{\r\n                flex: 1,\r\n                textAlign: \"center\",\r\n                [theme.mediaQueries.md]: {\r\n                  textAlign: \"left\"\r\n                }\r\n              }}\r\n              wrap={false}\r\n              variant=\"h5\"\r\n              gutter={false}\r\n            >\r\n              { updateError?  '派工任务失败了':\r\n                 '您已将该任务派工给检验员 '\r\n              }\r\n            </Text>\r\n          )}\r\n          <div\r\n            css={{\r\n            display: 'inline-flex',\r\n          }}\r\n          >\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem\r\n                    onPress={() => {\r\n                      setEditing(true);\r\n                    }}\r\n                  >\r\n                    编辑\r\n                  </MenuItem>\r\n                  <MenuItem onPress={() => null }>删除</MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <IconButton\r\n                css={{\r\n                  display: !editing && editable ? undefined : \"none\",\r\n                  marginLeft: theme.spaces.sm\r\n                }}\r\n                variant=\"ghost\"\r\n                icon={<IconMoreVertical />}\r\n                label=\"显示菜单\"\r\n              />\r\n            </ResponsivePopover>\r\n\r\n            {editing && id && (\r\n              <Button\r\n                variant=\"ghost\"\r\n                css={{  //小屏这个按钮没有存在价值，顶条左角的后退就可以。\r\n                  //display: \"none\",\r\n                  [theme.mediaQueries.md]: {\r\n                    display: \"inline-flex\"\r\n                  },\r\n                  marginLeft: theme.spaces.sm\r\n                }}\r\n                onPress={() => setEditing(false)}\r\n              >\r\n                取消\r\n              </Button>\r\n            )}\r\n            {editing && (\r\n              <Button\r\n                intent=\"primary\"\r\n                disabled={loading}\r\n                css={{ marginLeft: theme.spaces.sm }}\r\n                onPress={() => {\r\n                  if(id) updateRecipe(id);\r\n                }}\r\n               >\r\n                把设备任务派工给该检验员\r\n               </Button>\r\n            )}\r\n          </div>\r\n        </Toolbar>\r\n      </Navbar>\r\n\r\n      <div\r\n        css={{  //控制小屏时的导航条底下的整个页面滚动。\r\n          flex: 1,\r\n          //minHeight: '100vh',\r\n          [theme.mediaQueries.md]: {\r\n            //flex: \"none\",\r\n            //minHeight: \"unset\",\r\n           // minHeight:'unset',\r\n            height: \"auto\",\r\n            display: \"block\",\r\n          }\r\n        }}\r\n      >\r\n        <div>\r\n\r\n          <Container>\r\n            <div\r\n              css={{\r\n                display: 'flex',\r\n                alignItems:'center',\r\n                justifyContent:'center',\r\n                minHeight: '85vh',\r\n                [theme.mediaQueries.md]: {\r\n                  paddingTop: theme.spaces.lg,\r\n                  paddingBottom: theme.spaces.lg,\r\n                  minHeight:'unset',\r\n                }\r\n              }}\r\n            >\r\n              {ingredients && (\r\n                <div\r\n                  css={{\r\n                  width:'100%',\r\n                }}\r\n                >\r\n                  <Text variant=\"h5\">任务派工向导</Text>\r\n                    <Text\r\n                      css={{\r\n                        flex: 1,\r\n                        textAlign: \"center\",\r\n                        [theme.mediaQueries.md]: {\r\n                          textAlign: \"left\"\r\n                        }\r\n                      }}\r\n                      wrap={true}\r\n                      variant=\"h6\"\r\n                      gutter={false}\r\n                    >\r\n                      填检验员账号，以 ,号 来分割多个人, 选择方式：开发中。  敬请期待。\r\n                    </Text>\r\n                    <hr/>\r\n                      <div key={1}>\r\n                        {editing ? (\r\n                        <div>\r\n                          <ContainLine display={'检验员'}>\r\n                              <TransparentInput\r\n                                autoFocus={true}\r\n                                placeholder=\"填检验员账号, 以后选择方式。\"\r\n                                value={ingredients.ispMen}\r\n                                onChange={e => {\r\n                                  setIngredients( {\r\n                                    ...ingredients,\r\n                                    ispMen: e.target.value\r\n                                  });\r\n                                }}\r\n                              />\r\n                          </ContainLine>\r\n\r\n                        </div>\r\n                        ) :\r\n                          result && <Text\r\n                            css={{\r\n                              flex: 1,\r\n                              textAlign: \"center\",\r\n                              [theme.mediaQueries.md]: {\r\n                                textAlign: \"left\"\r\n                              }\r\n                            }}\r\n                            wrap={false}\r\n                            variant=\"h4\"\r\n                            gutter={false}\r\n                          >\r\n                            派工结果，得到检验号：{result?.id} 。\r\n                          </Text>\r\n                        }\r\n                      </div>\r\n                </div>\r\n              )}\r\n\r\n\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n      <LayerLoading loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\n","D:\\home\\sei\\front-end\\src\\device\\task\\TaskList.tsx",["588","589"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {  usePaginateQueryTask } from \"./db\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  Avatar,\r\n  IconButton,\r\n  Popover,\r\n  MenuList,\r\n  Stack,\r\n  MenuItem,\r\n  Text,\r\n  useTheme,\r\n  IconChevronRight,\r\n  IconMoreVertical,\r\n  StackTitle,\r\n  Skeleton\r\n} from \"customize-easy-ui-component\";\r\n\r\n//import { useSession } from \"../../auth\";\r\n//import find from \"lodash.find\";\r\n\r\n\r\n\r\nimport { StackItem,  } from \"react-gesture-stack\";\r\n//只能在内容的顶部下拉，才能触发的，还是需要快捷的按钮。\r\nimport { PullDownContent, PullToRefresh, RefreshContent, ReleaseContent } from \"react-js-pull-to-refresh\";\r\nimport { BoundDevices } from \"./BoundDevices\";\r\n\r\n\r\n\r\n\r\n//接口参数类型\r\ninterface ResponseLikeAlgoliasearch<T=any> {\r\n  hits: T[];\r\n  //processingTimeMS: number;\r\n}\r\n\r\nexport interface FollowingListProps {}\r\n//检验任务列表的主窗口\r\nexport const TaskList: React.FunctionComponent<\r\n  FollowingListProps\r\n> = props => {\r\n  const theme = useTheme();\r\n  //const toast = useToast();\r\n  //graphQl的查询usexxx钩子函数，无法主动从后端读取最新数据。\r\n\r\n  const { loading, items:tasks , refetch} = usePaginateQueryTask(null);\r\n  //搜索user的输入:\r\n  const [query, ] = React.useState(\"\");\r\n  /*const [\r\n    queryResults,\r\n    setQueryResults\r\n  ] = React.useState<ResponseLikeAlgoliasearch | null>(null);\r\n*/\r\n  //状态管理　relation＝当前显示的或者按钮点击事件产生,关注的user是谁。\r\n  const [relation, setRelation] = React.useState(null);\r\n  //console.log(\"来看当前的relation=\",relation );\r\n//  const { userList:sucessFollow ,submitfunc:requestFollow } = useRequestFollow(user, relation||{});\r\n  //钩子函数必须放在组件代码顶部，不能放置在逻辑条件分子语句内部，要确保都能调用到钩子函数。\r\n//  const { result:sucessDelFollow ,submitfunc:deleteRequestFollow } = useDeleteRequestFollow(relation && relation.id);\r\n\r\n  const [, setFilter] = React.useState({where:\r\n        {cod:query },\r\n     });\r\n\r\n/*  const {\r\n    loading: loadingUser,\r\n    loadingError,\r\n    items: usersFind,\r\n    loadMore\r\n  } =usePaginateQueryUser(filter);\r\n*/\r\n\r\n/*  async function inviteUser(otherUser: any) {\r\n    try {\r\n      setRelation(otherUser);\r\n      log(\"otherUser: %o\", otherUser);\r\n      //await requestFollow(user, otherUser);\r\n      await requestFollow( otherUser);\r\n      toast({\r\n        title: `A request has been sent to ${otherUser.displayName ||\r\n          otherUser.email}`,\r\n        intent: \"success\"\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast({\r\n        title: \"An error occurred while making your request.\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n    }\r\n  }*/\r\n\r\n/*  async function deleteRequest(id: string) {\r\n    try {\r\n      log(\"delete request: %s\", id);\r\n      await deleteRequestFollow();\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast({\r\n        title: \"An error occurred while cancelling your request.\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n    }\r\n  }*/\r\n\r\n  const noUsers = !query && (!tasks || (tasks && tasks.length === 0));\r\n  //界面轮播 setIndex切换显示界面；   //index不是组件外部那一个同名index；\r\n  const [index, setIndex] = React.useState(0);\r\n\r\n\r\n  function unfollow(id: string) {\r\n   // deleteRequest(id);\r\n    console.log(\"点击派工呢？id=\", id);\r\n    setRelation(null);\r\n    setIndex(0);\r\n  }\r\n\r\n  function showRelation(id: any) {\r\n    console.log(\"点击showRelation？id=\", id);\r\n    setRelation(id);\r\n    setIndex(1);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    //console.log(\"伪善setQueryResul02=\" ,query,usersFind);\r\n    let filtercomp={where:\r\n        {cod:query },\r\n      offset:0,\r\n      first:5,\r\n      orderBy: \"useDt\",\r\n      asc: false\r\n    };\r\n    setFilter(filtercomp);\r\n  }, [query]);\r\n  //这两个useEffect的前后顺序不能颠倒，顺序非常重要，后面的依赖于前面的useEffect更新结果。\r\n  //操作UI副作用；要进一步做修正性处理。\r\n  //usersFind=搜索框搜到到的user;\r\n\r\n\r\n  //上面这个副作用必须 加usersFind，否则无法继续处理后端数据带来的必要的UI反馈变化。\r\n  //控件<Stack 是堆叠式的，像导航条；适用同一个模板显示只需上级给下级参数调整的场景。根据上一叠页面选择触发状态relation给下一叠参数来控制下一级显示；更多嵌套很困难。\r\n  return (\r\n    <Stack\r\n      css={{\r\n        height: `calc(100vh - 0.875rem - 2 * 10px - 63px)`,\r\n        [theme.mediaQueries.md]: {\r\n          height: `calc(100vh - 2 * ${theme.spaces.lg} - 0.875rem - 2 * 10px - 71px)`\r\n        },\r\n        [theme.mediaQueries.xl]: {\r\n          height: `calc(100vh - 2 * ${theme.spaces.xl} - 0.875rem - 2 * 10px - 71px)`\r\n        }\r\n      }}\r\n      index={index}\r\n      navHeight={60}\r\n      onIndexChange={i => setIndex(i)}\r\n      items={[\r\n        {\r\n          title: (\r\n            <StackTitle\r\n              backTitle={\"回退吧\"}\r\n              contentAfter={\r\n                (\r\n                  <Popover\r\n                    content={\r\n                      <MenuList>\r\n                        <MenuItem onPress={() => refetch( {} )}>\r\n                          更新任务列表\r\n                        </MenuItem>\r\n                      </MenuList>\r\n                    }\r\n                  >\r\n                    <IconButton\r\n                      onPress={e => e.stopPropagation()}\r\n                      variant=\"ghost\"\r\n                      icon={<IconMoreVertical/>}\r\n                      label=\"Options菜单\"\r\n                    />\r\n                  </Popover>\r\n                )\r\n              }\r\n              title={\"当前所有任务单\"}\r\n            />\r\n          ),\r\n          content: (\r\n            <StackItem >\r\n              <div\r\n                css={{\r\n                  overflowY: \"scroll\",\r\n                  height: \"100%\",\r\n                }}\r\n              >\r\n                {!loading && noUsers && (\r\n                  <Text\r\n                    muted\r\n                    css={{\r\n                      fontSize: theme.fontSizes[0],\r\n                      display: \"block\",\r\n                      margin: theme.spaces.lg\r\n                    }}\r\n                  >\r\n                    您还没有任务\r\n                  </Text>\r\n                )}\r\n\r\n                <PullToRefresh\r\n                  pullDownContent={<PullDownContent label={'下拉可即刻刷新内容'}/>}\r\n                  releaseContent={<ReleaseContent label={'够了，放开就能刷新'}/>}\r\n                  refreshContent={<RefreshContent />}\r\n                  pullDownThreshold={120}\r\n                  onRefresh={() => refetch( {} )}\r\n                  triggerHeight={50}\r\n                  backgroundColor=\"white\"\r\n                >\r\n\r\n                <List>\r\n\r\n                  {loading && (\r\n                    <React.Fragment>\r\n                      <ListItem\r\n                        interactive={false}\r\n                        contentBefore={\r\n                          <Skeleton\r\n                            css={{\r\n                              width: \"32px\",\r\n                              height: \"32px\",\r\n                              borderRadius: \"50%\"\r\n                            }}\r\n                          />\r\n                        }\r\n                        primary={<Skeleton css={{ maxWidth: \"160px\" }} />}\r\n                      />\r\n                      <ListItem\r\n                        interactive={false}\r\n                        contentBefore={\r\n                          <Skeleton\r\n                            css={{\r\n                              width: \"32px\",\r\n                              height: \"32px\",\r\n                              borderRadius: \"50%\"\r\n                            }}\r\n                          />\r\n                        }\r\n                        primary={<Skeleton css={{ maxWidth: \"200px\" }} />}\r\n                      />\r\n                    </React.Fragment>\r\n                  )}\r\n\r\n                  {tasks　&&　tasks.map(each => {\r\n                    return (\r\n                      <ListItem\r\n                        key={each.id}\r\n                        interactive={ true}\r\n                        onPress={() =>\r\n                          showRelation( each.id )\r\n                        }\r\n                        contentBefore={\r\n                          <Avatar size=\"sm\"   src={each.status}\r\n                            name={each.id || ('图片' || each.dep)}\r\n                          />\r\n                        }\r\n                        primary={`日期 ${each.date}`}\r\n                        secondary={`状态 ${each.status}` }\r\n                        contentAfter={\r\n                            <IconChevronRight  color={theme.colors.text.muted} aria-hidden/>\r\n                        }\r\n                      >\r\n                        任务号 {each.id}\r\n                      </ListItem>\r\n                    );\r\n                  })}\r\n                </List>\r\n\r\n                </PullToRefresh>\r\n\r\n              </div>\r\n            </StackItem>\r\n          )\r\n        },\r\n        {\r\n          title: (\r\n            <StackTitle\r\n              backTitle={\"回退吧\"}\r\n              contentAfter={\r\n                relation && (\r\n                  <Popover\r\n                    content={\r\n                      <MenuList>\r\n                        <MenuItem onPress={() => unfollow(relation.id)}>\r\n                          派工任务{relation || '？'}给检验员\r\n                        </MenuItem>\r\n                      </MenuList>\r\n                    }\r\n                  >\r\n                    <IconButton\r\n                      onPress={e => e.stopPropagation()}\r\n                      variant=\"ghost\"\r\n                      icon={<IconMoreVertical />}\r\n                      label=\"Options菜单\"\r\n                    />\r\n                  </Popover>\r\n                )\r\n              }\r\n              title={ '该任务'+ (relation?.username||'') +'下挂设备' }\r\n            />\r\n          ),\r\n          content: (\r\n            <StackItem>\r\n              {relation && (\r\n                <BoundDevices key={relation} id={relation} />\r\n              )}\r\n            </StackItem>\r\n          )\r\n        }\r\n      ]}\r\n    />\r\n  );\r\n\r\n};\r\n\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\maintenance\\RecordView.tsx",["590"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,} from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  useTheme,\r\n  Button,Text,\r\n  useToast, LayerLoading,\r\n} from \"customize-easy-ui-component\";\r\n//import {Table, TableBody, TableHead, TableRow, Cell, CCell} from \"../comp/TableExt\";\r\n//import useLocation from \"wouter/use-location\";\r\n\r\nimport { useCommitOriginalData,  } from \"./db\";\r\n\r\n\r\n//import PropTypes from \"prop-types\";\r\n//import { useMeasure } from \"customize-easy-ui-component/esm/Hooks/use-measure\";\r\n//import { safeBind } from \"customize-easy-ui-component/esm/Hooks/compose-bind\";\r\n//import food from \"../images/food.svg\";\r\n//import { Link as RouterLink, useRoute } from \"wouter\";\r\n\r\nimport {\r\n  InternalItemHandResult,\r\n  TemplateViewProps,\r\n} from \"./comp/base\";\r\nimport { useThrottle } from \"../hooks/useHelpers\";\r\n\r\ninterface RecordViewProps {\r\n  inp: any;\r\n  printing?: boolean;\r\n  showAll?: boolean;\r\n  template: React.ReactElement<React.ForwardRefRenderFunction<InternalItemHandResult,TemplateViewProps>>;\r\n}\r\n//viewAll是否是整个报表都一起显示。\r\n//export default function RecordView({printing, inp}:{printing?:boolean,inp:any },props) {\r\nexport const RecordView: React.FunctionComponent<RecordViewProps> = ({\r\n                                                                       printing,\r\n                                                                       inp,\r\n                                                                       showAll=false,\r\n                                                                       template,\r\n                                                                       ...other\r\n                                                                     }) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  //const [enable, setEnable] = React.useState(true);\r\n  //useState(默认值) ； 后面参数值仅仅在组件的装载时期有起作用，若再次路由RouterLink进入的，它不会依照该新默认值去修改show。useRef跳出Cpature Value带来的限制\r\n  const ref =React.useRef<InternalItemHandResult>(null);\r\n\r\n\r\n  //ref可以共用current指向最新输入过的子组件；但父组件对.current的最新变化无法实时感知，只能被动刷新获知current变动。\r\n  //子组件利用useImperativeHandle机制把数据回传给父组件，配套地父辈用ref来定位子组件。\r\n  //保存按钮点击后必须首先触发template动态加载的子组件即TemplateView的做1次render()后，ref.current.inp才能收到儿孙组件的最新数据。\r\n  const newOut={ ...(ref.current&&ref.current.inp) };\r\n\r\n  //审核保存?对应数据deduction结论栏目＋审核手动修改；适用于出具正式报告，正式报告只读取deduction部分。依据审核保存>随后才是原始记录复检>初检data。\r\n  //若复检保存 ，复检rexm，正检data。\r\n  const {result, submit:updateFunc,loading } = useCommitOriginalData({\r\n    id:227,  operationType:1,\r\n    data:  JSON.stringify(newOut) ,\r\n    deduction:{emergencyElectric:'45,423'}\r\n  });\r\n\r\n  console.log(\"RecordView捕获 ｀｀｀ inp=\", inp);\r\n\r\n  async function updateRecipe(\r\n    id: string ) {\r\n    let yes= result && result.id;\r\n    try {\r\n      //提交给后端， 这里将会引起底层变动，导致本组件即将要render3次。有更新的4次。更新比读取多了1次render。\r\n      await updateFunc();\r\n    } catch (err) {\r\n      toast({\r\n        title: \"后端请求错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      //很多错误是在这里捕获的。\r\n      console.log(\"updateRecipe返回了,捕获err\", err);\r\n      return;\r\n    }\r\n    //这里无法获得result值，就算所在组件顶层已经获得result值，这里可能还是await () 前那样null;\r\n    console.log(\"生成任务返回了＝\", result,\"yes=\", yes);\r\n    toast({\r\n      title: \"任务返回了\",\r\n      subtitle: '加入，ISP ID＝'+id,\r\n      intent: \"info\"\r\n    });\r\n    //除非用const {data: { buildTask: some }} = await updateFunc()捕捉当前操作结果; 否则这时这地方只能用旧的result,点击函数里获取不到最新结果。\r\n    //须用其它机制，切换界面setXXX(标记),result？():();设置新的URL转场页面, 结果要在点击函数外面/组件顶层获得；组件根据操作结果切换页面/链接。\r\n  }\r\n\r\n  //const throttledUpdateBackend = throttle(updateRecipe,0);\r\n  //延迟30秒才执行的; 可限制频繁操作，若很多下点击的30秒后触发2-3次。\r\n  const {doFunc:throttledUpdateRecipe, ready} = useThrottle(updateRecipe);\r\n  //const throttledUpdateEnable = throttle(setEnable,30000);\r\n  //可是这里return ；将会导致子孙组件都会umount!! 等于重新加载==路由模式刷新一样； 得权衡利弊。\r\n  // if(updating)  return <LayerLoading loading={updating} label={'正在获取后端应答，加载中请稍后'}/>;\r\n  //管道单线图，数量大，图像文件。可仅选定URL，预览图像。但是不全部显示出来，微缩摘要图模式，点击了才你能显示大的原图。\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        //useMemo使用后：各分区项目子组件inp各自独立的，分区项目子组件内若使用setInp(null) 清空重置后，无法靠重新拉取后端数据来保证恢复显示。\r\n        //项目子组件使用setInp(null) 重置后，若上级组件重新取后端数据没变化的，也必须再次路由后再进入才可以让各分区项目子组件render恢复显示数据。\r\n        React.cloneElement(template as React.ReactElement<any>, {\r\n          ref: ref,\r\n          inp: inp,\r\n          showAll: showAll\r\n        })\r\n      }\r\n      <Button\r\n        css={{ marginTop: theme.spaces.md }}\r\n        size=\"lg\"  intent={'warning'}\r\n        disabled ={!ready}\r\n        loading ={loading}\r\n        onPress={ () => {\r\n          //手机上更新模板TemplateView子组件重做render触发失效。只好采用延迟策略，每个分区项目的保存处理前准备，作一次render完了，才能发送数据给后端。\r\n           throttledUpdateRecipe('1');\r\n          //hasResolved&&throttledUpdateRecipe(true);\r\n        }}\r\n      >保存到服务器</Button>\r\n      <LayerLoading loading={loading} />\r\n      <Text  css={{wordWrap: 'break-word'}}>{false && `当前(${JSON.stringify(newOut)})`}</Text>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\n//jsx文件内在组件定义体之外的代码，只执行一次，除非URL刷新重来的。\r\n\r\n//用来显示队列重组排序的；支持按照检验流程图来排列，而打印按照索引标号排列。 不规则序号的可额外编排项目号数。\r\n//登记入该种类子类别的原始记录所有的页面核查的项目列表。按检验步骤流程排序和按报告序号排列方式。\r\n","D:\\home\\sei\\front-end\\src\\maintenance\\Layout.tsx",["591"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, Global } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport { useTheme } from \"customize-easy-ui-component\";\r\nimport cutting_board_knife from '../images/cutting-board-knife.jpg';\r\n//骨架-背景\r\n//各个子网站和子路由的Layout可以分开单独；做不一样的。\r\n\r\nexport interface LayoutProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const Layout: React.FunctionComponent<LayoutProps> = ({ children }) => {\r\n  const theme = useTheme();\r\n  return (\r\n    <React.Fragment>\r\n      <Global\r\n        styles={{\r\n          html: {\r\n            [theme.mediaQueries.lg]: {\r\n              backgroundAttachment: \"fixed\",\r\n              backgroundSize: \"cover\",\r\n              backgroundImage: `url(${cutting_board_knife})`\r\n            }\r\n          }\r\n        }}\r\n      />\r\n      {children}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\inspect\\IspDetail.tsx",["592","593","594","595","596","597","598","599","600","601"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//import debug from \"debug\";\r\nimport {\r\n  Navbar,\r\n  Toolbar,\r\n  Text,\r\n  Button,\r\n  IconButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useTheme,\r\n  useToast,\r\n  LayerLoading,\r\n  Container,\r\n  ResponsivePopover,\r\n  IconMoreVertical,\r\n  IconArrowLeft,\r\n  IconArrowRight, IconPackage, IconTruck, Touchable\r\n} from \"customize-easy-ui-component\";\r\nimport { useAbandonISP, useDispatchIspMen, useIspDetail } from \"./db\";\r\n//import { useSession } from \"../auth\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport { Link as RouterLink, useLocation } from \"wouter\";\r\nimport { ContainLine, TransparentInput } from \"../comp/base\";\r\n\r\n//[HOOK限制]按钮点击函数内部直接上toast()或toaster.notify()很可能无法正常显示。而放在函数组件顶层render代码前却能正常。\r\ninterface IspDetailProps {\r\n  defaultTitle?: string;\r\n  defaultImage?: string;\r\n  defaultDescription?: string;\r\n  defaultIngredients?: any[];\r\n  readOnly?: boolean;\r\n  editable?: boolean;\r\n  defaultCredit?: string;\r\n  dt?:any;\r\n  params?:any;   //上级路由器传入的参数。\r\n}\r\n\r\nexport const IspDetail: React.FunctionComponent<IspDetailProps> = ({\r\n  readOnly,\r\n  editable,\r\n  defaultCredit = \"\",\r\n  defaultDescription,\r\n  defaultImage,\r\n  defaultIngredients,\r\n  defaultTitle = \"\",\r\n  dt=null,\r\n  params: { id, taskId},      //来自上级<Route path={\"/device/:id/addTask\"} />路由器给的:id。\r\n}) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  const [, setLocation] = useLocation();\r\n  const [editing, setEditing] = React.useState(!readOnly);\r\n  const [content, ] = React.useState(() => {\r\n    return defaultDescription\r\n      ? ''\r\n      : null;\r\n  });\r\n  const [image, ] = React.useState(defaultImage);\r\n  const [title, setTitle] = React.useState(defaultTitle);\r\n\r\n  const [credit, ] = React.useState(defaultCredit);\r\n\r\n  let filtercomp={\r\n    id: id,\r\n  };\r\n  const { loading, items:isp , } = useIspDetail(filtercomp);\r\n  const [ingredients, setIngredients] = React.useState<any>( isp||{} );\r\n\r\n  const {result, submit:updateFunc, } = useAbandonISP({\r\n    ispId: id, reason:'测试期直接删'\r\n  });\r\n\r\n  console.log(\"IspDetail页面刷新 router-IDispId:\", id,\",taskId=,\",taskId,\";ingredients=\", ingredients);\r\n\r\n  async function handleDelete(id: string) {\r\n    try {\r\n      await updateFunc();\r\n    } catch (err) {\r\n      toast({\r\n        title: \"后端报错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      return;\r\n    }\r\n    //直接跳轉導致 更新丟失？任務頁面無法知曉 已經查詢的query getISP($id: ID!)應答。\r\n    //setLocation(\"/inspect/\", true);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    setIngredients( isp||{} );\r\n  }, [isp]);\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\",\r\n        }\r\n      }}\r\n    >\r\n      <Helmet title={result ? '有结果了' : \"新增任务\"} />\r\n      <Navbar\r\n        css={{\r\n          zIndex: theme.zIndices.sticky,\r\n          backgroundColor: \"white\",\r\n          boxShadow: theme.shadows.sm,\r\n          position: \"sticky\",\r\n          top: 0,\r\n          [theme.mediaQueries.md]: {\r\n            position: \"static\"\r\n          }\r\n        }}\r\n      >\r\n        <Toolbar\r\n          css={{\r\n            alignItems: \"center\",\r\n            display: \"flex\"\r\n          }}\r\n        >\r\n          <RouterLink   to=\"/inspect/\">\r\n            <IconButton\r\n              icon={<IconArrowLeft />}\r\n              label=\"后退\"\r\n              variant=\"ghost\"\r\n              css={{\r\n                marginRight: theme.spaces.sm,\r\n                [theme.mediaQueries.md]: {\r\n                  display: \"none\"     //大屏不需要\r\n                }\r\n              }}\r\n            />\r\n          </RouterLink>\r\n            <Text\r\n              css={{\r\n                flex: 1,\r\n                textAlign: \"center\",\r\n                [theme.mediaQueries.md]: {\r\n                  textAlign: \"left\"\r\n                }\r\n              }}\r\n              wrap={false}\r\n              variant=\"h5\"\r\n              gutter={false}\r\n            >\r\n             检验号{id}详情向导\r\n            </Text>\r\n          <div\r\n            css={{\r\n            display: 'inline-flex',\r\n          }}\r\n          >\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem contentBefore={<IconPackage />} >\r\n                    <RouterLink to={`/inspect/${id}/addReport/choose`}>\r\n                      <Touchable component={'div'} css={{paddingLeft: theme.spaces.md}}>\r\n                        增加个检验报告\r\n                      </Touchable>\r\n                    </RouterLink>\r\n                  </MenuItem>\r\n                  <MenuItem onPress={() => {\r\n                     handleDelete(id)\r\n                  }\r\n                  }>放弃这次ISP检验号\r\n                  </MenuItem>\r\n                  <MenuItem onPress={() => null }>检验终结流程</MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <IconButton\r\n                css={{\r\n                  //display: !editing && editable ? undefined : \"none\",\r\n                  marginLeft: theme.spaces.sm\r\n                }}\r\n                variant=\"ghost\"\r\n                icon={<IconMoreVertical />}\r\n                label=\"菜单\"\r\n              />\r\n            </ResponsivePopover>\r\n          </div>\r\n        </Toolbar>\r\n      </Navbar>\r\n      { isp &&\r\n        <div\r\n        css={{  //控制小屏时的导航条底下的整个页面滚动。\r\n          flex: 1,\r\n          //minHeight: '100vh',\r\n          [theme.mediaQueries.md]: {\r\n            //flex: \"none\",\r\n            //minHeight: \"unset\",\r\n           // minHeight:'unset',\r\n            height: \"auto\",\r\n            display: \"block\",\r\n          }\r\n        }}\r\n      >\r\n        <div>\r\n\r\n          <Container>\r\n            <div\r\n              css={{\r\n                display: 'flex',\r\n                alignItems:'center',\r\n                justifyContent:'center',\r\n                minHeight: '85vh',\r\n                [theme.mediaQueries.md]: {\r\n                  paddingTop: theme.spaces.lg,\r\n                  paddingBottom: theme.spaces.lg,\r\n                  minHeight:'unset',\r\n                }\r\n              }}\r\n            >\r\n              {ingredients && (\r\n                <div\r\n                  css={{\r\n                  width:'100%',\r\n                }}\r\n                >\r\n                  <Text variant=\"h5\">该次检验的基本概况</Text>\r\n                      <div key={1}>\r\n                        <ContainLine display={'设备号'}>\r\n                          <TransparentInput  readOnly\r\n                            value={ (ingredients.dev||{}).cod ||'' }\r\n                          />\r\n                        </ContainLine>\r\n                        <ContainLine display={'任务号'}>\r\n                          <TransparentInput readOnly value={ ingredients?.task?.id ||'' }/>\r\n                        </ContainLine>\r\n                        <ContainLine display={'任务日期'}>\r\n                          <TransparentInput readOnly value={ ingredients?.task?.date ||'' }/>\r\n                        </ContainLine>\r\n                        <ContainLine display={'任务状态'}>\r\n                          <TransparentInput readOnly value={ ingredients?.task?.status ||'' }/>\r\n                        </ContainLine>\r\n                        <div>\r\n                         <ContainLine display={'审核人'}>\r\n                            <TransparentInput\r\n                              autoFocus={true}\r\n                              readOnly\r\n                              placeholder=\"审核人\"\r\n                              value={ingredients.checkMen?.username||''}\r\n                              onChange={e => {\r\n                                setIngredients( {\r\n                                  ...ingredients,\r\n                                  ispMen: e.target.value\r\n                                });\r\n                              }}\r\n                            />\r\n                          </ContainLine>\r\n                          <ContainLine display={'检验人名单'}>\r\n                            <Text  placeholder=\"所有参与检验人\"\r\n                                   css={{\r\n                                     display: 'block',\r\n                                     width: '100%',\r\n                                   }}\r\n                            >\r\n                             {ingredients.ispMen && ingredients.ispMen.map((one,i) => {\r\n                               return (\r\n                                 <RouterLink key={i}  to=\"/inspect/\">\r\n                                   <Button\r\n                                     size=\"md\"\r\n                                     variant=\"ghost\"\r\n                                     intent=\"none\"\r\n                                     iconAfter={<IconArrowRight />}\r\n                                   >{one.username}\r\n                                   </Button>\r\n                                 </RouterLink>\r\n                               )\r\n                              } )}\r\n                            </Text>\r\n                          </ContainLine>\r\n                          <ContainLine display={'下检日期'}>\r\n                            <TransparentInput\r\n                              autoFocus={true}\r\n                              readOnly\r\n                              placeholder=\"输入日期格式2019-08-03\"\r\n                              value={ingredients.nextIspDate||''}\r\n                              onChange={e => {\r\n                                setIngredients( {\r\n                                  ...ingredients,\r\n                                  date: e.target.value\r\n                                });\r\n                              }}\r\n                            />\r\n                          </ContainLine>\r\n                        </div>\r\n\r\n                      </div>\r\n\r\n\r\n                </div>\r\n              )}\r\n\r\n\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n      }\r\n      {!isp && <React.Fragment>\r\n          <Text  variant=\"h4\"　css={{ textAlign: 'center' }}>\r\n            没找到该ISP,请刷新\r\n          </Text><br/>\r\n            <RouterLink to=\"/inspect/\">\r\n              <Button\r\n                size=\"lg\" noBind\r\n                intent=\"primary\"\r\n                iconBefore={<IconTruck />}\r\n                iconAfter={<IconArrowRight />}\r\n              >\r\n                后退刷新\r\n              </Button>\r\n            </RouterLink>\r\n          </React.Fragment>\r\n      }\r\n      <LayerLoading loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\n","D:\\home\\sei\\front-end\\src\\inspect\\ReportSample.tsx",["602","603","604","605","606","607","608","609","610","611","612","613","614"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//import debug from \"debug\";\r\nimport {\r\n  Navbar,\r\n  Toolbar,\r\n  Text,\r\n  Button,\r\n  IconButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useTheme,\r\n  useToast,\r\n  LayerLoading,\r\n  Container,\r\n  ResponsivePopover,\r\n  IconMoreVertical,\r\n  IconArrowLeft, IconArrowRight,\r\n} from \"customize-easy-ui-component\";\r\nimport {  useDispatchIspMen,  useReport } from \"./db\";\r\n//import { useSession } from \"../auth\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport { Link as RouterLink, Link, Route, Switch } from \"wouter\";\r\nimport { ContainLine, TransparentInput } from \"../comp/base\";\r\nimport { useCommitOriginalData, useQueryOriginalRecord } from \"../report/db\";\r\n\r\n//[HOOK限制]按钮点击函数内部直接上toast()或toaster.notify()很可能无法正常显示。而放在函数组件顶层render代码前却能正常。\r\n\r\n//const log = debug(\"app:Compose\");\r\n\r\nexport interface ComposeProps {\r\n  //id?: string;\r\n  defaultTitle?: string;\r\n  defaultImage?: string;\r\n  defaultDescription?: string;\r\n  defaultIngredients?: any[];\r\n  readOnly?: boolean;\r\n  editable?: boolean;\r\n  defaultCredit?: string;\r\n  dt?:any;\r\n  params?:any;   //上级路由器传入的参数。\r\n}\r\n\r\nexport const ReportSample: React.FunctionComponent<ComposeProps> = ({\r\n  readOnly,\r\n  editable,\r\n  defaultCredit = \"\",\r\n  defaultDescription,\r\n  defaultImage,\r\n  defaultIngredients,\r\n  defaultTitle = \"\",\r\n  dt=null,\r\n  params: { id, repId},      //来自上级<Route path={\"/device/:id/addTask\"} />路由器给的:id。\r\n}) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  const [editing, setEditing] = React.useState(!readOnly);\r\n  const [content, ] = React.useState(() => {\r\n    return defaultDescription\r\n      ? ''\r\n      : null;\r\n  });\r\n  const [image, ] = React.useState(defaultImage);\r\n  const [title, setTitle] = React.useState(defaultTitle);\r\n  const [credit, ] = React.useState(defaultCredit);\r\n\r\n  let filtercomp={\r\n    id: repId,\r\n  };\r\n  const {error, loading, items:rep, } = useReport(filtercomp);\r\n  const [ingredients, setIngredients] = React.useState<any>( rep||{} );\r\n\r\n  React.useEffect(() => {\r\n    setIngredients( rep||{} );\r\n  }, [rep]);\r\n\r\n  if(error) return  <h1>没有该报告内容？</h1>\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\",\r\n        }\r\n      }}\r\n    >\r\n      <Helmet title={ \"新增报告\"} />\r\n      <Navbar\r\n        css={{\r\n          zIndex: theme.zIndices.sticky,\r\n          backgroundColor: \"white\",\r\n          boxShadow: theme.shadows.sm,\r\n          position: \"sticky\",\r\n          top: 0,\r\n          [theme.mediaQueries.md]: {\r\n            position: \"static\"\r\n          }\r\n        }}\r\n      >\r\n        <Toolbar\r\n          css={{\r\n            alignItems: \"center\",\r\n            display: \"flex\"\r\n          }}\r\n        >\r\n          <RouterLink to=\"/inspect\">\r\n            <IconButton  icon={<IconArrowLeft />}\r\n                         noBind\r\n                         variant=\"ghost\"\r\n                         label=\"后退\"\r\n                         size=\"md\"\r\n                         css={{\r\n                           marginRight: theme.spaces.sm,\r\n                           [theme.mediaQueries.md]: {\r\n                             display: \"none\"\r\n                           }\r\n                         }}\r\n            />\r\n          </RouterLink>\r\n          {!editing ? (\r\n            <div css={{ marginLeft: \"-0.75rem\", flex: 1 }}>\r\n              <TransparentInput\r\n                autoComplete=\"off\"\r\n                autoFocus\r\n                inputSize=\"lg\"\r\n                value={title}\r\n                placeholder=\"报告的详细可打印信息\"\r\n                aria-label=\"Recipe title\"\r\n                onChange={e => {\r\n                  setTitle(e.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <Text\r\n              css={{\r\n                flex: 1,\r\n                textAlign: \"center\",\r\n                [theme.mediaQueries.md]: {\r\n                  textAlign: \"left\"\r\n                }\r\n              }}\r\n              wrap={false}\r\n              variant=\"h5\"\r\n              gutter={false}\r\n            >\r\n              报告ID号：{repId}\r\n            </Text>\r\n          )}\r\n          <div\r\n            css={{\r\n            display: 'inline-flex',\r\n          }}\r\n          >\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem\r\n                    onPress={() => {\r\n                      setEditing(true);\r\n                    }}\r\n                  >\r\n                   功能待续\r\n                  </MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <IconButton\r\n                css={{\r\n                  marginLeft: theme.spaces.sm\r\n                }}\r\n                variant=\"ghost\"\r\n                icon={<IconMoreVertical />}\r\n                label=\"菜单\"\r\n              />\r\n            </ResponsivePopover>\r\n          </div>\r\n        </Toolbar>\r\n      </Navbar>\r\n\r\n      <div\r\n        css={{  //控制小屏时的导航条底下的整个页面滚动。\r\n          flex: 1,\r\n          //minHeight: '100vh',\r\n          [theme.mediaQueries.md]: {\r\n            //flex: \"none\",\r\n            //minHeight: \"unset\",\r\n           // minHeight:'unset',\r\n            height: \"auto\",\r\n            display: \"block\",\r\n          }\r\n        }}\r\n      >\r\n        <div>\r\n\r\n          <Container>\r\n            <div\r\n              css={{\r\n                display: 'flex',\r\n                alignItems:'center',\r\n                justifyContent:'center',\r\n                minHeight: '85vh',\r\n                [theme.mediaQueries.md]: {\r\n                  paddingTop: theme.spaces.lg,\r\n                  paddingBottom: theme.spaces.lg,\r\n                  minHeight:'unset',\r\n                }\r\n              }}\r\n            >\r\n              {ingredients && (\r\n                <div\r\n                  css={{\r\n                  width:'100%',\r\n                }}\r\n                >\r\n                  <ThirdRouterContent id={id} rep={rep}/>\r\n\r\n                  <RouterLink to={`/report/EL-DJ/ver/1/preview/${repId}`}>\r\n                    <Button\r\n                      size=\"lg\" noBind\r\n                      intent=\"primary\"\r\n                      iconAfter={<IconArrowRight />}\r\n                    >\r\n                      查看报告\r\n                    </Button>\r\n                  </RouterLink>\r\n                  {' '}\r\n                  <RouterLink to={`/inspect/${id}/report/${repId}/copy`}>\r\n                    <Button\r\n                      size=\"lg\" noBind\r\n                      intent=\"primary\"\r\n                      iconAfter={<IconArrowRight />}\r\n                    >\r\n                      拷贝原始记录\r\n                    </Button>\r\n                  </RouterLink>\r\n                </div>\r\n              )}\r\n\r\n\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n      <LayerLoading loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface ThirdRouterProps {\r\n  id: string;\r\n  rep: any;\r\n}\r\nfunction ThirdRouterContent({id, rep}: ThirdRouterProps) {\r\n  return (\r\n   <React.Fragment>\r\n    <Switch>\r\n      <Route path=\"/inspect/:id/report/:repId\">\r\n          <FirstPage id={id} rep={rep}/>\r\n      </Route>\r\n      <Route path=\"/inspect/:id/report/:repId/copy\">\r\n          <CopyRecord id={id} rep={rep}/>\r\n      </Route>\r\n    </Switch>\r\n  </React.Fragment>\r\n  );\r\n}\r\n\r\nconst FirstPage= ( {theme=null, id ,rep}\r\n) => {\r\n  const [ingredients, setIngredients] = React.useState<any>( rep||{} );\r\n\r\n  return <React.Fragment>\r\n    <div>\r\n      <Text variant=\"h5\">该份报告的概要信息</Text>\r\n      <ContainLine display={'报告号{对外的}'}>\r\n        <TransparentInput  readOnly value={rep?.no||''}/>\r\n      </ContainLine>\r\n      <ContainLine display={'设备号'}>\r\n        <TransparentInput readOnly value={rep?.isp.dev.cod||''}/>\r\n      </ContainLine>\r\n      <ContainLine display={'检验号'}>\r\n        <TransparentInput\r\n          readOnly\r\n          value={rep?.isp?.id||''}\r\n        />\r\n      </ContainLine>\r\n      <ContainLine display={'任务号'}>\r\n        <TransparentInput\r\n          readOnly\r\n          value={rep?.isp?.task?.id||''}\r\n        />\r\n      </ContainLine>\r\n      <ContainLine display={'报告类型'}>\r\n        <TransparentInput\r\n          autoFocus={true}\r\n          readOnly\r\n          placeholder=\"报告类型\"\r\n          value={ rep && rep.type || ''}\r\n          onChange={e => {\r\n            setIngredients( {\r\n              ...ingredients,\r\n            });\r\n          }}\r\n        />\r\n      </ContainLine>\r\n      <ContainLine display={'检验结论'}>\r\n        <TransparentInput\r\n          autoFocus={true}\r\n          readOnly\r\n          value={rep && rep.isp.conclusion ||''}\r\n          onChange={e => {\r\n            setIngredients( {\r\n              ...ingredients,\r\n              ispMen: e.target.value\r\n            });\r\n          }}\r\n        />\r\n      </ContainLine>\r\n      <ContainLine display={'设备监察识别码'}>\r\n        <Text css={{\r\n                 display: 'block',\r\n                 width: '100%',\r\n               }}\r\n        >\r\n         {rep?.isp.dev.oid}\r\n        </Text>\r\n      </ContainLine>\r\n      <ContainLine display={'报告上传日期'}>\r\n        <TransparentInput\r\n          autoFocus={true}\r\n          readOnly\r\n          placeholder=\"输入日期格式2019-08-03\"\r\n          value={rep?.upLoadDate || ''}\r\n        />\r\n      </ContainLine>\r\n      <ContainLine display={'设备安装地址'}>\r\n        <TransparentInput\r\n          readOnly\r\n          value={rep && rep.isp.dev.pos && rep.isp.dev.pos.address ||''}\r\n        />\r\n      </ContainLine>\r\n    </div>\r\n  </React.Fragment>;\r\n};\r\n\r\nconst CopyRecord= ( { id ,rep}\r\n) => {\r\n  const theme = useTheme();\r\n  const [copyID, setCopyID] = React.useState( '' );\r\n  const [orc, setOrc] = React.useState( null );\r\n  const toast = useToast();\r\n  let filtercomp={ id: copyID };\r\n  const {items, } =useQueryOriginalRecord(filtercomp);\r\n  React.useEffect(() => {\r\n    const  dat =items&&items.data&&JSON.parse(items.data);\r\n    dat && setOrc(dat);\r\n  }, [items, setOrc]);\r\n  //拷贝\r\n  const {result, submit:updateFunc,loading } = useCommitOriginalData({\r\n    id:rep?.id,  operationType:1,\r\n    data:  JSON.stringify(orc) ,\r\n    deduction:{emergencyElectric:'45,423'}\r\n  });\r\n  async function updateRecipe(\r\n    id: string ) {\r\n    //let yes= result && result.id;\r\n    try {\r\n      await updateFunc();\r\n    } catch (err) {\r\n      toast({\r\n        title: \"后端请求错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      console.log(\"updateRecipe返回了,捕获err\", err);\r\n      return;\r\n    }\r\n    toast({\r\n      title: \"任务返回了\",\r\n      subtitle: '加入，ISP ID＝'+id,\r\n      intent: \"info\"\r\n    });\r\n  }\r\n  return <React.Fragment>\r\n    <div>\r\n      <Text variant=\"h5\">想从那一份报告去拷贝原始记录？</Text>\r\n      <ContainLine display={'请输入对方的报告ID'}>\r\n        <TransparentInput\r\n          autoFocus={true}\r\n          placeholder=\"报告ID\"\r\n          value={ copyID }\r\n          onChange={e => setCopyID( e.currentTarget.value) }\r\n        />\r\n      </ContainLine>\r\n      <Text variant=\"h5\">该份报告简要：{orc?.检验结论}</Text>\r\n      <Button\r\n        css={{ marginTop: theme.spaces.md }}\r\n        size=\"lg\"  intent={'warning'}\r\n        disabled ={loading}\r\n        loading ={loading}\r\n        onPress={ ()=>updateRecipe('1') }\r\n      >拷贝并保存</Button>\r\n      { result &&\r\n        <Text variant=\"h5\">拷贝结果：报告ID {result.id}; 模板类型 {result.modeltype}</Text>\r\n      }\r\n    </div>\r\n  </React.Fragment>;\r\n};\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\inspect\\report\\AddReport.tsx",["615","616","617","618","619","620","621","622","623"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, css } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Navbar,\r\n  Toolbar,\r\n  Text,\r\n  Button,\r\n  IconButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useTheme,\r\n  useToast,\r\n  LayerLoading,\r\n  Container,\r\n  ResponsivePopover,\r\n  IconMoreVertical,\r\n  IconArrowLeft, IconArrowRight, Select\r\n} from \"customize-easy-ui-component\";\r\nimport {  useDispatchIspMen,  useReport } from \"../db\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport { Link as RouterLink,  Route, Switch } from \"wouter\";\r\nimport { ContainLine, TransparentInput } from \"../../comp/base\";\r\nimport { useCommitOriginalData, useQueryOriginalRecord } from \"../../report/db\";\r\nimport { useNewReport } from \"./db\";\r\n\r\ninterface AddReportProps {\r\n  defaultTitle?: string;\r\n  defaultImage?: string;\r\n  defaultDescription?: string;\r\n  defaultIngredients?: any[];\r\n  readOnly?: boolean;\r\n  editable?: boolean;\r\n  defaultCredit?: string;\r\n  dt?:any;\r\n  params?:any;   //上级路由器传入的参数。\r\n}\r\n\r\nexport const AddReport: React.FunctionComponent<AddReportProps> = ({\r\n  readOnly,\r\n  editable,\r\n  defaultCredit = \"\",\r\n  defaultDescription,\r\n  defaultImage,\r\n  defaultIngredients,\r\n  defaultTitle = \"\",\r\n  dt=null,\r\n  params: { id, repId},      //来自上级<Route path={\"/device/:id/addTask\"} />路由器给的:id。\r\n}) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  const ispId =id;\r\n  const [editing, setEditing] = React.useState(!readOnly);\r\n  const [content, ] = React.useState(() => {\r\n    return defaultDescription\r\n      ? ''\r\n      : null;\r\n  });\r\n  const [image, ] = React.useState(defaultImage);\r\n  const [title, setTitle] = React.useState(defaultTitle);\r\n  const [credit, ] = React.useState(defaultCredit);\r\n  let filtercomp={\r\n    id: 2,\r\n  };\r\n  const {error, loading, items:rep , } = useReport(filtercomp);\r\n  const [ingredients, setIngredients] = React.useState<any>( rep||{} );\r\n\r\n  const {result, submit:updateFunc, } = useDispatchIspMen({\r\n    task: repId,\r\n    dev: id, username:ingredients && ingredients.ispMen,\r\n    });\r\n  console.log(\"AddReport来呢\", id,\",repId=\",repId,\";ingredients=\", ingredients);\r\n\r\n\r\n  //不能在这点击触发函数内部执行HOOKs!! 必须上移动外移到 界面组件的头部初始化hooks，随后点击触发调用hook钩子函数。\r\n  async function updateRecipe(id: string)\r\n  {\r\n    try {\r\n      await updateFunc();\r\n    } catch (err) {\r\n      toast({\r\n        title: \"后端请求错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n    }\r\n    toast({\r\n      title: \"任务返回了\",\r\n      subtitle: '加入，ISP ID＝'+id,\r\n      intent: \"info\"\r\n    });\r\n  }\r\n\r\n\r\n  React.useEffect(() => {\r\n    setIngredients( rep||{} );\r\n  }, [rep]);\r\n\r\n  //if(error) return  <h1>没有该容？</h1>\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\",\r\n        }\r\n      }}\r\n    >\r\n      <Helmet title={result ? '有结果了' : \"新增任务\"} />\r\n      <Navbar\r\n        css={{\r\n          zIndex: theme.zIndices.sticky,\r\n          backgroundColor: \"white\",\r\n          boxShadow: theme.shadows.sm,\r\n          position: \"sticky\",\r\n          top: 0,\r\n          [theme.mediaQueries.md]: {\r\n            position: \"static\"\r\n          }\r\n        }}\r\n      >\r\n        <Toolbar\r\n          css={{\r\n            alignItems: \"center\",\r\n            display: \"flex\"\r\n          }}\r\n        >\r\n          <RouterLink to=\"/inspect\">\r\n            <IconButton  icon={<IconArrowLeft />}\r\n                         noBind\r\n                         variant=\"ghost\"\r\n                         label=\"后退\"\r\n                         size=\"md\"\r\n                         css={{\r\n                           marginRight: theme.spaces.sm,\r\n                           [theme.mediaQueries.md]: {\r\n                             display: \"none\"\r\n                           }\r\n                         }}\r\n            />\r\n          </RouterLink>\r\n          {!editing ? (\r\n            <div css={{ marginLeft: \"-0.75rem\", flex: 1 }}>\r\n              <TransparentInput\r\n                autoComplete=\"off\"\r\n                autoFocus\r\n                inputSize=\"lg\"\r\n                value={title}\r\n                placeholder=\"报告的详细可打印信息\"\r\n                aria-label=\"Recipe title\"\r\n                onChange={e => {\r\n                  setTitle(e.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <Text\r\n              css={{\r\n                flex: 1,\r\n                textAlign: \"center\",\r\n                [theme.mediaQueries.md]: {\r\n                  textAlign: \"left\"\r\n                }\r\n              }}\r\n              wrap={false}\r\n              variant=\"h5\"\r\n              gutter={false}\r\n            >\r\n            检验号 {id} 添加报告\r\n            </Text>\r\n          )}\r\n          <div\r\n            css={{\r\n            display: 'inline-flex',\r\n          }}\r\n          >\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem\r\n                    onPress={() => {\r\n                      setEditing(true);\r\n                    }}\r\n                  >\r\n                    编辑\r\n                  </MenuItem>\r\n                  <MenuItem onPress={() => null }>删除</MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <IconButton\r\n                css={{\r\n                  display: !editing && editable ? undefined : \"none\",\r\n                  marginLeft: theme.spaces.sm\r\n                }}\r\n                variant=\"ghost\"\r\n                icon={<IconMoreVertical />}\r\n                label=\"显示菜单\"\r\n              />\r\n            </ResponsivePopover>\r\n\r\n            {editing && id && (\r\n              <Button\r\n                variant=\"ghost\"\r\n                css={{  //小屏这个按钮没有存在价值，顶条左角的后退就可以。\r\n                  //display: \"none\",\r\n                  [theme.mediaQueries.md]: {\r\n                    display: \"inline-flex\"\r\n                  },\r\n                  marginLeft: theme.spaces.sm\r\n                }}\r\n                onPress={() => setEditing(false)}\r\n              >\r\n                取消\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Toolbar>\r\n      </Navbar>\r\n\r\n      <div\r\n        css={{  //控制小屏时的导航条底下的整个页面滚动。\r\n          flex: 1,\r\n          //minHeight: '100vh',\r\n          [theme.mediaQueries.md]: {\r\n            //flex: \"none\",\r\n            //minHeight: \"unset\",\r\n           // minHeight:'unset',\r\n            height: \"auto\",\r\n            display: \"block\",\r\n          }\r\n        }}\r\n      >\r\n        <div>\r\n\r\n          <Container>\r\n            <div\r\n              css={{\r\n                display: 'flex',\r\n                alignItems:'center',\r\n                justifyContent:'center',\r\n                minHeight: '85vh',\r\n                [theme.mediaQueries.md]: {\r\n                  paddingTop: theme.spaces.lg,\r\n                  paddingBottom: theme.spaces.lg,\r\n                  minHeight:'unset',\r\n                }\r\n              }}\r\n            >\r\n              {ingredients && (\r\n                <div\r\n                  css={{\r\n                  width:'100%',\r\n                }}\r\n                >\r\n                  {/*三级路由了： 嵌套再嵌套了一层 布局级别的组件*/}\r\n                  <ThirdRouterContent id={id} rep={rep}/>\r\n                  <RouterLink to={`/inspect/${id}`}>\r\n                    <Button\r\n                      size=\"lg\" noBind\r\n                      intent=\"primary\"\r\n                      iconAfter={<IconArrowRight />}\r\n                    >\r\n                      其他功能\r\n                    </Button>\r\n                  </RouterLink>\r\n                </div>\r\n              )}\r\n\r\n\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n      <LayerLoading loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\ninterface ThirdRouterContentProps {\r\n  id?: string;\r\n  rep: any;\r\n}\r\nfunction ThirdRouterContent({id, rep}: ThirdRouterContentProps) {\r\n  return (\r\n   <React.Fragment>\r\n    <Switch>\r\n      <Route path=\"/inspect/:id/addReport/choose\">\r\n          <FirstPage id={id} rep={rep}/>\r\n      </Route>\r\n\r\n      {/*实际没用*/}\r\n      <Route path=\"/inspect/:id/addReport/:repId/result\">\r\n          <CopyRecord id={id} rep={rep}/>\r\n      </Route>\r\n    </Switch>\r\n  </React.Fragment>\r\n  );\r\n}\r\n\r\nconst FirstPage= ( {id ,rep}\r\n) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  //模板的类型标识;\r\n  //Todo: 获取后端的列表？ 或者，前后端同步数据维护。\r\n  const [tplType, setTplType] = React.useState('EL-DJ');\r\n  const [ingredients, setIngredients] = React.useState<any>( {modeltype:'EL-DJ', modelversion:'1'} );\r\n  const {result, submit:doReportBuild, loading} = useNewReport({\r\n    isp: id, type:ingredients.modeltype , version:ingredients.modelversion\r\n  });\r\n  async function makeNewReport() {\r\n    try {\r\n      await doReportBuild();\r\n    } catch (err) {\r\n      toast({\r\n        title: \"后端报错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      return;\r\n    }\r\n  }\r\n  return <React.Fragment>\r\n    <div>\r\n      <Text variant=\"h5\">为该份报告做选择</Text>\r\n      <ContainLine display={'模板对应报告类型'}>\r\n        <Select inputSize=\"md\" css={{minWidth:'210px',fontSize:'1.2rem',padding:'0 0.5rem'}} divStyle={css`max-width:390px;`}\r\n                value={ingredients.modeltype||''}  onChange={e => setIngredients({...ingredients, modeltype:e.currentTarget.value}) }\r\n        >\r\n          <option value={'EL-DJ'}>有机房曳引驱动电梯定期检验</option>\r\n          <option value={'EL-JJ'}>监督检验（未做待续...）</option>\r\n        </Select>\r\n      </ContainLine>\r\n      <ContainLine display={'模板对应版本号'}>\r\n        <Select inputSize=\"md\" css={{minWidth:'190px',fontSize:'1.2rem',padding:'0 0.5rem'}} divStyle={css`max-width:340px;`}\r\n                value={ingredients.modelversion||''}  onChange={e => setIngredients({...ingredients, modelversion:e.currentTarget.value}) }\r\n        >\r\n          <option value={'1'}>1版</option>\r\n          <option value={'2'}>2版</option>\r\n        </Select>\r\n      </ContainLine>\r\n      <Button\r\n        css={{ marginTop: theme.spaces.md }}\r\n        size=\"lg\"  intent={'warning'}\r\n        disabled ={loading}\r\n        loading ={loading}\r\n        onPress={ ()=>makeNewReport() }\r\n      >发给后端服务器生成新报告\r\n      </Button>\r\n      { result &&\r\n      <Text variant=\"h5\">生成返回结果：报告ID {result.id}; 报告编号 {result.no}; 日期：{result.upLoadDate}</Text>\r\n      }\r\n    </div>\r\n    <Text>这里生成返回报告编号还无法和旧平台对接，待完善；报告编号给对外对接识别用的，内部使用报告ID</Text><br/>\r\n      <RouterLink to={`/report/EL-DJ/ver/1/preview/${result?.id}`}>\r\n        <Button\r\n          size=\"lg\" noBind\r\n          intent=\"primary\"\r\n          iconAfter={<IconArrowRight />}\r\n        >\r\n         进入报告编制\r\n        </Button>\r\n      </RouterLink>\r\n  </React.Fragment>;\r\n};\r\n\r\n//作废了\r\nconst CopyRecord= ( { id ,rep}\r\n) => {\r\n  const theme = useTheme();\r\n  const [copyID, setCopyID] = React.useState( '' );\r\n  const [orc, setOrc] = React.useState( null );\r\n  const toast = useToast();\r\n  let filtercomp={ id: copyID };\r\n  const {items, } =useQueryOriginalRecord(filtercomp);\r\n  React.useEffect(() => {\r\n    const  dat =items&&items.data&&JSON.parse(items.data);\r\n    dat && setOrc(dat);\r\n  }, [items, setOrc]);\r\n  //拷贝\r\n  const {result, submit:updateFunc,loading } = useCommitOriginalData({\r\n    id:rep?.id,  operationType:1,\r\n    data:  JSON.stringify(orc) ,\r\n    deduction:{emergencyElectric:'45,423'}\r\n  });\r\n  async function updateRecipe(\r\n    id: string ) {\r\n    //let yes= result && result.id;\r\n    try {\r\n      await updateFunc();\r\n    } catch (err) {\r\n      toast({\r\n        title: \"后端请求错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      console.log(\"updateRecipe返回了,捕获err\", err);\r\n      return;\r\n    }\r\n    toast({\r\n      title: \"任务返回了\",\r\n      subtitle: '加入，ISP ID＝'+id,\r\n      intent: \"info\"\r\n    });\r\n  }\r\n  return <React.Fragment>\r\n    <div>\r\n      <Text variant=\"h5\">想从那一份报告去拷贝原始记录？</Text>\r\n      <ContainLine display={'请输入对方的报告ID'}>\r\n        <TransparentInput\r\n          autoFocus={true}\r\n          placeholder=\"报告ID\"\r\n          value={ copyID }\r\n          onChange={e => setCopyID( e.currentTarget.value) }\r\n        />\r\n      </ContainLine>\r\n      <Text variant=\"h5\">该份报告简要：{orc?.检验结论}</Text>\r\n      <Button\r\n        css={{ marginTop: theme.spaces.md }}\r\n        size=\"lg\"  intent={'warning'}\r\n        disabled ={loading}\r\n        loading ={loading}\r\n        onPress={ ()=>updateRecipe('1') }\r\n      >拷贝并保存</Button>\r\n      { result &&\r\n        <Text variant=\"h5\">拷贝结果：报告ID {result.id}; 模板类型 {result.modeltype}</Text>\r\n      }\r\n    </div>\r\n  </React.Fragment>;\r\n};\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\inspect\\RelationList.tsx",["624","625","626","627","628","629","630","631"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport { usePaginateQueryTask } from \"./db\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  Avatar,\r\n  IconButton,\r\n  Button,\r\n  Popover,\r\n  MenuList,\r\n  Stack,\r\n  MenuItem,\r\n  Text,\r\n  useTheme,\r\n  useToast,\r\n  IconChevronRight,\r\n  IconMoreVertical,\r\n  StackTitle,\r\n  Skeleton, IconPackage\r\n} from \"customize-easy-ui-component\";\r\nimport { SearchBox } from \"../SearchBox\";\r\nimport debug from \"debug\";\r\n//import algoliasearch from \"algoliasearch\";\r\n//import config from \"./firebase-config\";\r\nimport { useSession } from \"../auth\";\r\nimport find from \"lodash.find\";\r\nimport { useDeleteRequestFollow, usePaginateQueryUser,  } from \"./db\";\r\nimport { StackItem } from \"react-gesture-stack\";\r\nimport { Link as RouterLink, useLocation } from \"wouter\";\r\nimport { BoundReports } from \"./report/BoundReports\";\r\nimport { SearchTitle } from \"../comp/base\";\r\n\r\n\r\n/*const client = algoliasearch(\r\n  config.ALGOLIA_APP_ID,\r\n  config.ALGOLIA_USER_SEARCH_KEY\r\n);\r\n//这里两个地方algoliasearch完全独立　initIndex名称不同的。\r\n//这个users必须在https://www.algolia.com/apps/24MA89MM0B/explorer/browse/users网站创立。\r\n//const index = client.initIndex(\"users\");\r\n\r\nfunction searchAlgoliaForUsers(query: string) {\r\n  return index.search({ query });\r\n}*/\r\n\r\nconst log = debug(\"app:FollowingList\");\r\n\r\n//接口参数类型 云服务的\r\ninterface ResponseLikeAlgoliasearch<T=any> {\r\n  hits: T[];\r\n  //processingTimeMS: number;\r\n}\r\n\r\ninterface RelationListProps {\r\n  check?: boolean    //我是审核人\r\n}\r\n\r\nexport const RelationList: React.FunctionComponent<RelationListProps> = ({\r\n      check=false\r\n }) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  const {user,} = useSession();\r\n  const [, setLocation] = useLocation();\r\n  //graphQl的查询usexxx钩子函数，无法主动从后端读取最新数据。\r\n  //const { loading, userList:followings } = useFollowerIngs(false);\r\n  let filtercomp={filter: { id:user.id },\r\n    offset:0,\r\n    limit:5,\r\n    orderBy: \"id\",\r\n    asc: false\r\n  };\r\n  const { loading, items:followings ,} = usePaginateQueryTask(filtercomp,check);\r\n  //搜索user的输入:\r\n  const [query, setQuery] = React.useState(\"\");\r\n\r\n  //状态管理　relation＝当前显示的或者按钮点击事件产生,关注的user是谁。\r\n  const [relation, setRelation] = React.useState(null);\r\n\r\n\r\n  const [filter, setFilter] = React.useState({where:\r\n        {cod:query },\r\n     });\r\n\r\n  const noUsers = !query && (!followings || (followings && followings.length === 0));\r\n  //界面轮播 setIndex切换显示界面；   //index不是组件外部那一个同名index；\r\n  const [index, setIndex] = React.useState(0);\r\n\r\n  function showRelation(item: any) {\r\n    console.log(\"点击showRelation？item=\", item);\r\n    setRelation(item);\r\n    setIndex(1);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    //console.log(\"伪善setQueryResul02=\" ,query,usersFind);\r\n    let filtercomp={where:\r\n        {cod:query },\r\n      offset:0,\r\n      first:5,\r\n      orderBy: \"useDt\",\r\n      asc: false\r\n    };\r\n    setFilter(filtercomp);\r\n  }, [query]);\r\n  //这两个useEffect的前后顺序不能颠倒，顺序非常重要，后面的依赖于前面的useEffect更新结果。\r\n  //操作UI副作用；要进一步做修正性处理。\r\n  React.useEffect(() => {\r\n    //console.log(\"伪善setQueryResul00=\" ,query,usersFind);\r\n    async function fetchUsers() {\r\n      if (!query) {\r\n        return;\r\n      }\r\n      //云搜索的results；　搜索目标＝索引区域是users的缓存。\r\n      //const results =usersFind;     results =await searchAlgoliaForUsers(query);\r\n      log(\"search results: %o\");\r\n      //扣除已经关注的，从搜索结果剔除。\r\n    }\r\n    //因为其它操作副作用的，导致需要进一步更新要求：\r\n    fetchUsers();\r\n  }, [query, followings, user.uid]);\r\n  //上面这个副作用必须 加usersFind，否则无法继续处理后端数据带来的必要的UI反馈变化。\r\n  //控件<Stack 是堆叠式的，像导航条；适用同一个模板显示只需上级给下级参数调整的场景。根据上一叠页面选择触发状态relation给下一叠参数来控制下一级显示；更多嵌套很困难。\r\n  return (\r\n    <Stack\r\n      css={{\r\n        height: `calc(100vh - 0.875rem - 2 * 10px - 63px)`,\r\n        [theme.mediaQueries.md]: {\r\n          height: `calc(100vh - 2 * ${theme.spaces.lg} - 0.875rem - 2 * 10px - 71px)`\r\n        },\r\n        [theme.mediaQueries.xl]: {\r\n          height: `calc(100vh - 2 * ${theme.spaces.xl} - 0.875rem - 2 * 10px - 71px)`\r\n        }\r\n      }}\r\n      index={index}\r\n      navHeight={60}\r\n      onIndexChange={i => setIndex(i)}\r\n      items={[\r\n        {\r\n          title: (\r\n            <SearchTitle>\r\n              <SearchBox\r\n                css={{ borderBottom: \"none\" }}\r\n                label=\"Search 从algoliasearch云 来搜寻某个用户\"\r\n                query={query}\r\n                setQuery={setQuery}\r\n              />\r\n            </SearchTitle>\r\n          ),\r\n          content: (\r\n            <StackItem >\r\n              <div\r\n                css={{\r\n                  overflowY: \"auto\",\r\n                  //overflowY: \"scroll\", 滚动触发，小屏幕很明显的条，滚动条会随浏览器屏幕设备模式变化样式。\r\n                  height: \"100%\",\r\n                }}\r\n              >\r\n                {!loading && noUsers && (\r\n                  <Text\r\n                    muted\r\n                    css={{\r\n                      fontSize: theme.fontSizes[0],\r\n                      display: \"block\",\r\n                      margin: theme.spaces.lg\r\n                    }}\r\n                  >\r\n                    队列为空\r\n                  </Text>\r\n                )}\r\n\r\n                <List>\r\n                  {/*新搜索到的用户，扣除已经关注的，单独排列在 上部分;  没有分页加载更多的user*/}\r\n                  {loading && (\r\n                    <React.Fragment>\r\n                      <ListItem\r\n                        interactive={false}\r\n                        contentBefore={\r\n                          <Skeleton\r\n                            css={{\r\n                              width: \"32px\",\r\n                              height: \"32px\",\r\n                              borderRadius: \"50%\"\r\n                            }}\r\n                          />\r\n                        }\r\n                        primary={<Skeleton css={{ maxWidth: \"160px\" }} />}\r\n                      />\r\n                      <ListItem\r\n                        interactive={false}\r\n                        contentBefore={\r\n                          <Skeleton\r\n                            css={{\r\n                              width: \"32px\",\r\n                              height: \"32px\",\r\n                              borderRadius: \"50%\"\r\n                            }}\r\n                          />\r\n                        }\r\n                        primary={<Skeleton css={{ maxWidth: \"200px\" }} />}\r\n                      />\r\n                    </React.Fragment>\r\n                  )}\r\n\r\n                 {followings　&&　followings.map((item,i) => {\r\n                   return (\r\n                    <RouterLink  key={i}\r\n                         to={`/inspect/${item.id}`} >\r\n                      <ListItem\r\n                        key={item.id}\r\n                        interactive={ true }\r\n                        onPress={() =>\r\n                          showRelation({ ...item  } )\r\n          //这里一次点击两个都触发了：RouterLink + showRelation; 详情页面 +左边框内<Stack 状态切换。首先触发Stack下沉的，然后页内路由，已加载组件状态能保留。\r\n                        }\r\n                        contentBefore={\r\n                          <Avatar\r\n                            size=\"sm\"\r\n                            src={item.photoURL}\r\n                            name={item.id}\r\n                          />\r\n                        }\r\n                        primary={item?.dev?.cod}\r\n                        secondary={ `结论: ${item?.conclusion||''}` }\r\n                        contentAfter={\r\n                            <IconChevronRight\r\n                              color={theme.colors.text.muted}\r\n                              aria-hidden\r\n                            />\r\n                        }\r\n                      >\r\n                        {`检验号 ${item.id} 日期:${item?.task?.date||''}`}\r\n                      </ListItem>\r\n                    </RouterLink>\r\n                    );\r\n                  })}\r\n                </List>\r\n\r\n              </div>\r\n            </StackItem>\r\n          )\r\n        },\r\n        {\r\n          title: (\r\n            <StackTitle\r\n              backTitle={\"回退\"}\r\n              contentAfter={\r\n                relation && (\r\n                  <Popover\r\n                    content={\r\n                      <MenuList>\r\n                        <MenuItem contentBefore={<IconPackage />}  onPress={() => {\r\n                          setLocation(`/inspect/${relation.id}/addReport/choose`,  { replace: true } );\r\n                        } }>\r\n                          增加个检验报告\r\n                        </MenuItem>\r\n                        <MenuItem onPress={() => void 0 }>\r\n                          检验号{relation.id || ''}其他功能\r\n                        </MenuItem>\r\n                      </MenuList>\r\n                    }\r\n                  >\r\n                    <IconButton\r\n                      onPress={e => e.stopPropagation()}\r\n                      variant=\"ghost\"\r\n                      icon={<IconMoreVertical />}\r\n                      label=\"菜单\"\r\n                    />\r\n                  </Popover>\r\n                )\r\n              }\r\n              title={relation ? `检验号${relation.id}含报告` : \"\"}\r\n            />\r\n          ),\r\n          content: (\r\n            <StackItem>\r\n               { relation && (\r\n                <BoundReports key={relation.id} id={relation.id} />\r\n                )}　\r\n            </StackItem>\r\n          )\r\n        }\r\n      ]}\r\n    />\r\n  );\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n//报错Cannot read property 'map' of null标记出错代码行，竟可能会差错！实际错误点实在下方，报错指示却在上方的代码行，两处都有.map的代码。\r\n//<Stack 组件，实际上是内部状态控制界面的呈现，实际上DOM数据内容并没有同步地变更，只是页面切换着看；适用数据库组织的；PK的，导航堆叠场景实际是源代码组织的。\r\n//幸运的事！！<StackItem>底下内嵌的组件可以做到每一个都是独立自主的。这里<FollowingRecipes key={}/>对每一个按钮进入和后退的，虽然组件同一个，但内部状态数据可各自独立的。\r\n//overflowY:\"scroll\"若遇到 css={{height: \"100%\", 和 minHeight: '300px' 不能同时添加的。overflowY:和\"100%\"一起使用，且要在内层DIV上用。组件中间层可能屏蔽掉。\r\n//多层DIV的height: \"100%\", 需要在中间层次添加100%传递父辈限制大小，配合内部层的overflowY: \"scroll\",才能滚动。\r\n//<Stack多层的下沉层叠＋<ListItem，配合<RouterLink，可以触发点击链接同时还能够下沉页面触发；左右两个页面都能刷新，可是小屏幕只能对照右半部分的核心界面。不触发下沉和要触发条目可同时用。\r\n//点击一次触发多重：<RouterLink to={`/inspect/${item.id}`} >    /  <ListItem  onPress={() =>      /   <Button  onPress={e => { ；；\r\n","D:\\home\\sei\\front-end\\src\\inspect\\Layout.tsx",["632"],"D:\\home\\sei\\front-end\\src\\utils\\storage.ts",["633"],"import cookies from './cookies';\r\n\r\nexport default {\r\n  isLocalStorageSupported() {\r\n    const storage = window.localStorage;\r\n    const testKey = 'testLocalStorageFunctionality';\r\n    let supported = true;\r\n\r\n    try {\r\n      storage.setItem(testKey, testKey);\r\n      storage.removeItem(testKey);\r\n    } catch (error) {\r\n      supported = false;\r\n    }\r\n\r\n    return !!supported;\r\n  },\r\n\r\n  get(key: string) {\r\n    //let value = this.isLocalStorageSupported() ? window.localStorage.getItem(key)  : cookies.get(key);\r\n    let value = cookies.get(key);\r\n    //if (value) { value = JSON.parse(value); }\r\n    return value;\r\n  },\r\n\r\n  set(key: string, data: any) {\r\n    const value = JSON.stringify(data);\r\n\r\n    if (this.isLocalStorageSupported()) {\r\n      window.localStorage.setItem(key, value);\r\n    } else {\r\n      cookies.set(key, value);\r\n    }\r\n  },\r\n\r\n  remove(key: string) {\r\n    if (this.isLocalStorageSupported()) {\r\n      window.localStorage.removeItem(key);\r\n    } else {\r\n      cookies.remove(key);\r\n    }\r\n  }\r\n};\r\n","D:\\home\\sei\\front-end\\src\\report\\elevator\\elvRarelyVary.tsx",["634","635"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n   useTheme, InputGroupLine, SuffixInput, Button, Input\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport { CCell, Cell, Table, TableBody, TableRow } from \"../../comp/TableExt\";\r\nimport { InspectRecordLayout, InternalItemHandResult, InternalItemProps, useItemInputControl } from \"../comp/base\";\r\nimport { Link as RouterLink } from \"wouter\";\r\nimport * as queryString from \"querystring\";\r\nimport Img_Seal from '../../images/seal.png';\r\n\r\n\r\n//不同版本能够直接复用的组件； 内容相对重复；减少代码数量的重复和冗余。\r\n\r\n//即使多版本间会有调整的，还可以添加注入的参数或者内部逻辑判定来适应。\r\nexport const ItemSurveyLinkMan=\r\n  React.forwardRef((\r\n    { children, show ,alone=true}:InternalItemProps,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      //devCod,检验日期：这些字段要提升到关系数据库表中，json半结构化数据的就不做保留。\r\n      //安全人员,联系电话：放json，算是过度性质输入形态。报告正式批准/终结后，就该触发修改同步到库表中去。也可反馈给下一次定期检验，继承或修改。\r\n      const {devCod,检验日期,安全人员,联系电话} =par||{};\r\n      return {devCod,检验日期,安全人员,联系电话};\r\n    }, []);\r\n    const {inp, setInp} = useItemInputControl({ ref });\r\n    return (\r\n      <InspectRecordLayout inp={inp} setInp={setInp}  getInpFilter={getInpFilter} show={show}\r\n                           alone={alone}  label={'一、设备概况'} >\r\n        允许直接修改部分\r\n        <InputGroupLine  label='设备号{将来是点击链接自动获得}' >\r\n          <Input  value={inp?.devCod ||''}  placeholder=\"那一台电梯？暂时要求，将来是点击链接自动获得\"\r\n                  onChange={e => setInp({ ...inp, devCod: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='检验日期{将来提升到创立原始记录的前置输入}' >\r\n          <Input value={inp?.检验日期 ||''}  placeholder=\"基准日\" type='date'\r\n                 onChange={e => setInp({ ...inp, 检验日期: e.currentTarget.value}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='安全管理人员' >\r\n          <Input  value={inp?.安全人员 ||''}\r\n                  onChange={e => setInp({ ...inp, 安全人员: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='联系电话1' >\r\n          <Input  value={inp?.联系电话 ||''}\r\n                  onChange={e => setInp({ ...inp, 联系电话: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        不可修改的明细：待续或点外部链接。\r\n      </InspectRecordLayout>\r\n    );\r\n  } );\r\n\r\n//提供給6.3 6.9 6.12項目公用的部分。\r\n//'附录A 层门间隙、啮合长度' 这7个测量数据，单独放一个编辑组件。而原本'6.3','6.9','6.12'只读和跳转连接。\r\nexport const ItemGapMeasure=\r\n  React.forwardRef((\r\n    { children, show ,alone=true, repId}:InternalItemProps,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {层站,门扇隙,门套隙,地坎隙,施力隙,门锁啮长,刀坎距,轮坎距,门扇间隙,最不利隙,层门锁,轿门锁,刀轮地隙} =par||{};\r\n      return {层站,门扇隙,门套隙,地坎隙,施力隙,门锁啮长,刀坎距,轮坎距,门扇间隙,最不利隙,层门锁,轿门锁,刀轮地隙};\r\n    }, []);\r\n    const {inp, setInp} = useItemInputControl({ ref });\r\n    const theme = useTheme();\r\n    const [floor, setFloor] = React.useState(null);\r\n    const qs= queryString.parse(window.location.search);\r\n    //console.log(\"参数第三层路由mathched qs=\",qs);\r\n    return (\r\n      <InspectRecordLayout inp={inp} setInp={setInp}  getInpFilter={getInpFilter} show={show}\r\n                           alone={alone}  label={'附录A 层门间隙、啮合长度'}>\r\n        <div>\r\n          <RouterLink  to={`/report/EL-DJ/ver/1/${qs.from?qs.from:'6.3'}/${repId}`}>\r\n            (点击回检验项)已检记录,每层七个尺寸:\r\n          </RouterLink>\r\n          {inp?.层站?.map((a,i)=>{\r\n            return <React.Fragment key={i}>\r\n              <br/>{\r\n              `[${a}]层: ${inp?.门扇隙?.[a]||''} , ${inp?.门套隙?.[a]||''} , ${inp?.地坎隙?.[a]||''} , ${inp?.施力隙?.[a]||''} , ${inp?.门锁啮长?.[a]||''} , ${inp?.刀坎距?.[a]||''} , ${inp?.轮坎距?.[a]||''};`\r\n            }\r\n            </React.Fragment>;\r\n          }) }\r\n        </div>\r\n        新增检查=＞\r\n        <InputGroupLine  label='首先设置当前层站号'>\r\n          <SuffixInput\r\n            value={floor||''}\r\n            onChange={e => {setFloor( e.currentTarget.value) }}\r\n          >\r\n            <Button onPress={() =>floor&&(inp?.层站?.includes(floor)? null:\r\n                setInp( (inp?.层站&&{...inp,层站:[...inp?.层站,floor] } )\r\n                  || {...inp,层站:[floor] } )\r\n            )}\r\n            >新增</Button>\r\n          </SuffixInput>\r\n        </InputGroupLine>\r\n        <div css={{ textAlign: 'center' }}>\r\n          <Button css={{ marginTop: theme.spaces.sm }} size=\"sm\"\r\n                  onPress={() => floor&&inp?.层站?.includes(floor) &&(\r\n                    setInp({...inp,层站:[...inp.层站.filter(a => a!==floor )],\r\n                      门扇隙:{...inp?.门扇隙,[floor]:undefined}, 门套隙:{...inp?.门套隙,[floor]:undefined}, 地坎隙:{...inp?.地坎隙,[floor]:undefined}\r\n                      , 施力隙:{...inp?.施力隙,[floor]:undefined}, 门锁啮长:{...inp?.门锁啮长,[floor]:undefined}, 刀坎距:{...inp?.刀坎距,[floor]:undefined}\r\n                      , 轮坎距:{...inp?.轮坎距,[floor]:undefined}\r\n                    })\r\n                  )}\r\n          >刪除该层</Button>\r\n        </div>\r\n        <InputGroupLine label={`层门门扇间间隙(层号 ${floor}):`}>\r\n          <SuffixInput\r\n            placeholder=\"请输入测量数\"\r\n            value={ (inp?.门扇隙?.[floor] ) || ''}\r\n            onChange={e => floor&&setInp({ ...inp, 门扇隙:{...inp?.门扇隙,[floor]:e.currentTarget.value||undefined} }) }\r\n          >mm</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`层门门扇与门套间隙(层号 ${floor}):`}>\r\n          <SuffixInput\r\n            placeholder=\"请输入测量数\"\r\n            value={ (inp?.门套隙?.[floor] ) || ''}\r\n            onChange={e => floor&&setInp({ ...inp, 门套隙:{...inp?.门套隙,[floor]:e.currentTarget.value||undefined} }) }\r\n          >mm</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`层门扇与地坎间隙(层号 ${floor}):`}>\r\n          <SuffixInput\r\n            placeholder=\"请输入测量数\"\r\n            value={ (inp?.地坎隙?.[floor] ) || ''}\r\n            onChange={e => floor&&setInp({ ...inp, 地坎隙:{...inp?.地坎隙,[floor]:e.currentTarget.value||undefined} }) }\r\n          >mm</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`层门扇间施力间隙(层号 ${floor}):`}>\r\n          <SuffixInput\r\n            placeholder=\"请输入测量数\"\r\n            value={ (inp?.施力隙?.[floor] ) || ''}\r\n            onChange={e => floor&&setInp({ ...inp, 施力隙:{...inp?.施力隙,[floor]:e.currentTarget.value||undefined} }) }\r\n          >mm</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`门锁啮合长度(层号 ${floor}):`}>\r\n          <SuffixInput\r\n            placeholder=\"请输入测量数\"\r\n            value={ (inp?.门锁啮长?.[floor] ) || ''}\r\n            onChange={e => floor&&setInp({ ...inp, 门锁啮长:{...inp?.门锁啮长,[floor]:e.currentTarget.value||undefined} }) }\r\n          >mm</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`轿门门刀与层门地坎间距(层号 ${floor}):`}>\r\n          <SuffixInput\r\n            placeholder=\"请输入测量数\"\r\n            value={ (inp?.刀坎距?.[floor] ) || ''}\r\n            onChange={e => floor&&setInp({ ...inp, 刀坎距:{...inp?.刀坎距,[floor]:e.currentTarget.value||undefined} }) }\r\n          >mm</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`门锁滚轮与轿门地坎间距(层号 ${floor}):`}>\r\n          <SuffixInput\r\n            placeholder=\"请输入测量数\"\r\n            value={ (inp?.轮坎距?.[floor] ) || ''}\r\n            onChange={e => floor&&setInp({ ...inp, 轮坎距:{...inp?.轮坎距,[floor]:e.currentTarget.value||undefined} }) }\r\n          >mm</SuffixInput>\r\n        </InputGroupLine>\r\n      </InspectRecordLayout>\r\n    );\r\n  } );\r\n\r\n\r\nexport const 检验编制核准= ( { orc }\r\n) => {\r\n  return <React.Fragment>\r\n    <TableRow>\r\n      <CCell component=\"th\" scope=\"row\">检验人员</CCell>\r\n      <Cell colSpan={4}>{orc.检验人IDs}</Cell>\r\n    </TableRow>\r\n    <TableRow>\r\n      <CCell component=\"th\" scope=\"row\">编制</CCell>\r\n      <CCell>{orc.编制人}</CCell>\r\n      <CCell>日期</CCell>\r\n      <CCell>{orc.编制日期}</CCell>\r\n      <CCell rowSpan={3}>\r\n        <div css={{backgroundImage:`url(${Img_Seal})`,backgroundSize:\"cover\",backgroundPosition:\"center\",minHeight:'30vmin'}}>\r\n          <Table  fixed={ [\"40%\",\"%\"]  }\r\n                  printColWidth={ [\"170\",\"230\"] }\r\n                  css={ {borderCollapse: 'collapse',height:'fill-available'} }\r\n          >\r\n            <TableBody>\r\n              <TableRow>\r\n                <CCell css={{border:'none'}}>机构核准证号：</CCell>\r\n                <CCell css={{border:'none'}}>TS7110236-2022</CCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <CCell css={{border:'none'}} colSpan={2}>（机构公章或检验专用章）</CCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <CCell css={{border:'none'}}>签发日期：</CCell>\r\n                <CCell css={{border:'none'}}>2020-04-22</CCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n      </CCell>\r\n    </TableRow>\r\n  </React.Fragment>;\r\n};\r\n\r\n//注意<RouterLink to={`/report/`}>不能直接套在函数上面，其底下必须见到<>。\r\nexport const 检验设备情况= ( { orc }\r\n) => {\r\n  return <React.Fragment>\r\n    <TableBody>\r\n      <TableRow>\r\n        <CCell component=\"th\" scope=\"row\">设备品种</CCell>\r\n        <CCell>{orc.设备品种}</CCell>\r\n        <CCell>使用登记证编号</CCell>\r\n        <CCell>{orc.使用证号}</CCell>\r\n      </TableRow>\r\n      <TableRow >\r\n        <CCell component=\"th\" scope=\"row\">使用单位名称</CCell>\r\n        <CCell colSpan={3}>{orc.使用单位}</CCell>\r\n      </TableRow>\r\n      <TableRow >\r\n        <CCell component=\"th\" scope=\"row\">使用单位地址</CCell>\r\n        <CCell colSpan={3}>{orc.使用单位地址}</CCell>\r\n      </TableRow>\r\n      <TableRow >\r\n        <CCell component=\"th\" scope=\"row\">楼盘名称</CCell>\r\n        <CCell colSpan={3}>{orc.楼盘}</CCell>\r\n      </TableRow>\r\n      <TableRow >\r\n        <CCell component=\"th\" scope=\"row\">楼盘地址</CCell>\r\n        <CCell colSpan={3}>{orc.楼盘地址}</CCell>\r\n      </TableRow>\r\n      <TableRow >\r\n        <CCell component=\"th\" scope=\"row\">分支机构名称</CCell>\r\n        <CCell colSpan={3}>{orc.分支机构 || '／'}</CCell>\r\n      </TableRow>\r\n      <TableRow >\r\n        <CCell component=\"th\" scope=\"row\">分支机构地址</CCell>\r\n        <CCell colSpan={3}>{orc.分支机构地址 || '／'}</CCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <CCell component=\"th\" scope=\"row\">设备使用地点</CCell>\r\n        <CCell colSpan={3}>{orc.设备使用地点}</CCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <CCell component=\"th\" scope=\"row\">使用单位代码</CCell>\r\n        <CCell colSpan={3}>350122197109084531</CCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <CCell component=\"th\" scope=\"row\">安全管理人员</CCell>\r\n        <CCell>{orc.安全人员}</CCell>\r\n        <CCell>使用单位设备编号</CCell>\r\n        <CCell>{orc.单位内部编号}</CCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <CCell component=\"th\" scope=\"row\">制造日期</CCell>\r\n        <CCell>{orc.制造日期 || '／'}</CCell>\r\n        <CCell>改造日期</CCell>\r\n        <CCell>{orc.改造日期 || '／'}</CCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <CCell component=\"th\" scope=\"row\">制造单位名称</CCell>\r\n        <CCell colSpan={3}>{orc.制造单位 || '／'}</CCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <CCell component=\"th\" scope=\"row\">改造单位名称</CCell>\r\n        <CCell colSpan={3}>{orc.改造单位 || '／'}</CCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <CCell component=\"th\" scope=\"row\">产品编号</CCell>\r\n        <CCell>ZT1600005085</CCell>\r\n        <CCell>型号</CCell>\r\n        <CCell>{orc.型号}</CCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <CCell component=\"th\" scope=\"row\">维护保养单位名称</CCell>\r\n        <CCell colSpan={3}>{orc.维保单位}</CCell>\r\n      </TableRow>\r\n    </TableBody>\r\n  </React.Fragment>;\r\n};\r\n\r\n\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\report\\elevator\\elvBase.tsx",["636","637"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  useTheme,  Button,\r\n  InputGroupLine, Input,  TextArea, SuffixInput\r\n} from \"customize-easy-ui-component\";\r\n//import { Link as RouterLink } from \"wouter\";\r\nimport {\r\n  InspectRecordLayout,\r\n  InternalItemHandResult,\r\n  InternalItemProps,\r\n  useItemInputControl\r\n} from \"../comp/base\";\r\n\r\n//公共的复用性好的组件；编辑、原始记录，在多数模板能通用的。不通用的要安排放在更加具体贴近的目录文件内。\r\n//方便不同模板和不同版本的可重复引用。文件目录管理，组件按照抽象性程度和参数配置的关联度，分级分层次，标识容易区分开。\r\n\r\nexport const ItemRemarks=\r\n  React.forwardRef((\r\n    { children, show ,alone=true}:InternalItemProps,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {自检材料,校验材料,整改材料,资料及编号,memo} =par||{};\r\n      return {自检材料,校验材料,整改材料,资料及编号,memo};\r\n    }, []);\r\n    const {inp, setInp} = useItemInputControl({ ref });\r\n    return (\r\n      <InspectRecordLayout inp={inp} setInp={setInp}  getInpFilter={getInpFilter} show={show}\r\n                           alone={alone}  label={'见证材料或问题备注'}>\r\n        六、见证材料{`{将来可能只需输入编号链接即可}`}\r\n        <InputGroupLine  label='1、维保自检材料' >\r\n          <Input  value={inp?.自检材料 ||''}  placeholder=\"使用默认规则，缺省编号情况的可不填\"\r\n                  onChange={e => setInp({ ...inp, 自检材料: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='2、限速器动作速度校验材料' >\r\n          <Input  value={inp?.校验材料 ||''}\r\n                  onChange={e => setInp({ ...inp, 校验材料: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='3、使用单位整改反馈材料' >\r\n          <Input  value={inp?.整改材料 ||''}\r\n                  onChange={e => setInp({ ...inp, 整改材料: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='4、其他资料及编号' >\r\n          <Input  value={inp?.资料及编号 ||''}\r\n                  onChange={e => setInp({ ...inp, 资料及编号: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        七、备注<br/><br/>\r\n        纸质正式报告备注可能只取前几行\r\n        <TextArea  value={inp?.memo ||''} rows={10} placeholder=\"网页版本正式报告备注可随意多写\"\r\n                   onChange={e => setInp({ ...inp, memo: e.currentTarget.value||undefined}) } />\r\n      </InspectRecordLayout>\r\n    );\r\n  } );\r\n\r\n\r\nexport const ItemAppendixB=\r\n  React.forwardRef((\r\n    { children, show ,alone=true}:InternalItemProps,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {检验条件,温度,电压值} =par||{};\r\n      return {检验条件,温度,电压值};\r\n    }, []);\r\n    const {inp, setInp} = useItemInputControl({ ref });\r\n    const theme = useTheme();\r\n    const [floor, setFloor] = React.useState(null);\r\n    return (\r\n      <InspectRecordLayout inp={inp} setInp={setInp}  getInpFilter={getInpFilter} show={show}\r\n                           alone={alone}  label={'附录B：现场检验条件'}>\r\n        1、机房或者机器设备间的空气温度保持在5℃～40℃之间；<br/>\r\n        2、电源输入电压波动在额定电压值±7％的范围内；<br/>\r\n        3、环境空气中没有腐蚀性和易燃性气体及导电尘埃； <br/>\r\n        4、检验现场（主要指机房或者机器设备间、井道、轿顶、底坑）清洁，没有与电梯工作无关的物品和设备，基站、相关层站等检验现场放置表明正在进行检验的警示牌；<br/>\r\n        5、对井道进行了必要的封闭。 <br/>\r\n        特殊情况下，电梯设计文件对温度、湿度、电压、环境空气条件等进行了专门规定的，检验现场的温度、湿度、电压、环境空气条件等应当符合电梯设计文件的规定。\r\n        <hr/>\r\n        <div>\r\n          确认过的记录:\r\n          {inp?.检验条件?.map((a,i)=>{\r\n            return <React.Fragment key={i}>\r\n              <br/>{\r\n              `[${a}]日: ${inp?.温度?.[a]||''} ℃, ${inp?.电压值?.[a]||''} V;`\r\n            }\r\n            </React.Fragment>;\r\n          }) }\r\n        </div>\r\n        新增检查=＞\r\n        <InputGroupLine  label='首先设置当前检验日期'>\r\n          <SuffixInput\r\n            type='date'\r\n            value={floor||''}\r\n            onChange={e => {setFloor( e.currentTarget.value) }}\r\n          >\r\n            <Button onPress={() =>floor&&(inp?.检验条件?.includes(floor)? null:\r\n                setInp( (inp?.检验条件&&{...inp,检验条件:[...inp?.检验条件,floor] } )\r\n                  || {...inp,检验条件:[floor] } )\r\n            )}\r\n            >新增</Button>\r\n          </SuffixInput>\r\n        </InputGroupLine>\r\n        <div css={{ textAlign: 'center' }}>\r\n          <Button css={{ marginTop: theme.spaces.sm }} size=\"sm\"\r\n                  onPress={() => floor&&inp?.检验条件?.includes(floor) &&(\r\n                    setInp({...inp,检验条件:[...inp.检验条件.filter(a => a!==floor )],\r\n                      温度:{...inp?.温度,[floor]:undefined}, 电压值:{...inp?.电压值,[floor]:undefined}\r\n                    })\r\n                  )}\r\n          >刪除</Button>\r\n        </div>\r\n        <InputGroupLine label={`机房空气温度(${floor}):`}>\r\n          <SuffixInput\r\n            placeholder=\"请输入测量数\"\r\n            value={ (inp?.温度?.[floor] ) || ''}\r\n            onChange={e => floor&&setInp({ ...inp, 温度:{...inp?.温度,[floor]:e.currentTarget.value||undefined} }) }\r\n          >℃</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`电源输入电压(${floor}):`}>\r\n          <SuffixInput\r\n            placeholder=\"请输入测量数\"\r\n            value={ (inp?.电压值?.[floor] ) || ''}\r\n            onChange={e => floor&&setInp({ ...inp, 电压值:{...inp?.电压值,[floor]:e.currentTarget.value||undefined} }) }\r\n          >V</SuffixInput>\r\n        </InputGroupLine>\r\n      </InspectRecordLayout>\r\n    );\r\n  } );\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\Image.tsx",["638"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//import * as firebase from \"firebase/app\";\r\n//import \"firebase/storage\";\r\nimport { Embed } from \"customize-easy-ui-component\";\r\nimport { FadeImage } from \"./FadeImage\";\r\n\r\ninterface ImageProps {\r\n  id: string;\r\n  prefix?: string;\r\n  alt: string;\r\n}\r\n//<Embed>能根据上级div宽度高度来自动调整下一级的图片的输出大小。\r\n//一个Image嵌套好几层组件才能到　<img src=\"\" alt=\"\" class=\"css-11nysj5-FadeImage\">。\r\n//缩略图和完整图都是同一个图片的数据内容，　不做差异化处理！\r\n//图片文件要：　根据id, prefix在此生成src及 URL的？\r\nexport const Image = ({ alt, id, prefix = \"thumb@\" }: ImageProps) => {\r\n  //缩略图thumb-sm@和完整图片thumb@的url不一样的； 需要后端服务器的 支持缩略，不同的URL;\r\n  //看应用，专门的缩略图，做独立存储的缩略？，或　一边下载一边压缩的缩略。　没有必要性，直接下载完整图。\r\n  const { src, error } = useFirebaseImage(prefix, id);\r\n\r\n  if (error) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Embed width={1000} height={700}>\r\n      <FadeImage src={src} alt={alt} />\r\n    </Embed>\r\n  );\r\n};\r\n\r\nfunction storeURL(key: string, url: string) {\r\n  window.localStorage.setItem(key, url);\r\n}\r\n\r\nfunction hasURL(key: string) {\r\n  const url = window.localStorage.getItem(key);\r\n  return url || null;\r\n}\r\n\r\n/**\r\n * A wrapper around setState which caches our value\r\n */\r\n\r\n\r\n//useCachedState返回的［1］＝set钩子函数＝＝保存key的信息到localStorage里去的。\r\nexport function useCachedState(key: string) {\r\n  //先从localStorage里面查询key的存储数据给state；\r\n  //若localStorage里面能够匹配到这个key,直接就用它value; = 客户端浏览器的K/V缓存,　？更新同步？。\r\n  const [state, setState] = React.useState(hasURL(key));\r\n\r\n  const options: [string, (nextState: string) => void] = [\r\n    state,\r\n    (nextState: string) => {\r\n      storeURL(key, nextState);\r\n      setState(nextState);\r\n    }\r\n  ];\r\n\r\n  return options;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Fetch and cache our firebase download URL\r\n * @param prefix string\r\n * @param id string\r\n */\r\n//原来含义　凭id　去映射出　文件的下载地址。\r\n//自带localStorage缓存？\r\n//参数id　实际＝菜谱的image字段内容，id不是直接的文件URL, 要映射image文件的真正url需要另外生成。\r\n//prefix作废不用。 thumb-sm@是给列表的微缩图片{加载频率更大的！}，　而thumb@是完整图。要后端支持；\r\nexport function useFirebaseImage(prefix: string = \"thumb@\", id?: string) {\r\n  //云存储：  const storage = firebase.storage().ref();\r\n  const key = prefix + id;\r\n  //针对key，把它的信息从localStorage里读出给imageURL，或者用钩子setImageURL函数设置新的存储信息。\r\n  const [imageURL, setImageURL] = useCachedState(key);\r\n  //console.log(\"进useCachedState面key=\"+key+ \",imageURL＝\"+ JSON.stringify(imageURL) );\r\n  const [error, ] = React.useState(null);\r\n  //let filter={id: id };\r\n  //钩子函数内部嵌套着其它钩子函数：\r\n  //const {items,loadMore,loading,loadingError} =useQueryFileUrl(filter);\r\n\r\n  React.useEffect(() => {\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    if (imageURL) {\r\n      return;   　　//缓存里面已经有的，就没必要查firebase.storage；\r\n    }\r\n    //要从后端服务器　获取文件ＩＤ所对应的真实文件下载的URL;\r\n    setImageURL(`${process.env.REACT_APP_BACK_END}/files/`+id+\"/load\");\r\n\r\n    /*\r\n    //setImageURL是做缓存在本地的存储key-url。\r\n    //存储中间件生成最终的URL;\r\n    storage\r\n      .child(key)\r\n      .getDownloadURL()\r\n      .then((url: string) => {\r\n        setImageURL(url);      //缓存localStorage去的；\r\n        setError(null);\r\n      })\r\n      .catch(err => {\r\n        setError(err);\r\n      });\r\n    */\r\n  }, [key,id,imageURL,setImageURL] );\r\n\r\n  //数据库的字段image实际就是id字符串; 并不是最终的图片的URL。\r\n  //根据prefix, id 来间接的{　firebase.storage()的中间件根据id来影射出的　}生成真正的http图片的URL。\r\n  return {\r\n    src: imageURL,\r\n    error\r\n  };\r\n}\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\maintenance\\db.ts",[],"D:\\home\\sei\\front-end\\src\\inspect\\db.ts",[],"D:\\home\\sei\\front-end\\src\\device\\task\\db.ts",[],"D:\\home\\sei\\front-end\\src\\FollowingRecipes.tsx",["639"],"import * as React from \"react\";\r\n//谷歌云服务 import usePaginateQuery from \"firestore-pagination-hook\";\r\n//import firebase from \"firebase/app\";\r\nimport {\r\n  Text,\r\n  Spinner,\r\n  useTheme,\r\n  List,\r\n  Button,\r\n  ListItem,\r\n  Skeleton, ScrollView, useInfiniteScroll\r\n} from \"customize-easy-ui-component\";\r\nimport { RecipeListItem, Recipe } from \"./RecipeList\";\r\nimport { usePaginateQueryRecipe } from \"./db\";\r\n\r\n\r\n\r\nexport interface FollowingRecipesProps {\r\n  id: string;\r\n}\r\n//显示某一个关注对象用户菜谱列表\r\n//有1个地方会引用到的。\r\nexport const FollowingRecipes: React.FunctionComponent<\r\n  FollowingRecipesProps\r\n> = ({ id }) => {\r\n  const theme = useTheme();\r\n  let wheres={a: {s:'createdBy.id',o:'EQ',lv:id } ,\r\n     };\r\n  let filtercomp={where:wheres,\r\n    offset:0,\r\n    first:5,\r\n    orderBy: \"updatedAt\",\r\n    asc: true\r\n  };\r\n\r\n  const [filter, setFilter] = React.useState(filtercomp);\r\n  const {\r\n    loading,\r\n    loadingError,\r\n    items,\r\n    loadMore\r\n  } =usePaginateQueryRecipe(filter);\r\n    /*usePaginateQuery(\r\n    firebase\r\n      .firestore()\r\n      .collection(\"recipes\")\r\n      .where(\"userId\", \"==\", id)\r\n      .orderBy(\"updatedAt\", \"desc\"),\r\n    {\r\n      limit: 25\r\n    }\r\n  );*/\r\n  console.log(\"看FollowingRecipes filter=\", filter );\r\n  //就算id切换了，本组件的数据还是会被appollo自动缓存的，id变化不会一定导致重新查询后端数据库的，看着像页面显示的缓存。\r\n  //根据id和界面操作后的参数，来要修正graphQL的Query()的参数 = 要做重新查询。\r\n  React.useEffect(() => {\r\n    setFilter(filtercomp);\r\n  }, [id, filtercomp]);\r\n  //滚动条触发的更多查询。初始查询的记录满员必须大于让滚动条开启{满屏了}的数量，否则无法触发后续更多查询。\r\n  const ref = React.useRef();\r\n  const [hasMore, setHasMore] = React.useState(true);\r\n\r\n  const [fetching] = useInfiniteScroll({\r\n    container: ref,\r\n    hasMore: hasMore,\r\n    onFetch: () => toLoadMore()\r\n   });\r\n\r\n  async function toLoadMore() {\r\n    loadMore({\r\n      variables: {\r\n        offset: items.length,\r\n      },\r\n      updateQuery: (prev, { fetchMoreResult }) => {\r\n        console.log(\"fetchMoreResult来看=\"+ JSON.stringify(fetchMoreResult)+\",原来=\"+ JSON.stringify(prev) );\r\n        if (!fetchMoreResult)   return prev;\r\n        if (!fetchMoreResult.recipe)   return prev;\r\n        if(fetchMoreResult.recipe.length===0)\r\n          setHasMore(false);\r\n        if(prev.recipe.length + fetchMoreResult.recipe.length > 2000 )\r\n          setHasMore(false);\r\n        return Object.assign({}, prev, {\r\n          recipe: [...prev.recipe, ...fetchMoreResult.recipe],\r\n        });\r\n      },\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <ScrollView　overflowY\r\n                   css={{\r\n                     flex: 1,\r\n                     height: \"100%\",\r\n                    //WebkitOverflowScrolling: \"touch\"\r\n                   }}\r\n                  innerRef={ref}>\r\n        <div\r\n          css={{   //特意把父div滚动条启动开。`calc(100vh - ${ileapHeight}px)`,   '750px',  注意串里的空格必须要有！\r\n            //关键是靠内容持续增长列表的紧上一级DIV来控制，把这一个div高度撑开，迫使最近的窗口所附属的滚动条启动。\r\n            minHeight: `calc(100vh - 164px)`,\r\n            [theme.mediaQueries.md]: {\r\n              minHeight: `calc(100vh - 164px - ${theme.spaces.lg} - ${theme.spaces.lg})`\r\n            },\r\n            [theme.mediaQueries.xl]: {\r\n              minHeight: `calc(100vh - 164px - ${theme.spaces.xl} - ${theme.spaces.xl})`\r\n            },\r\n          }}\r\n        >\r\n          {/*loading && <Spinner center />*/}\r\n          {!loading && !items && (\r\n            <Text\r\n              muted\r\n              css={{\r\n                display: \"block\",\r\n                fontSize: theme.fontSizes[0],\r\n                margin: theme.spaces.lg\r\n              }}\r\n            >\r\n              This user currently 没有东西.\r\n            </Text>\r\n          )}\r\n\r\n          <List>\r\n            {loading && (\r\n              <React.Fragment>\r\n                <ListItem\r\n                  interactive={false}\r\n                  contentBefore={\r\n                    <Skeleton\r\n                      css={{\r\n                        width: \"32px\",\r\n                        height: \"32px\",\r\n                        borderRadius: \"50%\"\r\n                      }}\r\n                    />\r\n                  }\r\n                  primary={<Skeleton css={{ maxWidth: \"160px\" }} />}\r\n                />\r\n                <ListItem\r\n                  interactive={false}\r\n                  contentBefore={\r\n                    <Skeleton\r\n                      css={{\r\n                        width: \"32px\",\r\n                        height: \"32px\",\r\n                        borderRadius: \"50%\"\r\n                      }}\r\n                    />\r\n                  }\r\n                  primary={<Skeleton css={{ maxWidth: \"200px\" }} />}\r\n                />\r\n              </React.Fragment>\r\n            )}\r\n\r\n            {items && items.map(recipe => (\r\n              <RecipeListItem\r\n                id={recipe.id}\r\n                key={recipe.id}\r\n                editable\r\n                recipe={recipe as Recipe}\r\n              />\r\n            ))}\r\n\r\n            {fetching && (\r\n              <ListItem\r\n                interactive={false}\r\n                aria-live=\"polite\"\r\n                aria-busy=\"true\"\r\n                primary={<Skeleton animated css={{ width: \"150px\" }} />}\r\n              />\r\n            )}\r\n          </List>\r\n\r\n          {loading && <Spinner />}\r\n          {/*loadingError || (loadingMoreError && <div>Loading error...</div>)*/}\r\n          {loadingError  && <div>Loading error...</div> }\r\n          {hasMore && !loading && (\r\n            <div css={{ textAlign: \"center\" }}>\r\n              <Button  onPress={ () => toLoadMore() } >\r\n                装载更多的看看\r\n              </Button>\r\n            </div>\r\n          )}\r\n       </div>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\n\r\n/**上面的loadMore的updateQuery的函数原型定义这样的：...node_modules/apollo-client/core/ObservableQuery.d.ts:25；\r\n * =更新整个Query查询结果。\r\n  export interface FetchMoreOptions<TData = any, TVariables = OperationVariables> {\r\n    updateQuery: (previousQueryResult: TData, options: {\r\n        fetchMoreResult?: TData;    //这个是=后端服务器新增加数据。\r\n        variables?: TVariables;\r\n    }) => TData;\r\n}\r\n **/\r\n\r\n\r\n//引入useInfiniteScroll使用的四个要素：有滚动条的组件innerRef，hasMore，onFetch()，fetching；\r\n//<ScrollView >要么height:\"100%\"要么删除height参数让内容去撑开，不能使用height:\"70%\"之类的数，内部2次DIV嵌套,导致0.7*0.7=实际上内部高度。\r\n//较上层DIV若是style={{ height: \"xxx%\" }}，注意若父辈元素都没限定最小的高度，那么就会导致由底下的内容撑开了，这等价于没height参数=实际无效！；\"100%\"若父辈有px数就听父辈的。\r\n\r\n","D:\\home\\sei\\front-end\\src\\device\\ComposeDevice.tsx",["640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655","656","657"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, Global } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//import Editor, { tryValue } from \"./Editor\";\r\n//import { ImageUpload } from \"./ImageUpload\";\r\n//import { Image } from \"./Image\";\r\n//import { Value } from \"slate\";\r\nimport debug from \"debug\";\r\n//import initialValue from \"./value.json\";\r\n//import { Ingredient } from \"./RecipeList\";\r\nimport {\r\n  Navbar,\r\n  Toolbar,\r\n  Input,\r\n  Text,\r\n  Button,\r\n  IconButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useTheme,\r\n  InputBaseProps,\r\n  useToast,\r\n  LayerLoading,\r\n  Container,\r\n  ResponsivePopover,\r\n  IconMoreVertical,\r\n  IconArrowLeft,\r\n   MenuDivider, IconPackage\r\n} from \"customize-easy-ui-component\";\r\nimport {   useCreateDevice, useUpdateEntry } from \"./db\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport { Link,  useLocation } from \"wouter\";\r\nimport { Link as RouterLink } from \"wouter\";\r\n\r\n\r\nconst log = debug(\"app:Compose\");\r\n\r\ninterface ComposeDeviceProps {\r\n  id?: string;\r\n  readOnly?: boolean;\r\n  dt?:any;\r\n}\r\n\r\nexport const ComposeDevice: React.FunctionComponent<ComposeDeviceProps> = ({\r\n  readOnly,\r\n  id,\r\n  dt=null,\r\n}) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n // const {user,} = useSession();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [editing, setEditing] = React.useState(!readOnly);\r\n  /* const [content, ] = React.useState(() => {\r\n        return defaultDescription\r\n          ? ''\r\n          : null;\r\n      });　 */\r\n\r\n  //这里ingredients挂载初始化后只能setIngredients改了，useState()后面参数变动就不再起作用了。\r\n  const [ingredients, setIngredients] = React.useState<any>( dt||{} );\r\n  console.log(\"刚ComposeDevice经过EQPis\",dt,\"进行中id=\",id,\"ingredients=\",ingredients);\r\n  const [, setLocation] = useLocation();\r\n\r\n  const [Options, setOptions] = React.useState({});\r\n  const {result:entry, submit:submitfunc, error} = useCreateDevice({oid:\"暂且空着\",  ...ingredients});\r\n  /*\r\n  const {result, submitfunc:updateFunc, } = useUpdateEntry({\r\n    id: ingredients && ingredients.id,\r\n    unt: 1,\r\n    info: {...ingredients, id: undefined,isps:undefined,pos:undefined,ownerUnt:undefined,__typename:undefined\r\n          ,address: \"贵大厦\" },\r\n    });\r\n  */\r\n\r\n  //不能在这点击触发函数内部执行HOOKs!! 必须上移动外移到 界面组件的头部初始化hooks，随后点击触发调用hook钩子函数。\r\n  async function saveRecipe( a\r\n  ) {\r\n    try {\r\n      setLoading(true);\r\n      console.log(\"baochun等待之前１ ingredients=\", ingredients );\r\n      //这时才去修改submitfunc参数，已经来不及，setOptions异步执行；submitfunc会看见前面的取值。\r\n      setOptions({oid:\"test暂且空着\",  ...ingredients});\r\n      console.log(\"baochun等待之前２ ingredients=\", ingredients );\r\n      await submitfunc();   //要等待正常的结果应答从后端返回。\r\n      //submitfunc(); 立刻执行后面代码，这样不会等待后端应答的。\r\n      /*点击函数发送给后端服务器，即刻返回到这里了await submitfunc();　这个时候entry还不是后端的应答数据，要等到下一次entry被ＨＯＯＫ修正*/\r\n      console.log(\"等半天createEntry返回error=\",error,\"结果\",entry );\r\n\r\n      //加了await 后的　submitfunc();似乎也不能确保entry非空的，必须等待下一次render()。\r\n      entry && setLocation(\"/device/\" + entry.id, { replace: true } );\r\n      //原型是 PushCallback = (to: Path, replace?: boolean) => void;\r\n    } catch (err) {\r\n      setLoading(false);\r\n      toast({\r\n        title: \"捕获errcc错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      console.log(\"捕获err打了吗\", err);\r\n    }\r\n  }\r\n\r\n  //保存 编辑新的菜谱之后，要修正URL\r\n  React.useEffect(() => {\r\n    entry && ( setLocation(\"/device/\" + entry.id) );\r\n  }, [entry,setLocation]);\r\n\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\"\r\n        }\r\n      }}\r\n    >\r\n      <Helmet title={\"设备数据维护\"} />\r\n\r\n      <div\r\n        css={{  //控制小屏时的导航条底下的整个页面滚动。\r\n          flex: 1,\r\n          [theme.mediaQueries.md]: {\r\n            flex: \"none\"\r\n          }\r\n        }}\r\n      >\r\n        <div>\r\n          <Container>\r\n            <div\r\n              css={{\r\n                paddingTop: theme.spaces.lg,\r\n                paddingBottom: theme.spaces.lg\r\n              }}\r\n            >\r\n              {ingredients && (\r\n                <div>\r\n                  <Text variant=\"h5\">设备明细信息</Text>\r\n\r\n                      <div key={1}>\r\n                        {editing ? (\r\n                        <div>\r\n                          <ContainLine display={'设备号'}>\r\n                              <TransparentInput\r\n                                autoFocus={true}\r\n                                placeholder=\"那一台电梯？\"\r\n                                value={ingredients.cod||''}\r\n                                onChange={e => {\r\n                                  setIngredients( {\r\n                                    ...ingredients,\r\n                                    cod: e.target.value\r\n                                  });\r\n                                }}\r\n                              />\r\n                          </ContainLine>\r\n                          <ContainLine display={'监察识别码'}>\r\n                            <TransparentInput\r\n                              autoFocus={true}\r\n                              placeholder=\"导入的情形可以不填写\"\r\n                              value={ingredients.oid||''}\r\n                              onChange={e => {\r\n                                setIngredients( {\r\n                                  ...ingredients,\r\n                                  oid: e.target.value\r\n                                });\r\n                              }}\r\n                            />\r\n                          </ContainLine>\r\n                        </div>\r\n                        ) : (\r\n                          <div\r\n                            css={{\r\n                              backgroundColor: false\r\n                                ? theme.colors.palette.blue.lightest\r\n                                : \"transparent\",\r\n                              display: \"flex\",\r\n                              marginLeft: \"-0.25rem\",\r\n                              paddingLeft: \"0.25rem\",\r\n                              marginRight: \"-0.25rem\",\r\n                              paddingRight: \"0.25rem\",\r\n                              // borderRadius: \"0.25rem\",\r\n                              marginBottom: theme.spaces.xs,\r\n                              justifyContent: \"space-between\",\r\n                              [theme.mediaQueries.md]: {\r\n                                width: \"500px\"\r\n                              }\r\n                            }}\r\n                          >\r\n                            <Text\r\n                              css={{\r\n                                paddingRight: theme.spaces.xs,\r\n                                backgroundColor: false\r\n                                  ? theme.colors.palette.blue.lightest\r\n                                  : \"white\"\r\n                              }}\r\n                            >\r\n                              设备号：{dt.cod}\r\n                            </Text>\r\n                            <div\r\n                              css={{\r\n                                flex: 1,\r\n                                borderBottom: `1px dashed ${\r\n                                  theme.colors.border.muted\r\n                                }`,\r\n                                marginBottom: \"6px\"\r\n                              }}\r\n                            />\r\n                            <Text\r\n                              css={{\r\n                                paddingLeft: theme.spaces.xs,\r\n                                backgroundColor: false\r\n                                  ? theme.colors.palette.blue.lightest\r\n                                  : \"white\"\r\n                              }}\r\n                            >\r\n                              监察识别码：{dt.oid}\r\n                            </Text>\r\n                          </div>\r\n                        )}\r\n                        <br/>\r\n                        <Text>暂时无独立设备库，目前设备是导入一个就积累一个的设备列表，待完善</Text>\r\n                      </div>\r\n\r\n                </div>\r\n              )}\r\n\r\n              <LayerLoading loading={loading} />\r\n              {editing && <Button\r\n                  intent=\"primary\"\r\n                  disabled={false}\r\n                  css={{ marginLeft: theme.spaces.sm }}\r\n                  onPress={() => {  //按钮里面看不到最新的input取值的。\r\n                     saveRecipe(null);\r\n                  }}\r\n                  >\r\n                从旧平台导入一个设备吧\r\n                </Button>\r\n              }\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface TransparentInputProps extends InputBaseProps {}\r\n\r\nconst TransparentInput = (props: TransparentInputProps) => {\r\n\r\n  return (\r\n    <Input\r\n      css={{\r\n        background: \"none\",\r\n        border: \"none\",\r\n        boxShadow: \"none\",\r\n        // paddingTop: theme.spaces.xs,\r\n        // paddingBottom: theme.spaces.xs,\r\n        \":focus\": {\r\n          outline: \"none\",\r\n          boxShadow: \"none\",\r\n          background: \"none\"\r\n        }\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\n\r\n//其余的属性，({ display, children, ...props })  => {\r\nconst ContainLine =({ display, children, ...props })  => {\r\n  const theme = useTheme();\r\n  return (\r\n    <div\r\n      css={{\r\n     //   marginTop: \"-0.25rem\",\r\n     //   marginLeft: \"-0.75rem\",\r\n     //   marginRight: \"-0.75rem\"\r\n      }}\r\n      {...props}\r\n    >\r\n\r\n      <div\r\n        css={{\r\n          backgroundColor: false\r\n            ? theme.colors.palette.blue.lightest\r\n            : \"transparent\",\r\n          display: \"flex\",\r\n          [theme.mediaQueries.md]: {\r\n            maxWidth: \"400px\"\r\n          }\r\n        }}\r\n      >\r\n        <Text\r\n          css={{\r\n            display: \"block\",\r\n            width: \"100%\",\r\n            padding: \"0.5rem 0.75rem\"   //无法和输入组建的大小联动。\r\n          }}\r\n        >\r\n          {display}\r\n          </Text>\r\n\r\n        {children}\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n//注意：component is changing an uncontrolled input of type undefined to be controlled：使得输入捕获异常．\r\n","D:\\home\\sei\\front-end\\src\\device\\SearchDeviceBox.tsx",["658","659","660","661","662"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  InputGroup,\r\n  Input,\r\n  useTheme,\r\n  VisuallyHidden,\r\n  Button,\r\n  useResponsiveContainerPadding,\r\n  IconSearch, IconLayers, IconButton, Dialog, Text, IconMoreVertical, ResponsivePopover, IconX\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport { ContainLine, TransparentInput } from \"../comp/base\";\r\nimport { DevfilterContext } from \"../context/DevfilterContext\";\r\nimport { useApolloClient, gql, useQuery, NetworkStatus } from \"@apollo/client\";\r\nimport { Link as RouterLink } from \"wouter\";\r\n\r\n//根据unitID查具体\r\nconst GET_UNIT_DETAIL = gql`\r\n  query Unit($id: ID) {\r\n    unit(id: $id) {\r\n      id name company{id name no} person{id name no}\r\n    }\r\n  }\r\n`;\r\n//非高层次通用的组件。语义整合：　数据获取和规格化显示部分组合在一个文件内。\r\nconst UnitDetail= ( { id, onCancel }\r\n) => {\r\n  const theme = useTheme();\r\n  //const [getUnit, { loading, data }] = useLazyQuery(GET_UNIT_DETAIL);  https://www.apollographql.com/docs/react/data/queries/\r\n  const { loading, error, data, refetch,networkStatus } = useQuery(GET_UNIT_DETAIL, {\r\n    variables: { id },\r\n    notifyOnNetworkStatusChange: true\r\n  });\r\n  //Hooks必须放在条件分支if 前面，确保每一次render时刻hook执行顺序一致。\r\n  if (networkStatus === NetworkStatus.refetch) return <React.Fragment>Refetching!</React.Fragment>;\r\n  if (loading)   return null;\r\n  if (error) return <React.Fragment>Error! ${error}</React.Fragment>;\r\n    //<button onClick={() => refetch()}>Refetch!</button>\r\n  return (\r\n    <React.Fragment>\r\n      <RouterLink to={`/unit/${id? id:''}`}>\r\n        <TransparentInput\r\n        readOnly\r\n        value={data.unit?.company?.name||data.unit?.person.name||''}\r\n        />\r\n      </RouterLink>\r\n      { data.unit && <IconButton\r\n          css={{ marginLeft: theme.spaces.sm}}\r\n          variant=\"ghost\"\r\n          icon={<IconX />}\r\n          label=\"删除\"\r\n          onPress={onCancel}\r\n          />\r\n      }\r\n    </React.Fragment>\r\n  );\r\n/*   <TransparentInput\r\n            autoFocus={true}\r\n            value={editor?.ownerId||''}\r\n            onChange={e => {\r\n              setEditor( {  ...editor, ownerId: e.currentTarget.value||undefined } );\r\n            }}\r\n          />\r\n  */\r\n}\r\n\r\n\r\nexport interface SearchBoxProps {\r\n  setQuery: React.Dispatch<React.SetStateAction<any>>;\r\n  query: any;\r\n  label?: string;\r\n  updateQuery?: any;   //立刻更新列表\r\n}\r\n//query,setQuery是搜索输入框的；不是弹出参数对话框；\r\nexport const SearchDeviceBox: React.FunctionComponent<SearchBoxProps> = ({\r\n  query,\r\n  label = \"搜索吧 all recipes\",\r\n   setQuery,\r\n  updateQuery,\r\n   ...other\r\n}) => {\r\n  const theme = useTheme();\r\n  const responsiveContainerPadding = useResponsiveContainerPadding();\r\n  //设备选择的范围缩小功能\r\n  const [open, setOpen] = React.useState(false);\r\n  const [ingredients, setIngredients] = React.useState<any>( {} );\r\n  const {filter, setFilter} =React.useContext(DevfilterContext);\r\n  //修改中间状态;     //Todo:ingredients合并\r\n  const [editor, setEditor] = React.useState<any>(filter);\r\n  console.log(\"来看SearchDeviceBox当前的 ingredients=\",ingredients,\"filter=\",filter,\"query=\",query);\r\n  //const client = useApolloClient();\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <form\r\n      css={{\r\n        margin: 0,\r\n        position: \"relative\"\r\n      }}\r\n      onSubmit={e => e.preventDefault()}\r\n    >\r\n      <InputGroup\r\n        css={{ margin: 0, position: \"relative\" }}\r\n        hideLabel\r\n        label={label}\r\n      >\r\n        <Input\r\n          type=\"search\"\r\n          inputSize=\"md\"\r\n          autoComplete=\"off\"\r\n          css={[\r\n            {\r\n              height: \"60px\",\r\n              textAlign: \"left\",\r\n              border: \"none\",\r\n              borderBottom: \"1px solid\",\r\n              borderColor: theme.colors.border.default,\r\n              borderRadius: 0,\r\n              WebkitAppearance: \"none\",\r\n              // background: \"transparent\",\r\n              boxShadow: \"none\",\r\n              \":focus\": {\r\n                boxShadow: \"none\",\r\n                backgroundColor: theme.colors.background.tint1\r\n              }\r\n            },\r\n            responsiveContainerPadding\r\n          ]}\r\n          {...other}\r\n          value={ query }\r\n          onChange={e => setQuery(e.target.value)}\r\n          placeholder={label}\r\n        />\r\n      </InputGroup>\r\n      <VisuallyHidden>\r\n        <Button type=\"submit\">搜索</Button>\r\n      </VisuallyHidden>\r\n      <IconSearch\r\n        aria-hidden\r\n        color={theme.colors.scales.gray[6]}\r\n        css={{\r\n          display: query ? \"none\" : \"block\",\r\n          position: \"absolute\",\r\n          right: `calc(2 * ${theme.spaces.lg})`,\r\n          top: \"50%\",\r\n          transform: \"translateY(-50%)\",\r\n          zIndex: 10\r\n        }}\r\n      />\r\n\r\n      <IconButton\r\n        onPress={() => setOpen(true)}\r\n        variant=\"ghost\"\r\n        label=\"定制可选参数\"\r\n        size=\"md\"\r\n        icon={<IconLayers />}\r\n        css={{\r\n          display: query ? \"none\" : \"block\",\r\n          position: \"absolute\",\r\n          right: theme.spaces.sm,\r\n          top: \"50%\",\r\n          transform: \"translateY(-50%)\",\r\n          zIndex: 10,\r\n          height: 'unset',\r\n          width: 'unset'\r\n        }}\r\n      />\r\n\r\n    </form>\r\n\r\n      <Dialog\r\n        mobileFullscreen\r\n        isOpen={open}\r\n        onRequestClose={() => setOpen(false)}\r\n        title=\"选择参数缩小查询的范围\"\r\n      >\r\n        <div css={{ padding: theme.spaces.lg }}>\r\n          <Text>为了减少查询结果集的数量</Text>\r\n          <div>\r\n            <ContainLine display={'出厂编号'}>\r\n              <TransparentInput\r\n                autoFocus={true}\r\n                placeholder=\"名字\"\r\n                value={editor?.fno||''}\r\n                onChange={e => {\r\n                  setEditor( {  ...editor, fno: e.currentTarget.value||undefined } );\r\n                }}\r\n              />\r\n            </ContainLine>\r\n            <ContainLine display={'任务---部门'}>\r\n              <TransparentInput\r\n                autoFocus={true}\r\n                placeholder=\"名字\"\r\n                value={ingredients.task && ingredients.task.dep}\r\n                onChange={e => {\r\n                  setIngredients( {\r\n                    ...ingredients,\r\n                    task: {dep: e.target.value}\r\n                  });\r\n                }}\r\n              />\r\n            </ContainLine>\r\n            <ContainLine display={'检验---检验人员包含'}>\r\n              <TransparentInput\r\n                autoFocus={true}\r\n                value={((ingredients.isps||{}).ispMen||{}).username}\r\n                onChange={e => {\r\n                  setIngredients( {\r\n                    ...ingredients,\r\n                    isps:{ispMen:{username: e.target.value}}\r\n                  });\r\n                }}\r\n              />\r\n            </ContainLine>\r\n            <ContainLine display={'设备产权人的单位ID'}>\r\n                <UnitDetail id={editor?.ownerId}\r\n                            onCancel={() => {\r\n                              //取消这一个Id\r\n                              setEditor( {  ...editor, ownerId:undefined })\r\n                            } }\r\n                />\r\n            </ContainLine>\r\n            <ContainLine display={'设备使用单位ID'}>\r\n              <UnitDetail id={editor?.useUid}\r\n                          onCancel={() => {\r\n                            //取消这一个Id\r\n                            setEditor( {  ...editor, useUid:undefined })\r\n                          } }\r\n              />\r\n            </ContainLine>\r\n          </div>\r\n\r\n          <div\r\n            css={{\r\n              display: \"flex\",\r\n              marginTop: theme.spaces.lg,\r\n              justifyContent: \"flex-end\"\r\n            }}\r\n          >\r\n            <Button intent=\"primary\"\r\n                    onPress={e => {\r\n                      setOpen(false);\r\n                      //用client.clearStore();导致devicesFind= undefined\r\n                      //client.resetStore(); 可以啊。\r\n                      //setQuery({ ...ingredients})\r\n                     /* updateQuery( (previousQueryResult, options ) => {\r\n                          console.log(\"取更２新options=\",options,\"previousQueryResult=\",previousQueryResult);\r\n                          return null;\r\n                          }\r\n                        );\r\n                      */\r\n                      setFilter( {  ...filter, ...editor } );\r\n                      //console.log(`参数设置好了 took ${duration}ms`);   //执行时间长度102ms　setXXX同步执行\r\n                    } }\r\n            >\r\n              参数设置好了\r\n            </Button>\r\n          </div>\r\n          <Text>搜索框输入可用后端识别转义符号  % 任意的几个字符  _ 某个字符</Text>\r\n          <br/>\r\n          <Button intent=\"primary\"\r\n                  onPress={e => setFilter(null) }\r\n          >清空过滤器设置\r\n          </Button>\r\n        </div>\r\n\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\n/*图标触发：\r\n<IconButton\r\n  component={Link}\r\n  to=\"/device/option\"\r\n<Dialog 中等大屏幕时刻触发不了。\r\n*/\r\n\r\n","D:\\home\\sei\\front-end\\src\\device\\DeviceListInner.tsx",["663","664","665","666","667"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  Avatar,\r\n  IconButton,\r\n  Button,\r\n  MenuList,\r\n  Stack,\r\n  useTheme,\r\n  IconMoreVertical,\r\n  StackTitle,\r\n  Skeleton, MenuItem, IconPackage, ResponsivePopover\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport {  usePaginateQueryDevice,  } from \"./db\";\r\nimport {  useLocation } from \"wouter\";\r\nimport { useEffect } from \"react\";\r\nimport { useInView } from 'react-intersection-observer'\r\n//import { PullToRefresh,PullDownContent,RefreshContent,ReleaseContent } from \"react-js-pull-to-refresh\";\r\n//import { usePrevious } from \"customize-easy-ui-component/esm/Hooks/previous\";\r\n\r\ninterface DeviceListInner {\r\n  filter: any   //用props参数看看\r\n}\r\nexport const DeviceListInner: React.FunctionComponent<\r\n  DeviceListInner\r\n> = ({ filter }) => {\r\n  const theme = useTheme();\r\n  const [, setLocation] = useLocation();\r\n  const {\r\n    loading,\r\n    items: devicesFind,\r\n    fetchMore: loadMore　,refetch, updateQuery\r\n  } =usePaginateQueryDevice(filter);\r\n\r\n  //上面这个副作用必须 加usersFind，否则无法继续处理后端数据带来的必要的UI反馈变化。\r\n  const refLsize = React.useRef(null);\r\n  const [refMore, acrossMore] = useInView({threshold: 0});\r\n  //后端返回了loading变动=会更新整个DeviceList组件，同时也执行updateQuery: ()=>{}回调更新数据。\r\n  const toLoadMore = React.useCallback(\r\n    async () => {\r\n      refLsize.current=devicesFind?.length;    //看看有没有新增加项目\r\n      devicesFind && loadMore({\r\n        variables: {\r\n          offset: devicesFind.length,\r\n        }\r\n      });\r\n    },\r\n    [loadMore ,devicesFind]\r\n  );\r\n\r\n  useEffect( () => { acrossMore && (refLsize.current!==devicesFind?.length) && toLoadMore() },\r\n        [acrossMore,devicesFind,toLoadMore ]);\r\n\r\n  console.log(\"霉$R1变 refLsize=\",refLsize.current,\"devicesFind=\",devicesFind?.length);\r\n\r\n  const callRefetch = React.useCallback(() => {\r\n    //setHasMore(true);\r\n    refetch( filter );\r\n  }, [refetch, filter]);\r\n\r\n  //有些场合不需要做refetch就能触发，可能被appollo自动优化。变化驱动链条query＝>filter\r\n  //有问题：refetch这个时间的入口参数filter还是捕获的旧的，须延迟一个render()后再去做。\r\n  React.useEffect(() => {\r\n    //console.log(\"callRefetch重做归零filter=\",filter,\"devicesFind=\",devicesFind);\r\n    callRefetch();\r\n  }, [filter,callRefetch]);\r\n\r\n  //控件<Stack 是堆叠式的，像导航条；适用同一个模板显示只需上级给下级参数调整的场景。根据上一叠页面选择触发状态relation给下一叠参数来控制下一级显示；更多嵌套很困难。\r\n  return (\r\n    <React.Fragment>\r\n            <List>\r\n              {loading && (\r\n                <React.Fragment>\r\n                  <ListItem\r\n                    interactive={false}\r\n                    contentBefore={\r\n                      <Skeleton\r\n                        css={{\r\n                          width: \"32px\",\r\n                          height: \"32px\",\r\n                          borderRadius: \"50%\"\r\n                        }}\r\n                      />\r\n                    }\r\n                    primary={<Skeleton css={{ maxWidth: \"160px\" }} />}\r\n                  />\r\n                  <ListItem\r\n                    interactive={false}\r\n                    contentBefore={\r\n                      <Skeleton\r\n                        css={{\r\n                          width: \"32px\",\r\n                          height: \"32px\",\r\n                          borderRadius: \"50%\"\r\n                        }}\r\n                      />\r\n                    }\r\n                    primary={<Skeleton css={{ maxWidth: \"200px\" }} />}\r\n                  />\r\n                </React.Fragment>\r\n              )}\r\n\r\n              {\r\n                devicesFind?.map((hit,i) => (\r\n                  <ListItem key={hit.id}\r\n                      onPress={e => {\r\n                        setLocation(`/device/${hit.id}`);\r\n                      }}\r\n                    contentBefore={\r\n                      <React.Fragment>\r\n                        <Avatar size=\"xs\" name={'曳'}/>\r\n                        <Avatar size=\"xs\" name={'有'}/>\r\n                      </React.Fragment>\r\n                    }\r\n                    primary={`${hit.cod}`}\r\n                    contentAfter={\r\n                      <ResponsivePopover\r\n                        content={\r\n                          <MenuList>\r\n                            <MenuItem onPress={ async () => {\r\n                              //await setRepId(recipe.id);    handleDelete(recipe.id)\r\n                            }\r\n                            }>功能待续\r\n                            </MenuItem>\r\n                            <MenuItem contentBefore={<IconPackage />}  onPress={() => {\r\n                              setLocation(\"/device/new\", { replace: false })\r\n                            } }>\r\n                             加个设备\r\n                            </MenuItem>\r\n                          </MenuList>\r\n                        }\r\n                      >\r\n                        <IconButton variant=\"ghost\" icon={<IconMoreVertical/>} label=\"菜单\"/>\r\n                      </ResponsivePopover>\r\n                    }\r\n                  />\r\n              ))}\r\n\r\n            </List>\r\n\r\n              <div\r\n                css={{\r\n                  textAlign: \"center\",\r\n                  marginBottom: theme.spaces.md,\r\n                  marginTop: theme.spaces.md\r\n                }}\r\n              >\r\n                { (refLsize.current!==devicesFind?.length)  &&  (\r\n                  <div>\r\n                    <Button disabled={loading} onPress={ () =>{\r\n                      toLoadMore();     //虽然引用表现是异步的，但还是需要某些步骤需要同步执行的，只能说是其内部深度嵌套了个Promise()。\r\n                      //console.log(`按拉扯获取took ${duration}ms`);　//异步处理了，这里实际耗时也不短暂122ms; 可能因为loading要同步首先设置的。\r\n                    } }>\r\n                      按，拉扯获取更多......\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n                {(refLsize.current===devicesFind?.length)  &&　<React.Fragment>\r\n                      <span>嘿，没有更多了</span>\r\n                  </React.Fragment>\r\n                }\r\n              </div>\r\n              <div  ref={refMore}  css={{height: \"1px\"}}> </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","D:\\home\\sei\\front-end\\src\\report\\TemplateLoader.tsx",["668"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  useTheme,\r\n  Button,\r\n  useToast,\r\n  LayerLoading,\r\n  Text,\r\n  Navbar,\r\n  Toolbar,\r\n  IconButton,\r\n  IconArrowLeft,\r\n  ResponsivePopover,\r\n  MenuList,\r\n  MenuItem,\r\n  IconMoreVertical\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport { InternalItemHandResult, OriginalViewProps, ReportViewProps } from \"./comp/base\";\r\nimport { useCommitOriginalData } from \"./db\";\r\n\r\nimport { EditStorageContext } from \"./StorageContext\";\r\nimport { Link as RouterLink } from \"wouter\";\r\nimport { TransparentInput } from \"../comp/base\";\r\nimport { useThrottle } from \"../hooks/useHelpers\";\r\n\r\n/*\r\n错误！ 本地重复定义了外部全局实例，结果本文件内只能看到 自己的EditStorageContext，而不是公用的哪一个。\r\nexport const EditStorageContext = React.createContext<EditStorageContextType | null>(\r\n  null\r\n);\r\n*/\r\n\r\n\r\ninterface RecordStarterProps {\r\n  id: string;\r\n  action: string;\r\n  source: any;\r\n  template: React.ReactElement<React.ForwardRefRenderFunction<InternalItemHandResult,OriginalViewProps>>;\r\n  templateID: string;\r\n  verId: string;\r\n}\r\n//这才是右边的！，编辑，或原始记录的查看：\r\nexport const RecordStarter: React.FunctionComponent<RecordStarterProps> = ({\r\n    id,\r\n    action,\r\n    source,\r\n    template,\r\n    templateID,\r\n    verId,\r\n    ...other\r\n }) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  //初始化不可以直接取React.useState(source || {})，不然路由器切换就变成旧source。新修改被抛弃了。\r\n  const {storage, } =React.useContext(EditStorageContext);\r\n  //const [enable, setEnable] = React.useState(true);\r\n  //useState(默认值) ； 后面参数值仅仅在组件的装载时期有起作用，若再次路由RouterLink进入的，它不会依照该新默认值去修改show。useRef跳出Cpature Value带来的限制\r\n//旧模式淘汰！  const ref =React.useRef<InternalItemHandResult>(null);\r\n\r\n  //ref可以共用current指向最新输入过的子组件；但父组件对.current的最新变化无法实时感知，只能被动刷新获知current变动。\r\n  //子组件利用useImperativeHandle机制把数据回传给父组件，配套地父辈用ref来定位子组件。\r\n  //保存按钮点击后必须首先触发template动态加载的子组件即TemplateView的做1次render()后，ref.current.inp才能收到儿孙组件的最新数据。\r\n//  const newOut={ ...(ref.current&&ref.current.inp) };\r\n\r\n  //审核保存?对应数据deduction结论栏目＋审核手动修改；适用于出具正式报告，正式报告只读取deduction部分。依据审核保存>随后才是原始记录复检>初检data。\r\n  //若复检保存 ，复检rexm，正检data。\r\n  const {result, submit:updateFunc,loading } = useCommitOriginalData({\r\n    id,  operationType:1,\r\n    data:  JSON.stringify(storage || source) ,\r\n    deduction:{emergencyElectric:'45,423'}\r\n  });\r\n\r\n  //console.log(\"RecordView捕获,切花source=\", source,\"新storage=\",storage);\r\n\r\n  async function updateRecipe(\r\n    id: string ) {\r\n    let yes= result && result.id;\r\n    try {\r\n      //提交给后端， 这里将会引起底层变动，导致本组件即将要render3次。有更新的4次。更新比读取多了1次render。\r\n      await updateFunc();\r\n    } catch (err) {\r\n      toast({\r\n        title: \"后端请求错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      //很多错误是在这里捕获的。\r\n      console.log(\"updateRecipe返回了,捕获err\", err);\r\n      return;\r\n    }\r\n    //这里无法获得result值，就算所在组件顶层已经获得result值，这里可能还是await () 前那样null;\r\n    console.log(\"保存返回了＝\", result,\"yes=\", yes);\r\n    toast({\r\n      title: \"保存返回了\",\r\n      subtitle: '报告ID：'+id,\r\n      intent: \"info\"\r\n    });\r\n    //除非用const {data: { buildTask: some }} = await updateFunc()捕捉当前操作结果; 否则这时这地方只能用旧的result,点击函数里获取不到最新结果。\r\n    //须用其它机制，切换界面setXXX(标记),result？():();设置新的URL转场页面, 结果要在点击函数外面/组件顶层获得；组件根据操作结果切换页面/链接。\r\n  }\r\n\r\n  //const [throttledUpdateBackend, timer1]= useThrottle(updateRecipe,0);\r\n  //延迟3秒才执行的; 可限制频繁操作，若很多下点击的3秒后触发2次。\r\n  //【注意】延迟时间设置后，页面切换会报错，组件已经卸载，还来setEnable啊，状态错误！\r\n  const {doFunc:throttledUpdateRecipe, ready} = useThrottle(updateRecipe,5000);\r\n  const refEditor =React.useRef<InternalItemHandResult>(null);\r\n  const {doFunc:throttleDoConfirm, ready:confirmEnable} =useThrottle((refEditor as any)?.current?.doConfirm);\r\n  //const [throttledUpdateEnable, isReady] = useThrottle(setEnable, 5000);\r\n  /*\r\n  React.useEffect(() => {\r\n    return () => {\r\n      clearTimeout(timer2);\r\n    };\r\n  }, [timer2]);\r\n  */\r\n  //可是这里return ；将会导致子孙组件都会umount!! 等于重新加载==路由模式刷新一样； 得权衡利弊。\r\n  // if(updating)  return <LayerLoading loading={updating} label={'正在获取后端应答，加载中请稍后'}/>;\r\n  //管道单线图，数量大，图像文件。可仅选定URL，预览图像。但是不全部显示出来，微缩摘要图模式，点击了才你能显示大的原图。\r\n  /*\r\n  async function toSaveBackEnd() {\r\n      //手机上更新模板TemplateView子组件重做render触发失效。只好采用延迟策略，每个分区项目的保存处理前准备，作一次render完了，才能发送数据给后端。\r\n      setEnable(false);\r\n      await updateRecipe('1');    //阻塞了await关键字只能用在aync定义的函数内。\r\n\r\n    throttledUpdateEnable(true);\r\n  }\r\n*/\r\n\r\n  if (!id) {\r\n    return null;\r\n  }\r\n\r\n  //无法把<EditStorageContext.Provider value={{storage,setStorage}}>放这附近能产生效果，必须提升到顶级路由组件内去做。\r\n  return (\r\n    <React.Fragment>\r\n      <Navbar\r\n        css={{\r\n          zIndex: theme.zIndices.sticky,\r\n          backgroundColor: \"white\",\r\n          boxShadow: theme.shadows.sm,\r\n          position: \"sticky\",\r\n          top: 0,\r\n          \"@media (min-width:800px)\": {\r\n            position: \"static\"\r\n          },\r\n          \"@media print\": {\r\n            display: \"none\"\r\n          }\r\n        }}\r\n      >\r\n        <Toolbar\r\n          css={{\r\n            alignItems: \"center\",\r\n            display: \"flex\"\r\n          }}\r\n        >\r\n          <RouterLink  to={`/report/${templateID}/ver/${verId}/none/${id}`}>\r\n            <IconButton\r\n              icon={<IconArrowLeft />}\r\n              label=\"后退\"\r\n              variant=\"ghost\"\r\n              noBind\r\n              css={{\r\n                marginRight: theme.spaces.sm,\r\n                \"@media (min-width:800px)\": {\r\n                  display: \"none\"\r\n                }\r\n              }}\r\n            />\r\n          </RouterLink>\r\n          {(action==='ALL'|| action==='printAll') ? (\r\n            <div css={{ marginLeft: \"-0.75rem\", flex: 1 }}>\r\n              <TransparentInput\r\n                autoComplete=\"off\"\r\n                autoFocus\r\n                inputSize=\"lg\"\r\n                value={action}\r\n                placeholder=\"报告的详细可打印信息\"\r\n                aria-label=\"Recipe title\"\r\n                onChange={e => {\r\n                }}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <Text\r\n              css={{\r\n                flex: 1,\r\n                textAlign: \"center\",\r\n                \"@media (min-width:800px)\": {\r\n                  textAlign: \"left\"\r\n                }\r\n              }}\r\n              wrap={false}\r\n              variant=\"h5\"\r\n              gutter={false}\r\n            >\r\n              报告ID：{id}\r\n            </Text>\r\n          )}\r\n          <div\r\n            css={{\r\n              display: 'inline-flex',\r\n            }}\r\n          >\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem disabled={!ready} onPress={ ()=>throttledUpdateRecipe(id) }>\r\n                    保存到服务器\r\n                  </MenuItem>\r\n                  <MenuItem\r\n                    onPress={() => {\r\n                    }}\r\n                  >\r\n                    编辑\r\n                  </MenuItem>\r\n                  <MenuItem disabled={!confirmEnable}\r\n                       onPress={() => {\r\n                           if(throttleDoConfirm)  throttleDoConfirm(true);\r\n                           else (refEditor as any).current!.doConfirm(true);\r\n                       } }>\r\n                  全部项目一起确认\r\n                  </MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <IconButton\r\n                css={{\r\n                  display: true ? undefined : \"none\",\r\n                  marginLeft: theme.spaces.sm,\r\n                }}\r\n                variant=\"ghost\"\r\n                icon={<IconMoreVertical />}\r\n                label=\"显示菜单\"\r\n              />\r\n            </ResponsivePopover>\r\n            {(\r\n              <Button\r\n                css={{\r\n                  marginLeft: theme.spaces.sm,\r\n                  \"@media (max-width:799px)\": {\r\n                    display: \"none\"\r\n                  }\r\n                }}\r\n                intent={'warning'}\r\n                disabled ={!ready}\r\n                loading ={loading}\r\n                onPress={ ()=>throttledUpdateRecipe(id) }\r\n              >\r\n              保存到服务器\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Toolbar>\r\n      </Navbar>\r\n      <div  css={{\r\n        \"@media not print\": {\r\n          display: \"none\"\r\n        }\r\n      }}>\r\n        <Text variant=\"h4\" css={{textAlign:'center'}}>福建省特种设备检验研究院</Text>\r\n         <Text>\r\n         本原始记录对应的报告模板类型：{templateID}，版本：{verId}，报告ID：{id}\r\n         </Text>\r\n        <hr/>\r\n      </div>\r\n      {\r\n        //useMemo使用后：各分区项目子组件inp各自独立的，分区项目子组件内若使用setInp(null) 清空重置后，无法靠重新拉取后端数据来保证恢复显示。\r\n        //项目子组件使用setInp(null) 重置后，若上级组件重新取后端数据没变化的，也必须再次路由后再进入才可以让各分区项目子组件render恢复显示数据。\r\n        React.cloneElement(template as React.ReactElement<any>, {\r\n          ref: refEditor,\r\n          inp: source,\r\n          action,\r\n          repId: id,\r\n        })\r\n      }\r\n     {/*确认修改按钮，需要每个当前检验项目的编辑器inp，所以无法提升到这个层次做触发*/}\r\n      <Button\r\n        css={{ marginTop: theme.spaces.md }}\r\n        size=\"lg\"  intent={'warning'}\r\n        disabled ={!ready}\r\n        loading ={loading}\r\n        onPress={ ()=>throttledUpdateRecipe(id) }\r\n      >保存到服务器</Button>\r\n      <LayerLoading loading={loading} />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface ReportStarterProps {\r\n  id: string;\r\n  source: any;\r\n  template: React.ReactElement<React.ForwardRefRenderFunction<InternalItemHandResult,ReportViewProps>>;\r\n}\r\n//这才是右边的！，编辑，或原始记录的查看：\r\nexport const ReportStarter: React.FunctionComponent<ReportStarterProps> = ({\r\n                                                                             id,\r\n                                                                             source,\r\n                                                                             template,\r\n                                                                             ...other\r\n                                                                           }) => {\r\n  //初始化不可以直接取React.useState(source || {})，不然路由器切换就变成旧source。新修改被抛弃了。\r\n // const {storage, } =React.useContext(EditStorageContext);\r\n  //console.log(\"ReportStarter捕获,切花source=\", source,\"新storage=\",storage);\r\n  if (!id) {\r\n    return null;\r\n  }\r\n\r\n  //无法把<EditStorageContext.Provider value={{storage,setStorage}}>放这附近能产生效果，必须提升到顶级路由组件内去做。\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        //useMemo使用后：各分区项目子组件inp各自独立的，分区项目子组件内若使用setInp(null) 清空重置后，无法靠重新拉取后端数据来保证恢复显示。\r\n        //项目子组件使用setInp(null) 重置后，若上级组件重新取后端数据没变化的，也必须再次路由后再进入才可以让各分区项目子组件render恢复显示数据。\r\n        React.cloneElement(template as React.ReactElement<any>, {\r\n          source,\r\n          repId: id,\r\n        })\r\n      }\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n","D:\\home\\sei\\front-end\\src\\maintenance\\elevator\\PeriodicalInspection.O-1.tsx",["669","670","671"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Text,\r\n  useTheme,\r\n  Button, MenuItem, MenuList,\r\n  InputGroupLine,\r\n  SuffixInput, useCollapse, Input, ResponsivePopover, IconChevronDown, Layer, TextArea, Select\r\n} from \"customize-easy-ui-component\";\r\nimport {Table, TableBody,  TableRow, Cell, CCell} from \"../../comp/TableExt\";\r\nimport {\r\n  IndentationLayText, InspectItemHeadColumn,\r\n  InspectRecordHeadColumn,\r\n  InspectRecordTitle, InspectZoneHeadColumn,\r\n  SelectHookfork, TemplateViewProps,\r\n  useItemControlAs, useProjectListAs\r\n} from \"../comp/base\";\r\nimport {  InternalItemHandResult, InternalItemProps } from \"../comp/base\";\r\nimport { callSubitemChangePar, callSubitemShow, mergeSubitemRefs } from \"../../utils/tools\";\r\nimport orderBy from \"lodash.orderby\";\r\n\r\n\r\nlet   id = 0;\r\nconst genId = () => ++id;\r\nfunction createItem( order:  number, content: React.ReactNode) {\r\n  return {id:genId(), order, content};\r\n}\r\n\r\nconst TemplateView=\r\n  React.forwardRef((\r\n     {inp, showAll=false}:TemplateViewProps,   ref\r\n  ) => {\r\n    const clRefs =useProjectListAs({count: projectList.length});\r\n    let outCome=mergeSubitemRefs( ...clRefs.current! );\r\n　//测试修改someoneInp={ \"仪器表\": undefined} outCome={...outCome , ...someoneInp} ！会覆盖前面的=清空；\"仪器表\": []等效。\r\n //   let  someoneInp={\"机房高出\":undefined,\"梯子夹角\":\"\",\"梯子判定\":undefined,\"通道设置\":null};\r\n //   outCome={...outCome , ...someoneInp};   //后面undefined会覆盖前面的；\r\n\r\n    React.useImperativeHandle( ref,() => ({ inp: outCome }), [outCome] );\r\n    React.useEffect(() => {\r\n     callSubitemShow(showAll,  ...clRefs.current! );\r\n    }, [showAll, clRefs] );\r\n    React.useEffect(() => {\r\n      callSubitemChangePar(inp,  ...clRefs.current! );\r\n    }, [inp, clRefs] );\r\n    const recordList= React.useMemo(() =>\r\n            <React.Fragment>\r\n              {\r\n                (showAll ? projectList : orderBy(projectList,['order'],['asc']) )\r\n                  .map((each, i) => {\r\n                    return  React.cloneElement(each.content as React.ReactElement<any>, {\r\n                      ref: clRefs.current![i],\r\n                      key: each.order\r\n                    });\r\n                  })\r\n              }\r\n            </React.Fragment>\r\n                  ,[showAll, clRefs]);\r\n    return  recordList;\r\n  } );\r\n\r\nexport  const  myTemplate= <TemplateView/>;\r\n\r\n\r\nconst InternalItem1=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {登记资料,安全档案,管理制度,维保合同,作业人员证,安全档案_D} =par||{};\r\n      return {登记资料,安全档案,管理制度,维保合同,作业人员证,安全档案_D};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'检验项目 1.4'}>\r\n        <InspectRecordHeadColumn  level={'B'}  bigLabel={'1 技术资料'}  label={'1.4 使用资料'} tinyLabel={' 使用单位提供了以下资料：'} >\r\n          <div css={{ textAlign: 'center' }}>\r\n            其中详细条款有\r\n          </div>\r\n          <IndentationLayText title={'(2)安全技术档案应保存完好，至少包括：'}>\r\n            ①1.1、1.2、1.3所述文件资料[1.2的(3)项和1.3的(5)项除外];<br/>\r\n            ②监督检验报告;<br/>\r\n            ③定期检验报告;<br/>\r\n            ④日常检查与使用状况记录;<br/>\r\n            ⑤日常维护保养记录;<br/>\r\n            ⑥年度自行检查记录或者报告;<br/>\r\n            ⑦应急救援演习记录;<br/>\r\n            ⑧运行故障和事故记录等;\r\n          </IndentationLayText>\r\n          <IndentationLayText title={'(3)以岗位责任制为核心的电梯运行管理规章制度，包括：'}>\r\n            ①事故与故障的应急措施和救援预案；<br/>\r\n            ②电梯钥匙使用管理制度；<br/>\r\n            ③其它档案和制度;\r\n          </IndentationLayText>\r\n        </InspectRecordHeadColumn>\r\n        <InputGroupLine  label='(1)使用登记资料，内容与实物相符； '>\r\n          <SelectHookfork value={ (inp?.登记资料) ||''}\r\n                          onChange={e => setInp({ ...inp, 登记资料: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(2)安全技术档案应保存完好，至少包括： '>\r\n          <SelectHookfork value={ (inp?.安全档案) ||''}\r\n                          onChange={e => setInp({ ...inp, 安全档案: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine label='描述或问题'>\r\n          <Input value={ (inp?.安全档案_D) ||''} onChange={e => setInp({ ...inp, 安全档案_D: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(3)以岗位责任制为核心的电梯运行管理规章制度，包括： '>\r\n          <SelectHookfork value={ (inp?.管理制度) ||''}\r\n                          onChange={e => setInp({ ...inp, 管理制度: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(4)与取得相应资格单位签订的日常维护保养合同； '>\r\n          <SelectHookfork value={ (inp?.维保合同) ||''}\r\n                          onChange={e => setInp({ ...inp, 维保合同: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(5)按照规定配备的电梯安全管理和作业人员的特种设备作业人员证。 '>\r\n          <SelectHookfork value={ (inp?.作业人员证) ||''}\r\n                          onChange={e => setInp({ ...inp, 作业人员证: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem6d3=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {层站,门扇隙,门套隙,地坎隙,施力隙,门锁啮长,刀坎距,轮坎距,门扇间隙,最不利隙,层门锁,轿门锁,刀轮地隙} =par||{};\r\n      return {层站,门扇隙,门套隙,地坎隙,施力隙,门锁啮长,刀坎距,轮坎距,门扇间隙,最不利隙,层门锁,轿门锁,刀轮地隙};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n    const theme = useTheme();\r\n    const [floor, setFloor] = React.useState(null);\r\n    const cAppendix =useCollapse(false,true);\r\n    let  toothUnquf=inp?.层站?.find((f,i)=>{\r\n      return parseFloat(inp?.门锁啮长?.[f])<7;\r\n    });\r\n    let  knifeUnquf=inp?.层站?.find((f,i)=>{\r\n      return parseFloat(inp?.刀坎距?.[f])<5;\r\n    });\r\n    let  rollerUnquf=inp?.层站?.find((f,i)=>{\r\n      return parseFloat(inp?.轮坎距?.[f])<5;\r\n    });\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <InspectRecordTitle  control={eos}   label={'层门间隙门锁'}>\r\n          <InspectZoneHeadColumn label={'6 轿门与层门'} projects={['6.3','6.9','6.12']} />\r\n          <InspectRecordTitle  control={cAppendix} label={'附录A 层门间隙、啮合长度'}>\r\n            <div>\r\n              已检记录,每层七个尺寸:\r\n              {inp?.层站?.map((a,i)=>{\r\n                return <React.Fragment key={i}>\r\n                  <br/>{\r\n                  `[${a}]层: ${inp?.门扇隙?.[a]||''} , ${inp?.门套隙?.[a]||''} , ${inp?.地坎隙?.[a]||''} , ${inp?.施力隙?.[a]||''} , ${inp?.门锁啮长?.[a]||''} , ${inp?.刀坎距?.[a]||''} , ${inp?.轮坎距?.[a]||''};`\r\n                }\r\n                </React.Fragment>;\r\n              }) }\r\n            </div>\r\n            新增检查=〉\r\n            <InputGroupLine  label='首先设置当前层站号'>\r\n              <SuffixInput\r\n                autoFocus={true}\r\n                value={floor||''}\r\n                onChange={e => {setFloor( e.currentTarget.value) }}\r\n              >\r\n                <Button onPress={() =>floor&&(inp?.层站?.includes(floor)? null:\r\n                    setInp( (inp?.层站&&{...inp,层站:[...inp?.层站,floor] } )\r\n                      || {...inp,层站:[floor] } )\r\n                )}\r\n                >新增</Button>\r\n              </SuffixInput>\r\n            </InputGroupLine>\r\n            <div css={{ textAlign: 'center' }}>\r\n              <Button css={{ marginTop: theme.spaces.sm }} size=\"sm\"\r\n                      onPress={() => floor&&inp?.层站?.includes(floor) &&(\r\n                        setInp({...inp,层站:[...inp.层站.filter(a => a!==floor )],\r\n                          门扇隙:{...inp?.门扇隙,[floor]:undefined}, 门套隙:{...inp?.门套隙,[floor]:undefined}, 地坎隙:{...inp?.地坎隙,[floor]:undefined}\r\n                          , 施力隙:{...inp?.施力隙,[floor]:undefined}, 门锁啮长:{...inp?.门锁啮长,[floor]:undefined}, 刀坎距:{...inp?.刀坎距,[floor]:undefined}\r\n                          , 轮坎距:{...inp?.轮坎距,[floor]:undefined}\r\n                        })\r\n                      )}\r\n              >刪除该层</Button>\r\n            </div>\r\n            <InputGroupLine label={`层门门扇间间隙(层号 ${floor}):`}>\r\n              <SuffixInput\r\n                autoFocus={true}\r\n                placeholder=\"请输入测量数\"\r\n                value={ (inp?.门扇隙?.[floor] ) || ''}\r\n                onChange={e => floor&&setInp({ ...inp, 门扇隙:{...inp?.门扇隙,[floor]:e.currentTarget.value||undefined} }) }\r\n              >mm</SuffixInput>\r\n            </InputGroupLine>\r\n            <InputGroupLine label={`层门门扇与门套间隙(层号 ${floor}):`}>\r\n              <SuffixInput\r\n                autoFocus={true}\r\n                placeholder=\"请输入测量数\"\r\n                value={ (inp?.门套隙?.[floor] ) || ''}\r\n                onChange={e => floor&&setInp({ ...inp, 门套隙:{...inp?.门套隙,[floor]:e.currentTarget.value||undefined} }) }\r\n              >mm</SuffixInput>\r\n            </InputGroupLine>\r\n            <InputGroupLine label={`层门扇与地坎间隙(层号 ${floor}):`}>\r\n              <SuffixInput\r\n                autoFocus={true}\r\n                placeholder=\"请输入测量数\"\r\n                value={ (inp?.地坎隙?.[floor] ) || ''}\r\n                onChange={e => floor&&setInp({ ...inp, 地坎隙:{...inp?.地坎隙,[floor]:e.currentTarget.value||undefined} }) }\r\n              >mm</SuffixInput>\r\n            </InputGroupLine>\r\n            <InputGroupLine label={`层门扇间施力间隙(层号 ${floor}):`}>\r\n              <SuffixInput\r\n                autoFocus={true}\r\n                placeholder=\"请输入测量数\"\r\n                value={ (inp?.施力隙?.[floor] ) || ''}\r\n                onChange={e => floor&&setInp({ ...inp, 施力隙:{...inp?.施力隙,[floor]:e.currentTarget.value||undefined} }) }\r\n              >mm</SuffixInput>\r\n            </InputGroupLine>\r\n            <InputGroupLine label={`门锁啮合长度(层号 ${floor}):`}>\r\n              <SuffixInput\r\n                autoFocus={true}\r\n                placeholder=\"请输入测量数\"\r\n                value={ (inp?.门锁啮长?.[floor] ) || ''}\r\n                onChange={e => floor&&setInp({ ...inp, 门锁啮长:{...inp?.门锁啮长,[floor]:e.currentTarget.value||undefined} }) }\r\n              >mm</SuffixInput>\r\n            </InputGroupLine>\r\n            <InputGroupLine label={`轿门门刀与层门地坎间距(层号 ${floor}):`}>\r\n              <SuffixInput\r\n                autoFocus={true}\r\n                placeholder=\"请输入测量数\"\r\n                value={ (inp?.刀坎距?.[floor] ) || ''}\r\n                onChange={e => floor&&setInp({ ...inp, 刀坎距:{...inp?.刀坎距,[floor]:e.currentTarget.value||undefined} }) }\r\n              >mm</SuffixInput>\r\n            </InputGroupLine>\r\n            <InputGroupLine label={`门锁滚轮与轿门地坎间距(层号 ${floor}):`}>\r\n              <SuffixInput\r\n                autoFocus={true}\r\n                placeholder=\"请输入测量数\"\r\n                value={ (inp?.轮坎距?.[floor] ) || ''}\r\n                onChange={e => floor&&setInp({ ...inp, 轮坎距:{...inp?.轮坎距,[floor]:e.currentTarget.value||undefined} }) }\r\n              >mm</SuffixInput>\r\n            </InputGroupLine>\r\n          </InspectRecordTitle>\r\n\r\n          <InspectItemHeadColumn  level={'C'} label={'6.3 门间隙'}  >\r\n            <IndentationLayText title={'门关闭后,应当符合以下要求:'}>\r\n              (1) 门扇之间及门扇与立柱、门楣和地坎之间的间的间隙,对于乘客电梯不大于6mm;对于载货电梯不大于8mm,使用过程中由于磨损,允许达10mm;<br />\r\n              (2) 在水平移动门和折叠门主动门扇的开启方向,以150N的人力施加在一个最不利的点，前条所述的间\r\n              隙允许增大，但对于旁开门不大于30mm，对于中分门其总和不大于45mm\r\n            </IndentationLayText>\r\n            <Table css={{borderCollapse:'collapse'}}>\r\n              <TableBody>\r\n                <TableRow >\r\n                  <CCell>层</CCell>\r\n                  <CCell>门扇隙</CCell>\r\n                  <CCell>门套隙</CCell>\r\n                  <CCell>地坎隙</CCell>\r\n                  <CCell>施力隙</CCell>\r\n                </TableRow>\r\n                {inp?.层站?.map((a,i)=>{\r\n                  return <TableRow key={i}>\r\n                    <CCell>{a}</CCell>\r\n                    <CCell>{inp?.门扇隙?.[a]||''}</CCell>\r\n                    <CCell>{inp?.门套隙?.[a]||''}</CCell>\r\n                    <CCell>{inp?.地坎隙?.[a]||''}</CCell>\r\n                    <CCell>{inp?.施力隙?.[a]||''}</CCell>\r\n                  </TableRow>\r\n                }) }\r\n              </TableBody>\r\n            </Table>\r\n          </InspectItemHeadColumn>\r\n          <InputGroupLine  label='(1)门扇间隙'>\r\n            <SelectHookfork value={ inp?.门扇间隙 ||''}\r\n                            onChange={e => setInp({ ...inp, 门扇间隙: e.currentTarget.value||undefined}) }\r\n            />\r\n          </InputGroupLine>\r\n          <InputGroupLine  label='(2)人力施加在最不利点时间隙'>\r\n            <SelectHookfork value={ inp?.最不利隙 ||''}\r\n                            onChange={e => setInp({ ...inp, 最不利隙: e.currentTarget.value||undefined}) }\r\n            />\r\n          </InputGroupLine>\r\n\r\n          <InspectItemHeadColumn  level={'B'} label={'6.9 门的锁紧'}  >\r\n            <IndentationLayText title={'(1)每个层门都应当设有符合下述要求的门锁装置:'}>\r\n              ②锁紧动作由重力、永久磁铁或者弹簧来产生和保持，即使永久磁铁或者弹簧失效，重力亦不能导致开锁；<br/>\r\n              ③轿厢在锁紧元件啮合不小于7mm时才能启动；<br/>\r\n              ④门的锁紧由一个电气安全装置来验证，该装置由锁紧元件强制操作而没有任何中间机构，并且能够防止误动作；\r\n            </IndentationLayText>\r\n            (2)如果轿门采用了门锁装置,该装置也应当符合本条(1)的要求。\r\n          </InspectItemHeadColumn>\r\n          <div>\r\n            已检门锁啮合长度:\r\n            {inp?.层站?.map(a=>{\r\n              return ` ${a}层:${inp?.门锁啮长?.[a]||''};`\r\n            }) }\r\n          </div>\r\n          <InputGroupLine  label='(1)③门锁啮合长度{自动填}'>\r\n            <SelectHookfork value={toothUnquf? '×': inp?.层站?.length>=1? '√':''} disabled/>\r\n          </InputGroupLine>\r\n          <InputGroupLine  label='(1)层门门锁装置'>\r\n            <SelectHookfork value={ inp?.层门锁 ||''}\r\n                            onChange={e => setInp({ ...inp, 层门锁: e.currentTarget.value||undefined}) }\r\n            />\r\n          </InputGroupLine>\r\n          <InputGroupLine  label='(2)轿门门锁装置'>\r\n            <SelectHookfork value={ inp?.轿门锁 ||''}\r\n                            onChange={e => setInp({ ...inp, 轿门锁: e.currentTarget.value||undefined}) }\r\n            />\r\n          </InputGroupLine>\r\n\r\n          <InspectItemHeadColumn  level={'C'} label={'6.12 门刀、门锁滚轮与地坎间隙'}>\r\n            1）轿门门刀与层门地坎，层门锁滚轮与轿厢地坎的间隙应当不小于5mm；电梯运行时不得互相碰擦\r\n          </InspectItemHeadColumn>\r\n          <div>\r\n            轿门门刀与层门地坎间距:\r\n            {inp?.层站?.map(a=>{\r\n              return ` ${a}层:${inp?.刀坎距?.[a]||''};`\r\n            }) }\r\n          </div>\r\n          <div>\r\n            门锁滚轮与轿门地坎间距:\r\n            {inp?.层站?.map(a=>{\r\n              return ` ${a}层:${inp?.轮坎距?.[a]||''};`\r\n            }) }\r\n          </div>\r\n          <InputGroupLine  label='间隙应当不小于5mm{自动填}'>\r\n            <SelectHookfork value={knifeUnquf||rollerUnquf? '×': inp?.层站?.length>=1? '√':''} disabled/>\r\n          </InputGroupLine>\r\n          <InputGroupLine  label='(1)门刀、门锁滚轮与地坎间隙'>\r\n            <SelectHookfork value={ inp?.刀轮地隙 ||''}\r\n                            onChange={e => setInp({ ...inp, 刀轮地隙: e.currentTarget.value||undefined}) }\r\n            />\r\n          </InputGroupLine>\r\n        </InspectRecordTitle>\r\n      </React.Fragment>\r\n    );\r\n  } );\r\n\r\nconst InternalItem31=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {玻门防拖曳,门夹人,门运行,自动关门} =par||{};\r\n      return {玻门防拖曳,门夹人,门运行,自动关门};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'项目6.4-7'}>\r\n        <InspectZoneHeadColumn label={'6 轿门与层门'} projects={['6.4','6.5','6.6','6.7']} />\r\n        <InspectItemHeadColumn  level={'C'} label={'6.4 玻璃门防拖曳措施'}>\r\n        （1）层门和轿门采用玻璃门时，应当有防止儿童的手被拖曳的措施\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='玻璃门防拖曳措施'>\r\n          <SelectHookfork value={ inp?.玻门防拖曳 ||''}\r\n                          onChange={e => setInp({ ...inp, 玻门防拖曳: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'6.5 防止门夹人的保护装置'}>\r\n        （1）动力驱动的自动水平滑动门应当设置防止门夹人的保护装置，当人员通过层门入口被正在关闭的门扇撞击或者将被撞击时，该装置应当自动使门重新开启\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='防止门夹人的保护装置'>\r\n          <SelectHookfork value={ inp?.门夹人 ||''}\r\n                          onChange={e => setInp({ ...inp, 门夹人: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'6.6 门的运行与导向'}>\r\n        （1）层门和轿门正常运行时不得出现脱轨、机械卡阻或者在行程终端时错位；由于磨损、锈蚀或者火灾可能造成层门导向装置失效时，应当设置应急导向装置，使层门保持在原有位置\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='门的运行与导向'>\r\n          <SelectHookfork value={ inp?.门运行 ||''}\r\n                          onChange={e => setInp({ ...inp, 门运行: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'6.7 自动关闭层门装置'}>\r\n        （1）在轿门驱动层门的情况下，当轿厢在开锁区域之外时，如果层门开启（无论何种原因），应当有一种装置能够确保该层门自动关闭。自动关闭装置采用重块时，应当有防止重块坠落的措施\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='自动关闭层门装置'>\r\n          <SelectHookfork value={ inp?.自动关门 ||''}\r\n                          onChange={e => setInp({ ...inp, 自动关门: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem25=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {断丝数,断丝判定,钢绳直径,钢绳公称,钢绳判定,磨损变形,绳端固定} =par||{};\r\n      return {断丝数,断丝判定,钢绳直径,钢绳公称,钢绳判定,磨损变形,绳端固定};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n    if(false&&inp&&(parseFloat(inp?.断丝数) > 10 ) )\r\n        inp.断丝判定='×';\r\n    if(false&&inp&&(parseFloat(inp?.钢绳直径) < 0.85*parseFloat(inp?.钢绳公称) ) )\r\n        inp.钢绳判定='×';\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'检验项目 5.1-2'}>\r\n        <InspectZoneHeadColumn label={'5 悬挂装置、补偿装置及旋转部件防护'} projects={['5.1','5.2']} />\r\n        <InspectItemHeadColumn  level={'C'} label={'5.1 悬挂装置、补偿装置的磨损、断丝、变形'}>\r\n          出现下列情况之一时，悬挂钢丝绳和补偿钢丝绳应当报废：<br/>\r\n          ①出现笼状畸变、绳股挤出、扭结、部分压扁、弯折；<br/>\r\n          ②一个捻距内出现的断丝数大于下表列出的数值时：\r\n          <Table minWidth={'140px'} css={{borderCollapse:'collapse'}}>\r\n            <TableBody>\r\n              <TableRow>\r\n                <CCell rowSpan={2}>断丝的形式</CCell>\r\n                <CCell colSpan={3}>钢丝绳的类型</CCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <CCell>6×19</CCell><CCell>8×9</CCell><CCell>9×19</CCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <CCell>均布在外层绳股上</CCell>\r\n                <CCell>24</CCell><CCell>30</CCell><CCell>34</CCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <CCell>集中在一或者两根外层绳股上</CCell>\r\n                <CCell>8</CCell><CCell>10</CCell><CCell>11</CCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <CCell>一根外绳股上相邻的断丝</CCell>\r\n                <CCell>4</CCell><CCell>4</CCell><CCell>4</CCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <CCell>股谷（缝）断丝 </CCell>\r\n                <CCell>1</CCell><CCell>1</CCell><CCell>1</CCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <Cell colSpan={4}>注：上述断丝数参考长度为一个捻距，约为6d(d表示钢丝绳的公称直径，mm）</Cell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n          ③钢丝绳直径小于其公称直径的90%；<br/>\r\n          ④钢丝绳严重锈蚀，铁锈填满绳股间隙。<br/>\r\n          采用其他类型悬挂装置的，悬挂装置的磨损、变形等不得超过制造单位设定的报废指标\r\n        </InspectItemHeadColumn>\r\n        数据及测量\r\n        <InputGroupLine label={`②断丝数`}>\r\n          <SuffixInput\r\n            autoFocus={true}\r\n            placeholder=\"请输入测量数\"\r\n            value={ inp?.断丝数 ||''}\r\n            onChange={e => setInp({ ...inp, 断丝数: e.currentTarget.value||undefined}) }\r\n          >根</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='②一个捻距断丝数,结果判定'>\r\n          <SelectHookfork value={ inp?.断丝判定  ||''}\r\n                          onChange={e => setInp({ ...inp, 断丝判定: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`③钢丝绳直径`}>\r\n          <SuffixInput\r\n            autoFocus={true}\r\n            placeholder=\"请输入测量数\"\r\n            value={ inp?.钢绳直径 ||''}\r\n            onChange={e => setInp({ ...inp, 钢绳直径: e.currentTarget.value||undefined}) }\r\n          >mm</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`③公称直径`}>\r\n          <SuffixInput\r\n            autoFocus={true}\r\n            placeholder=\"请输入测量数\"\r\n            value={ inp?.钢绳公称 ||''}\r\n            onChange={e => setInp({ ...inp, 钢绳公称: e.currentTarget.value||undefined}) }\r\n          >mm</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='③钢丝绳直径小于公称90%,结果判定'>\r\n          <SelectHookfork value={ inp?.钢绳判定 ||''}\r\n                          onChange={e => setInp({ ...inp, 钢绳判定: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='悬挂装置、补偿装置的磨损、断丝、变形等情况'>\r\n          <SelectHookfork value={ inp?.磨损变形 ||''}\r\n                          onChange={e => setInp({ ...inp, 磨损变形: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'5.2 绳端固定'}>\r\n        （1）悬挂钢丝绳绳端固定应当可靠，弹簧、螺母、开口销等连接部件无缺损。<br/>\r\n         采用其他类型悬挂装置的，其端部固定应当符合制造单位的规定。\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='绳端固定'>\r\n          <SelectHookfork value={ inp?.绳端固定 ||''}\r\n                          onChange={e => setInp({ ...inp, 绳端固定: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem2d8=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {错相保护,紧急电动,门旁路,门回路,制动故障保护,自动救援} =par||{};\r\n      return {错相保护,紧急电动,门旁路,门回路,制动故障保护,自动救援};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'控制柜2.8'}>\r\n        <InspectRecordHeadColumn  level={'B'}  bigLabel={'2 机器设备间及相关设备'}  label={'2.8 控制柜、 紧急操作和动态测试装置'}>\r\n        </InspectRecordHeadColumn>\r\n        <InputGroupLine  label='(2)断相、错相保护功能有效；电梯运行与相序无关时，可以不设错相保护。'>\r\n          <SelectHookfork value={ inp?.错相保护 ||''}\r\n                          onChange={e => setInp({ ...inp, 错相保护: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <IndentationLayText title={'(4)紧急电动运行装置应当符合以下要求：'}>\r\n          ①依靠持续揿压按钮来控制轿厢运行，此按钮有防止误操作的保护，按钮上或其近旁标出 相应的运行方向<br/>\r\n          ②一旦进入检修运行，紧急电动运行装置控制轿厢运行的功能由检修控制装置所取代；<br/>\r\n          ③进行紧急电动运行操作时，易于观察到轿厢是否在开锁区。\r\n        </IndentationLayText>\r\n        <InputGroupLine  label='(4)紧急电动运行装置查验结果'>\r\n          <SelectHookfork value={ inp?.紧急电动 ||''}\r\n                          onChange={e => setInp({ ...inp, 紧急电动: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <IndentationLayText title={'(6)层门和轿门旁路装置应当符合以下要求：'}>\r\n          ①在层门和轿门旁路装置上或者其附近标明“旁路”字样,并且标明旁路装置的“旁路”状态或者“关”状态;<br/>\r\n          ②旁路时取消正常运行(包括动力操作的自动门的任何运行);只有在检修运行或者紧急电动运行状态下,轿厢才能够运行;运行期间,轿厢上的听觉信号和轿底的闪烁灯起作用;<br/>\r\n          ③能够旁路层门关闭触点、层门门锁触点、轿门关闭触点、轿门门锁触点;不能同时旁路层门和轿门的触点;对于手动层门,不能同时旁路层门关闭触点和层门门锁触点;<br/>\r\n          ④提供独立的监控信号证实轿门处于关闭位置。\r\n        </IndentationLayText>\r\n        <InputGroupLine  label='(6)层门和轿门旁路装置查验结果'>\r\n          <SelectHookfork value={ inp?.门旁路 ||''}\r\n                          onChange={e => setInp({ ...inp, 门旁路: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        (7)应当具有门回路检测功能,当轿厢在开锁区域内、轿门开启并且层门门锁释放时,监测检查\r\n        轿门关闭位置的电气安全装置、检查层门门锁锁紧位置的电气安全装置和轿门监控信号的正确动\r\n        作;如果监测到上述装置的故障,能够防止电梯的正常运行。\r\n        <InputGroupLine  label='(7)应当具有门回路检测功能'>\r\n          <SelectHookfork value={ inp?.门回路  ||''}\r\n                          onChange={e => setInp({ ...inp, 门回路: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        (8)应当具有制动器故障保护功能,当监测到制动器的提起(或者释放)失效时,能够防止电梯的正常启动。\r\n        <InputGroupLine  label='(8)应当具有制动器故障保护'>\r\n          <SelectHookfork value={ inp?.制动故障保护 ||''}\r\n                          onChange={e => setInp({ ...inp, 制动故障保护: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <IndentationLayText title={'(9)自动救援操作装置(如果有)应该符合以下要求:'}>\r\n          ①设有铭牌,标明制造单位名称、产品型号、产品编号、主要技术参数,加装的自动救援操作装置的铭牌和该装置的产品质量证明文件相符;<br/>\r\n          ②在外电网断电至少等待3s后自动投入救援运行,电梯自动平层并且开门;<br/>\r\n          ③当电梯处于检修运行、紧急电动运行、电气安全装置动作或者主开关断开时,不得投入救援运行;<br/>\r\n          ④设有一个非自动复位的开关,当该开关处于关闭状态时,该装置不能启动救援运行。\r\n        </IndentationLayText>\r\n        <InputGroupLine  label='(9)自动救援操作装置(如果有)'>\r\n          <SelectHookfork value={ inp?.自动救援  ||''}\r\n                          onChange={e => setInp({ ...inp, 自动救援: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem2t4=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {机房高出,梯子夹角,梯子判定,通道设置,通道照明,通道门宽,通道门高,通道判定,通道门,机房照明,开关电路关系} =par||{};\r\n      return {机房高出,梯子夹角,梯子判定,通道设置,通道照明,通道门宽,通道门高,通道判定,通道门,机房照明,开关电路关系};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'检验项目 2.1-5-6'}>\r\n        <InspectZoneHeadColumn label={'2 机房(机器设备间)及相关设备'} projects={['2.1','2.5','2.6']} />\r\n        <InspectItemHeadColumn  level={'C'} label={'2.1 通道与通道门'}>\r\n         （1）应当在任何情况下均能够安全方便地使用通道。采用梯子作为通道时，必须符合以下条件：\r\n          <IndentationLayText >\r\n          ①通往机房(机器设备间)的通道不应当高出楼梯所到平面4m；<br/>\r\n          ②梯子必须固定在通道上而不能被移动；<br/>\r\n          ③梯子高度超过1.50m时，其与水平方向的夹角应当在65°～75°之间，并不易滑动或者翻转；<br/>\r\n          ④靠近梯子顶端应当设置容易握到的把手。\r\n          </IndentationLayText>\r\n         （2）通道应当设置永久性电气照明；<br/>\r\n         （3）机房通道门的宽度应当不小于0.60m，高度应当不小于1.80m，并且门不得向机房内开启。门应当装有带钥匙的锁，并且可以从机房内不用钥匙打开。门外侧有下述或者类似的警示标志：“电梯机器——危险 未经允许禁止入内”\r\n        </InspectItemHeadColumn>\r\n        采用梯子作为通道时\r\n        <InputGroupLine label={`机房高出平面`}>\r\n          <SuffixInput\r\n            autoFocus={true}\r\n            placeholder=\"请输入测量数\"\r\n            value={ inp?.机房高出 ||''}\r\n            onChange={e => setInp({ ...inp, 机房高出: e.currentTarget.value||undefined}) }\r\n          >m</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`水平方向夹角`}>\r\n          <SuffixInput\r\n            autoFocus={true}\r\n            placeholder=\"请输入测量数\"\r\n            value={ inp?.梯子夹角 ||''}\r\n            onChange={e => setInp({ ...inp, 梯子夹角: e.currentTarget.value||undefined}) }\r\n          >(°)</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='用梯子作为通道时，测量结果判定'>\r\n          <SelectHookfork value={ inp?.梯子判定 ||''}\r\n                          onChange={e => setInp({ ...inp, 梯子判定: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(1)通道设置'>\r\n          <SelectHookfork value={ inp?.通道设置 ||''}\r\n                          onChange={e => setInp({ ...inp, 通道设置: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(2)通道照明'>\r\n          <SelectHookfork value={ inp?.通道照明 ||''}\r\n                          onChange={e => setInp({ ...inp, 通道照明: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        机房通道门\r\n        <InputGroupLine label={`宽度`}>\r\n          <SuffixInput\r\n            autoFocus={true}\r\n            placeholder=\"请输入测量数\"\r\n            value={ inp?.通道门宽 ||''}\r\n            onChange={e => setInp({ ...inp, 通道门宽: e.currentTarget.value||undefined}) }\r\n          >m</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`高度`}>\r\n          <SuffixInput\r\n            autoFocus={true}\r\n            placeholder=\"请输入测量数\"\r\n            value={ inp?.通道门高 ||''}\r\n            onChange={e => setInp({ ...inp, 通道门高: e.currentTarget.value||undefined}) }\r\n          >m</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='机房通道门的测量结果判定'>\r\n          <SelectHookfork value={ inp?.通道判定 ||''}\r\n                          onChange={e => setInp({ ...inp, 通道判定: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(3)通道门'>\r\n          <SelectHookfork value={ inp?.通道门 ||''}\r\n                          onChange={e => setInp({ ...inp, 通道门: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'2.5 照明开关'}>\r\n         （1）机房(机器设备间)设有永久性电气照明；在靠近入口(或多个入口)处的适当高度设置一个开关，控制机房(机器设备间)照明\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(1)照明、照明开关'>\r\n          <SelectHookfork value={ inp?.机房照明 ||''}\r\n                          onChange={e => setInp({ ...inp, 机房照明: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'2.6 主开关与电路关系'}>\r\n         （2）主开关不得切断轿厢照明和通风、机房（机器设备间）照明和电源插座、轿顶与底坑的电源插座、电梯井道照明、报警装置的供电电路\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(2)主开关与照明等电路的控制关系'>\r\n          <SelectHookfork value={ inp?.开关电路关系 ||''}\r\n                          onChange={e => setInp({ ...inp, 开关电路关系: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem16=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {限速绳电安,缓冲器固定,液位电安,对重越程最大,对重越程,对重越程判定} =par||{};\r\n      return {限速绳电安,缓冲器固定,液位电安,对重越程最大,对重越程,对重越程判定};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'检验项目 3.14-15'}>\r\n        <InspectZoneHeadColumn label={'3 井道及相关设备'} projects={['3.14','3.15']} />\r\n        <InspectItemHeadColumn  level={'B'} label={'3.14  (2)限速绳张紧装置的电气安全装置'}>\r\n        （2）当限速器绳断裂或者过分伸长时，应当通过一个电气安全装置的作用，使电梯停止运转\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(2)限速绳张紧装置的电气安全装置'>\r\n          <SelectHookfork value={ inp?.限速绳电安 ||''}\r\n                          onChange={e => setInp({ ...inp, 限速绳电安: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n         <InspectItemHeadColumn  level={'B'} label={'3.15 缓冲器'}>\r\n         （3）缓冲器应当固定可靠、无明显倾斜，并且无断裂、塑性变形、剥落、破损等现象；<br/>\r\n         （4）耗能型缓冲器液位应当正确，有验证柱塞复位的电气安全装置。<br/>\r\n         （5）对重缓冲器附近应当设置永久性的明显标识，标明当轿厢位于顶层端站平层位置时，对重装置撞板与其缓冲器顶面间的最大允许垂直距离；并且该垂直距离不超过最大允许值\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(3)固定和完好情况'>\r\n          <SelectHookfork value={ inp?.缓冲器固定 ||''}\r\n                          onChange={e => setInp({ ...inp, 缓冲器固定: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(4)液位和电气安全装置'>\r\n          <SelectHookfork value={ inp?.液位电安 ||''}\r\n                          onChange={e => setInp({ ...inp, 液位电安: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        (5)对重越程距离\r\n        <InputGroupLine label={`最大允许值`}>\r\n          <SuffixInput\r\n            autoFocus={true}\r\n            placeholder=\"请输入测量数\"\r\n            value={ inp?.对重越程最大 ||''}\r\n            onChange={e => setInp({ ...inp, 对重越程最大: e.currentTarget.value||undefined}) }\r\n          >mm</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`测量值`}>\r\n          <SuffixInput\r\n            autoFocus={true}\r\n            placeholder=\"请输入测量数\"\r\n            value={ inp?.对重越程 ||''}\r\n            onChange={e => setInp({ ...inp, 对重越程: e.currentTarget.value||undefined}) }\r\n          >mm</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(5)对重越程距离,结果判定'>\r\n          <SelectHookfork value={ inp?.对重越程判定 ||''}\r\n                          onChange={e => setInp({ ...inp, 对重越程判定: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem5=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {主机工况,轮槽磨损,制动器,手动紧急操作} =par||{};\r\n      return {主机工况,轮槽磨损,制动器,手动紧急操作};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'2.7驱动主机'}>\r\n        <InspectZoneHeadColumn label={'2 机房(机器设备间)及相关设备'} projects={['2.7']} />\r\n        <InspectItemHeadColumn  level={'B'} label={'2.7 驱动主机'}>\r\n        （2）驱动主机工作时无异常噪声和振动；<br/>\r\n        （3）曳引轮轮槽不得有缺损或者不正常磨损；如果轮槽的磨损可能影响曳引能力时，进行曳引能力验证试验；<br/>\r\n        （4）制动器动作灵活，制动时制动闸瓦(制动钳)紧密、均匀地贴合在制动轮(制动盘)上，电梯运行时制动闸瓦(制动钳)与制动轮(制动盘)不发生摩擦，制动闸瓦(制动钳)以及制动轮(制动盘)工作面上没有油污；<br/>\r\n        （5）手动紧急操作装置符合以下要求：<br/>\r\n          ①对于可拆卸盘车手轮，设有一个电气安全装置，最迟在盘车手轮装上电梯驱动主机时动作；<br/>\r\n          ②松闸扳手涂成红色，盘车手轮是无辐条的并且涂成黄色，可拆卸盘车手轮放置在机房内容易接近的明显部位；<br/>\r\n          ③在电梯驱动主机上接近盘车手轮处，明显标出轿厢运行方向，如果手轮是不可拆卸的，可以在手轮上标出；<br/>\r\n          ④能够通过操纵手动松闸装置松开制动器，并且需要以一个持续力保持其松开状态；<br/>\r\n          ⑤进行手动紧急操作时，易于观察到轿厢是否在开锁区\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(2)工作状况'>\r\n          <SelectHookfork value={ inp?.主机工况 ||''}\r\n                          onChange={e => setInp({ ...inp, 主机工况: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(3)轮槽磨损'>\r\n          <SelectHookfork value={ inp?.轮槽磨损 ||''}\r\n                          onChange={e => setInp({ ...inp, 轮槽磨损: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(4)制动器动作情况'>\r\n          <SelectHookfork value={ inp?.制动器 ||''}\r\n                          onChange={e => setInp({ ...inp, 制动器: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='★(5)手动紧急操作装置'>\r\n          <SelectHookfork value={ inp?.手动紧急操作 ||''}\r\n                          onChange={e => setInp({ ...inp, 手动紧急操作: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem2d9=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {限速器电安,封记,速度校验,接地连接,动力电阻,照明电阻,安全装置电阻,绝缘判定} =par||{};\r\n      return {限速器电安,封记,速度校验,接地连接,动力电阻,照明电阻,安全装置电阻,绝缘判定};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'2.9限速器'}>\r\n        <InspectZoneHeadColumn label={'2 机房(机器设备间)及相关设备'} projects={['2.9','2.10','2.11']} />\r\n        <InspectItemHeadColumn  level={'B'} label={'2.9 限速器'}>\r\n          （2）限速器或者其他装置上设有在轿厢上行或者下行速度达到限速器动作速度之前动作的电气安全装置，以及验证限速器复位状态的电气安全装置<br/>\r\n          （3）限速器各调节部位封记完好，运转时不得出现碰擦、卡阻、转动不灵活等现象，动作正常<br/>\r\n          （4）受检电梯的维护保养单位应当每2年(对于使用年限不超过15年的限速器)或者每年(对于使用年限超过15年的限速器)进行一次限速器动作速度校验，校验结果应当符合要求\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(2)电气安全装置'>\r\n          <SelectHookfork value={ inp?.限速器电安 ||''}\r\n                          onChange={e => setInp({ ...inp, 限速器电安: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(3)封记及运转情况'>\r\n          <SelectHookfork value={ inp?.封记 ||''}\r\n                          onChange={e => setInp({ ...inp, 封记: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(4)动作速度校验'>\r\n          <SelectHookfork value={ inp?.速度校验 ||''}\r\n                          onChange={e => setInp({ ...inp, 速度校验: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'2.10 接地连接'}>\r\n        （2）所有电气设备及线管、线槽的外露可以导电部分应当与保护导体（PE，地线）可靠连接\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(2)接地连接'>\r\n          <SelectHookfork value={ inp?.接地连接 ||''}\r\n                          onChange={e => setInp({ ...inp, 接地连接: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'2.11 电气绝缘'}>\r\n         （1）动力电路、照明电路和电气安全装置电路的绝缘电阻应当符合下述要求：\r\n          <Table css={{borderCollapse:'collapse'}}>\r\n            <TableBody>\r\n              <TableRow >\r\n                <CCell >标称电压/V</CCell>\r\n                <CCell >测试电压 (直流)/V  </CCell>\r\n                <CCell>绝缘电阻/MΩ</CCell>\r\n              </TableRow>\r\n              <TableRow >\r\n                <CCell>安全电压</CCell>\r\n                <CCell>250</CCell>\r\n                <CCell>≥0.25</CCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <CCell>≤500</CCell>\r\n                <CCell>500</CCell><CCell>≥0.50</CCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <CCell>＞500</CCell>\r\n                <CCell>1000</CCell><CCell>≥1.00</CCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </InspectItemHeadColumn>\r\n        数据测量\r\n        <InputGroupLine  label='动力电路' >\r\n          <SuffixInput\r\n            value={inp?.动力电阻 ||''}\r\n            onChange={e => setInp({ ...inp, 动力电阻: e.currentTarget.value||undefined}) }\r\n            inputSize=\"md\"\r\n            type=\"text\"\r\n            placeholder=\"请输入测量数\"\r\n          >MΩ\r\n          </SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='照明电路' >\r\n          <SuffixInput\r\n            value={inp?.照明电阻 ||''}\r\n            onChange={e => setInp({ ...inp, 照明电阻: e.currentTarget.value||undefined}) }\r\n            inputSize=\"md\"\r\n            type=\"text\"\r\n            placeholder=\"请输入测量数\"\r\n          >MΩ\r\n          </SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='安全装置电路' >\r\n          <SuffixInput\r\n            value={inp?.安全装置电阻 ||''}\r\n            onChange={e => setInp({ ...inp, 安全装置电阻: e.currentTarget.value||undefined}) }\r\n            inputSize=\"md\"\r\n            type=\"text\"\r\n            placeholder=\"请输入测量数\"\r\n          >MΩ\r\n          </SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='电气绝缘,结果判定'>\r\n          <SelectHookfork value={ inp?.绝缘判定 ||''}\r\n                          onChange={e => setInp({ ...inp, 绝缘判定: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem3d4=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {安全门门锁,安全门电安,检修门门锁,检修门电安,轿井间距,轿井距离判定} =par||{};\r\n      return {安全门门锁,安全门电安,检修门门锁,检修门电安,轿井间距,轿井距离判定};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'检验项目 3.4-5-7'}>\r\n        <InspectZoneHeadColumn label={'3 井道及相关设备'} projects={['3.4','3.5','3.7']} />\r\n        <InspectItemHeadColumn  level={'C'} label={'3.4 井道安全门'}>\r\n        （3）门上应当装设用钥匙开启的锁，当门开启后不用钥匙能够将其关闭和锁住，在门锁住后，不用钥匙能够从井道内将门打开；\r\n        （4）应当设置电气安全装置以验证门的关闭状态。\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(3)门锁'>\r\n          <SelectHookfork value={ inp?.安全门门锁 ||''}\r\n                          onChange={e => setInp({ ...inp, 安全门门锁: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(4)电气安全装置'>\r\n          <SelectHookfork value={ inp?.安全门电安 ||''}\r\n                          onChange={e => setInp({ ...inp, 安全门电安: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'3.5 井道检修门'}>\r\n          （3）门上应当装设用钥匙开启的锁，当门开启后不用钥匙能够将其关闭和锁住，在门锁住后，不用钥匙能够从井道内将门打开；\r\n          （4）应当设置电气安全装置以验证门的关闭状态。\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(3)门锁'>\r\n          <SelectHookfork value={ inp?.检修门门锁 ||''}\r\n                          onChange={e => setInp({ ...inp, 检修门门锁: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(4)电气安全装置'>\r\n          <SelectHookfork value={ inp?.检修门电安 ||''}\r\n                          onChange={e => setInp({ ...inp, 检修门电安: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'3.7 轿厢与井道壁距离'}>\r\n        （1）轿厢与面对轿厢入口的井道壁的间距不大于0.15m，对于局部高度不大于0.50m或者采用垂直滑动门的载货电梯，该间距可以增加到0.20m。如果轿厢装有机械锁紧的门并且门只能在开锁区内打开时，则上述间距不受限制。\r\n        </InspectItemHeadColumn>\r\n        数据及测量\r\n        <InputGroupLine label={`间距`}>\r\n          <SuffixInput\r\n            autoFocus={true}\r\n            placeholder=\"请输入测量数\"\r\n            value={ inp?.轿井间距 ||''}\r\n            onChange={e => setInp({ ...inp, 轿井间距: e.currentTarget.value||undefined}) }\r\n          >m</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='轿厢与井道壁距离,(1)结果判定'>\r\n          <SelectHookfork value={ inp?.轿井距离判定 ||''}\r\n                          onChange={e => setInp({ ...inp, 轿井距离判定: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem13=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {极限开关,井道照明,底坑底部,停止装置} =par||{};\r\n      return {极限开关,井道照明,底坑底部,停止装置};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'检验项目 3.10--12'}>\r\n        <InspectZoneHeadColumn label={'3 井道及相关设备'} projects={['3.10','3.11','3.12']} />\r\n        <InspectItemHeadColumn  level={'B'} label={'3.10 极限开关'}>\r\n         （1）井道上下两端应当装设极限开关，该开关在轿厢或者对重接触缓冲器前起作用，并且在缓冲器被压缩期间保持其动作状态。\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='极限开关'>\r\n          <SelectHookfork value={ inp?.极限开关 ||''}\r\n                          onChange={e => setInp({ ...inp, 极限开关: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'3.11 井道照明'}>\r\n         （1）井道应当装设永久性电气照明。对于部分封闭井道，如果井道附近有足够的电气照明，井道内可以不设照明\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='井道照明'>\r\n          <SelectHookfork value={ inp?.井道照明 ||''}\r\n                          onChange={e => setInp({ ...inp, 井道照明: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'3.12 底坑设施与装置'}>\r\n         （1）底坑底部应当光滑平整，不得渗水、漏水；<br/>\r\n         （3）底坑内应当设置在进入底坑时和底坑地面上均能方便操作的停止装置，停止装置的操作装置为双稳态、红色、标以“停止”字样，并且有防止误操作的保护\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(1)底坑底部'>\r\n          <SelectHookfork value={ inp?.底坑底部 ||''}\r\n                          onChange={e => setInp({ ...inp, 底坑底部: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(3)停止装置'>\r\n          <SelectHookfork value={ inp?.停止装置 ||''}\r\n                          onChange={e => setInp({ ...inp, 停止装置: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem18=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {检修装置,轿顶停止装置,安全窗门,对重固定,识别数量,超面积载货} =par||{};\r\n      return {检修装置,轿顶停止装置,安全窗门,对重固定,识别数量,超面积载货};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'检验项目 4.1-6'}>\r\n        <InspectZoneHeadColumn label={'4 轿厢与对重'} projects={['4.1','4.3','4.5','4.6']} />\r\n        <InspectItemHeadColumn  level={'C'} label={'4.1 轿顶电气装置'}>\r\n        （1）轿顶应当装设一个易于接近的检修运行控制装置，并且符合以下要求：<br/>\r\n          ①由一个符合电气安全装置要求，能够防止误操作的双稳态开关（检修开关）进行操作；<br/>\r\n          ②一经进入检修运行时，即取消正常运行（包括任何自动门操作）、紧急电动运行、对接操作运行，只有再一次操作检修开关，才能使电梯恢复正常工作；<br/>\r\n          ③依靠持续揿压按钮来控制轿厢运行，此按钮有防止误操作的保护，按钮上或其近旁标出相应的运行方向；<br/>\r\n          ④该装置上设有一个停止装置，停止装置的操作装置为双稳态、红色、并标以“停止”字样，并且有防止误操作的保护；<br/>\r\n          ⑤检修运行时，安全装置仍然起作用。<br/>\r\n       （2）轿顶应当装设一个从入口处易于接近的停止装置，停止装置的操作装置为双稳态、红色、并标以“停止”字样，并且有防止误操作的保护。如果检修运行控制装置设在从入口处易于接近的位置，该停止装置也可以设在检修运行控制装置上\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(1)检修装置'>\r\n          <SelectHookfork value={ inp?.检修装置 ||''}\r\n                          onChange={e => setInp({ ...inp, 检修装置: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(2)停止装置'>\r\n          <SelectHookfork value={ inp?.轿顶停止装置 ||''}\r\n                          onChange={e => setInp({ ...inp, 轿顶停止装置: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'4.3 安全门(窗)电气安全装置'}>\r\n          如果轿厢设有安全窗（门），应当符合以下要求：<br/>\r\n         （3）其锁紧由电气安全装置予以验证。\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(3)安全门(窗)电气安全装置'>\r\n          <SelectHookfork value={ inp?.安全窗门 ||''}\r\n                          onChange={e => setInp({ ...inp, 安全窗门: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'4.5 对重(平衡重)块'}>\r\n        （1）对重(平衡重)块可靠固定；<br/>\r\n        （2）具有能够快速识别对重(平衡重)块数量的措施(例如标明对重块的数量或者总高度)\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(1)固定'>\r\n          <SelectHookfork value={ inp?.对重固定 ||''}\r\n                          onChange={e => setInp({ ...inp, 对重固定: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(2)识别数量的措施'>\r\n          <SelectHookfork value={ inp?.识别数量 ||''}\r\n                          onChange={e => setInp({ ...inp, 识别数量: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'4.6 轿厢面积'}>\r\n        （2）对于为了满足使用要求而轿厢面积超出上述规定的载货电梯，必须满足以下条件：<br/>\r\n        ①在从层站装卸区域总可看见的位置上设置标志，表明该载货电梯的额定载重量；<br/>\r\n        ②该电梯专用于运送特定轻质货物，其体积可保证在装满轿厢情况下，该货物的总质量不会超过额定载重量；<br/>\r\n        ③该电梯由专职司机操作，并严格限制人员进入。\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(2)轿厢超面积载货电梯的控制条件'>\r\n          <SelectHookfork value={ inp?.超面积载货 ||''}\r\n                          onChange={e => setInp({ ...inp, 超面积载货: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem22=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {紧急照明,报警装置,护脚板高,护脚板高判定,护脚板,超载保护} =par||{};\r\n      return {紧急照明,报警装置,护脚板高,护脚板高判定,护脚板,超载保护};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'检验项目 4.8-10'}>\r\n        <InspectZoneHeadColumn label={'4 轿厢与对重'} projects={['4.8','4.9','4.10']} />\r\n        <InspectItemHeadColumn  level={'B'} label={'4.8 紧急照明和报警装置'}>\r\n        轿厢内应当装设符合下述要求的紧急报警装置和紧急照：<br/>\r\n        （1）正常照明电源中断时，能够自动接通紧急照明电源；<br/>\r\n        （2）紧急报警装置采用对讲系统以便与救援服务持续联系，当电梯行程大于30m时，在轿厢和机房（或者紧急操作地点）之间也设置对讲系统，紧急报警装置的供电来自本条（1）所述的紧急照明电源或者等效电源；在启动对讲系统后，被困乘客不必再做其他操作\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(1)紧急照明'>\r\n          <SelectHookfork value={ inp?.紧急照明 ||''}\r\n                          onChange={e => setInp({ ...inp, 紧急照明: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(2)紧急报警装置'>\r\n          <SelectHookfork value={ inp?.报警装置 ||''}\r\n                          onChange={e => setInp({ ...inp, 报警装置: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'4.9 地坎护脚板'}>\r\n        （1）轿厢地坎下应当装设护脚板，其垂直部分的高度不小于0.75m，宽度不小于层站入口宽度\r\n        </InspectItemHeadColumn>\r\n        数据及测量\r\n        <InputGroupLine label={`护脚板高度`}>\r\n          <SuffixInput\r\n            autoFocus={true}\r\n            placeholder=\"请输入测量数\"\r\n            value={ inp?.护脚板高 ||''}\r\n            onChange={e => setInp({ ...inp, 护脚板高: e.currentTarget.value||undefined}) }\r\n          >m</SuffixInput>\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='测量结果判定'>\r\n          <SelectHookfork value={ inp?.护脚板高判定 ||''}\r\n                          onChange={e => setInp({ ...inp, 护脚板高判定: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='地坎护脚板'>\r\n          <SelectHookfork value={ inp?.护脚板 ||''}\r\n                          onChange={e => setInp({ ...inp, 护脚板: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'4.10 超载保护装置'}>\r\n        （1）设置当轿厢内的载荷超过额定载重量时，能够发出警示信号，并且使轿厢不能运行的超载保护装置。该装置最迟在轿厢内的载荷达到110％额定载重量(对于额定载重量小于750kg的电梯，最迟在超载量达到75kg)时动作，防止电梯正常启动及再平层，并且轿内有音响或者发光信号提示，动力驱动的自动门完全打开，手动门保持在未锁状态\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='超载保护装置'>\r\n          <SelectHookfork value={ inp?.超载保护 ||''}\r\n                          onChange={e => setInp({ ...inp, 超载保护: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem27=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {补偿绳固定,补偿绳电安,补偿绳防跳,松绳保护,旋转部件} =par||{};\r\n      return {补偿绳固定,补偿绳电安,补偿绳防跳,松绳保护,旋转部件};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'检验项目 5.3-6'}>\r\n        <InspectZoneHeadColumn label={'5 悬挂装置、补偿装置及旋转部件防护'} projects={['5.3','5.5','5.6']} />\r\n        <InspectItemHeadColumn  level={'C'} label={'5.3 补偿装置'}>\r\n        （1）补偿绳（链）端固定应当可靠；<br/>\r\n        （2）应当使用电气安全装置来检查补偿绳的最小张紧位置；<br/>\r\n        （3）当电梯的额定速度大于3.5m/s时，还应当设置补偿绳防跳装置，该装置动作时应当有一个电气安全装置使电梯驱动主机停止运转。\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(1)绳(链)端固定'>\r\n          <SelectHookfork value={ inp?.补偿绳固定 ||''}\r\n                          onChange={e => setInp({ ...inp, 补偿绳固定: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(2)电气安全装置'>\r\n          <SelectHookfork value={ inp?.补偿绳电安 ||''}\r\n                          onChange={e => setInp({ ...inp, 补偿绳电安: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(3)补偿绳防跳装置'>\r\n          <SelectHookfork value={ inp?.补偿绳防跳 ||''}\r\n                          onChange={e => setInp({ ...inp, 补偿绳防跳: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'5.5 松绳(链)保护'}>\r\n        （1）如果轿厢悬挂在两根钢丝绳或者链条上，则应当设置检查绳(链)松弛的电气安全装置，当其中一根钢丝绳(链条)发生异常相对伸长时，电梯应当停止运行\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='松绳(链)保护'>\r\n          <SelectHookfork value={ inp?.松绳保护 ||''}\r\n                          onChange={e => setInp({ ...inp, 松绳保护: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'5.6 旋转部件的防护'}>\r\n        （1）在机房（机器设备间）内的曳引轮、滑轮、链轮、限速器，在井道内的曳引轮、滑轮、链轮、限速器及张紧轮、补偿绳张紧轮，在轿厢上的滑轮、链轮等与钢丝绳、链条形成传动的旋转部件，均应当设置防护装置，以避免人身伤害、钢丝绳或链条因松弛而脱离绳槽或链轮、异物进入绳与绳槽或链与链轮之间；<br/>\r\n        对于允许按照GB 7588—1995及更早期标准生产的电梯，可以按照以下要求检验：<br/>\r\n        ①采用悬臂式曳引轮或者链轮时，有防止钢丝绳脱离绳槽或者链条脱离链轮的装置，并且当驱动主机不装设在井道上部时，有防止异物进入绳与绳槽之间或者链条与链轮之间的装置；<br/>\r\n        ②井道内的导向滑轮、曳引轮、轿架上固定的反绳轮和补偿绳张紧轮，有防止钢丝绳脱离绳槽和进入异物的防护装置\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='旋转部件的防护'>\r\n          <SelectHookfork value={ inp?.旋转部件 ||''}\r\n                          onChange={e => setInp({ ...inp, 旋转部件: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem35=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {紧急开锁,机电联锁,门闭合电安,开门限制,门开启} =par||{};\r\n      return {紧急开锁,机电联锁,门闭合电安,开门限制,门开启};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'项目6.8,6.10-11'}>\r\n        <InspectZoneHeadColumn label={'6 轿门与层门'} projects={['6.8','6.10','6.11']} />\r\n        <InspectItemHeadColumn  level={'B'} label={'6.8 紧急开锁装置'}>\r\n        （1）每个层门均应当能够被一把符合要求的钥匙从外面开启；紧急开锁后，在层门闭合时门锁装置不应当保持开锁位置\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='紧急开锁装置'>\r\n          <SelectHookfork value={ inp?.紧急开锁 ||''}\r\n                          onChange={e => setInp({ ...inp, 紧急开锁: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'6.10 门的闭合'}>\r\n        （1）正常运行时应当不能打开层门，除非轿厢在该层门的开锁区域内停止或停站；如果一个层门或者轿门（或者多扇门中的任何一扇门）开着，在正常操作情况下，应当不能启动电梯或者不能保持继续运行；<br/>\r\n        （2）每个层门和轿门的闭合都应当由电气安全装置来验证，如果滑动门是由数个间接机械连接的门扇组成，则未被锁住的门扇上也应当设置电气安全装置以验证其闭合状态\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(1)机电联锁'>\r\n          <SelectHookfork value={ inp?.机电联锁 ||''}\r\n                          onChange={e => setInp({ ...inp, 机电联锁: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(2)电气安全装置'>\r\n          <SelectHookfork value={ inp?.门闭合电安 ||''}\r\n                          onChange={e => setInp({ ...inp, 门闭合电安: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'6.11 轿门开门限制装置及轿门的开启'}>\r\n        （1）应当设置轿门开门限制装置，当轿厢停在开锁区域外时，能够防止轿厢内的人员打开轿门离开轿厢；<br/>\r\n        （2）在轿厢意外移动保护装置允许的最大制停距离范围内，打开对应的层门后，能够不用工具(三角钥匙或者永久性设置在现场的工具除外)从层站处打开轿门\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(1)轿门开门限制装置'>\r\n          <SelectHookfork value={ inp?.开门限制 ||''}\r\n                          onChange={e => setInp({ ...inp, 开门限制: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(2)轿门的开启'>\r\n          <SelectHookfork value={ inp?.门开启 ||''}\r\n                          onChange={e => setInp({ ...inp, 门开启: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem8d1=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {平衡系数,超速保护,制停情况,自监测,限速安全钳} =par||{};\r\n      return {平衡系数,超速保护,制停情况,自监测,限速安全钳};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'试验 8.1-4'}>\r\n        <InspectZoneHeadColumn label={'8 试验'} projects={['8.1','8.2','8.3','8.4']} />\r\n        <InspectItemHeadColumn  level={'C'} label={'8.1 平衡系数试验'}>\r\n        （1）曳引电梯的平衡系数应当在0.40～0.50之间，或者符合制造（改造）单位的设计值\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='平衡系数试验'>\r\n          <SelectHookfork value={ inp?.平衡系数 ||''}\r\n                          onChange={e => setInp({ ...inp, 平衡系数: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'8.2 ★轿厢上行超速保护装置试验'}>\r\n        （1）当轿厢上行速度失控时，轿厢上行超速保护装置应当动作，使轿厢制停或者至少使其速度降低至对重缓冲器的设计范围；该装置动作时，应当使一个电气安全装置动作\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='轿厢上行超速保护装置试验'>\r\n          <SelectHookfork value={ inp?.超速保护 ||''}\r\n                          onChange={e => setInp({ ...inp, 超速保护: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'8.3 ☆轿厢意外移动保护装置试验'}>\r\n        （1）轿厢在井道上部空载，以型式试验证书所给出的试验速度上行并触发制停部件，仅使用制停部件能够使电梯停止，轿厢的移动距离在型式试验证书给出的范围内；\r\n        （2）如果电梯采用存在内部冗余的制动器作为制停部件，则当制动器提起(或者释放)失效，或者制动力不足时，应当关闭轿门和层门，并且防止电梯的正常启动\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(1)制停情况'>\r\n          <SelectHookfork value={ inp?.制停情况 ||''}\r\n                          onChange={e => setInp({ ...inp, 制停情况: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(2)自监测功能'>\r\n          <SelectHookfork value={ inp?.自监测 ||''}\r\n                          onChange={e => setInp({ ...inp, 自监测: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'8.4 轿厢限速器－安全钳试验'}>\r\n        （2）定期检验：轿厢空载，以检修速度下行，进行限速器-安全钳联动试验，限速器－安全钳动作应当可靠\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='轿厢限速器－安全钳试验'>\r\n          <SelectHookfork value={ inp?.限速安全钳 ||''}\r\n                          onChange={e => setInp({ ...inp, 限速安全钳: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem8d5=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {对重限速试验,运行试验,救援程序,救援通道,救援操作,空载曳引} =par||{};\r\n      return {对重限速试验,运行试验,救援程序,救援通道,救援操作,空载曳引};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'试验 8.5-9'}>\r\n        <InspectZoneHeadColumn label={'8 试验'} projects={['8.5','8.6','8.7','8.9']} />\r\n        <InspectItemHeadColumn  level={'B'} label={'8.5 对重(平衡重)限速器—安全钳'}>\r\n        （1）轿厢空载，以检修速度上行，进行限速器-安全钳联动试验，限速器－安全钳动作应当可靠\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='对重(平衡重)限速器—安全钳试验'>\r\n          <SelectHookfork value={ inp?.对重限速试验 ||''}\r\n                          onChange={e => setInp({ ...inp, 对重限速试验: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'C'} label={'8.6 运行试验'}>\r\n        （1）轿厢空载，以正常运行速度上、下运行，呼梯、楼层显示等信号系统功能有效、指示正确、动作无误，轿厢平层良好，无异常现象发生；对于设有IC卡系统的电梯，轿厢内的人员无需通过IC卡系统即可到达建筑物的出口层，并且在电梯退出正常服务时，自动退出IC卡功能\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='运行试验'>\r\n          <SelectHookfork value={ inp?.运行试验 ||''}\r\n                          onChange={e => setInp({ ...inp, 运行试验: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'8.7 应急救援试验'}>\r\n        （1）在机房内或者紧急操作和动态测试装置上设有明晰的应急救援程序；<br/>\r\n        （2）建筑物内的救援通道保持通畅，以便相关人员无阻碍地抵达实施紧急操作的位置和层站等处；<br/>\r\n        （3）在各种载荷工况下，按照本条(1)所述的应急救援程序实施操作，能够安全、及时地解救被困人员\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='(1)救援程序'>\r\n          <SelectHookfork value={ inp?.救援程序 ||''}\r\n                          onChange={e => setInp({ ...inp, 救援程序: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(2)救援通道'>\r\n          <SelectHookfork value={ inp?.救援通道 ||''}\r\n                          onChange={e => setInp({ ...inp, 救援通道: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='(3)救援操作'>\r\n          <SelectHookfork value={ inp?.救援操作 ||''}\r\n                          onChange={e => setInp({ ...inp, 救援操作: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'8.9 空载曳引检查'}>\r\n        （1）当对重压在缓冲器上而曳引机按电梯上行方向旋转时，应当不能提升空载轿厢\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='空载曳引检查'>\r\n          <SelectHookfork value={ inp?.空载曳引 ||''}\r\n                          onChange={e => setInp({ ...inp, 空载曳引: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem8d10=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {上行制动,下行制动,静态曳引,制动试验} =par||{};\r\n      return {上行制动,下行制动,静态曳引,制动试验};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'试验 8.10-13'}>\r\n        <InspectZoneHeadColumn label={'8 试验'} projects={['8.10','8.11','8.12','8.13']} />\r\n        <InspectItemHeadColumn  level={'B'} label={'8.10 上行制动工况曳引检查'}>\r\n        （1）轿厢空载以正常运行速度上行至行程上部，切断电动机与制动器供电，轿厢应当完全停止\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='上行制动工况曳引检查'>\r\n          <SelectHookfork value={ inp?.上行制动 ||''}\r\n                          onChange={e => setInp({ ...inp, 上行制动: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'8.11 ▲下行制动工况曳引检查'}>\r\n        （1）轿厢装载125%额定载重量，以正常运行速度下行至行程下部，切断电动机与制动器供电，轿厢应当完全停止\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='▲下行制动工况曳引检查'>\r\n          <SelectHookfork value={ inp?.下行制动 ||''}\r\n                          onChange={e => setInp({ ...inp, 下行制动: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'8.12 ▲静态曳引试验'}>\r\n        （1）对于轿厢面积超过规定的载货电梯，以轿厢实际面积所对应的125%额定载重量进行静态曳引试验；对于额定载重量按照单位轿厢有效面积不小于200kg/m2计算的汽车电梯，以150%额定载重量做静态曳引试验；历时10min，曳引绳应当没有打滑现象\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='▲静态曳引试验'>\r\n          <SelectHookfork value={ inp?.静态曳引 ||''}\r\n                          onChange={e => setInp({ ...inp, 静态曳引: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n        <InspectItemHeadColumn  level={'B'} label={'8.13 制动试验'}>\r\n        （1）轿厢装载125%额定载重量，以正常运行速度下行时，切断电动机和制动器供电，制动器应当能够使驱动主机停止运转，试验后轿厢应无明显变形和损坏\r\n        </InspectItemHeadColumn>\r\n        <InputGroupLine  label='制动试验'>\r\n          <SelectHookfork value={ inp?.制动试验 ||''}\r\n                          onChange={e => setInp({ ...inp, 制动试验: e.currentTarget.value||undefined}) }\r\n          />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItemh2=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {仪器表} =par||{};\r\n      return {仪器表};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n    const [seq, setSeq] = React.useState(null);   //表對象的當前一條。\r\n    const [obj, setObj] = React.useState({no:'',name:'',type:'',powerOn:'',shutDown:''});\r\n    React.useEffect(() => {\r\n      let size =inp?.仪器表?.length;\r\n      setSeq(size>0?  size-1:null);\r\n    }, [inp]);\r\n    function onModifySeq(idx,it){\r\n      setObj(it);\r\n      setSeq(idx);\r\n    };\r\n    function onDeleteSeq(idx,it){\r\n      inp?.仪器表?.splice(idx,1);\r\n      setInp({...inp,仪器表: [...inp?.仪器表] });\r\n      setSeq(null);\r\n    };\r\n    function onInsertSeq(idx,it){\r\n      inp?.仪器表?.splice(idx,0, obj);\r\n      setInp({...inp,仪器表:[...inp?.仪器表] });\r\n      setSeq(idx);\r\n    };\r\n    function onAddSeq(idx){\r\n      let size =inp?.仪器表?.push(obj);\r\n      setInp( (inp?.仪器表&&{...inp,仪器表:[...inp?.仪器表] } )  || {...inp,仪器表:[obj] } );\r\n      setSeq((inp?.仪器表&&(size-1))  || 0 );\r\n    };\r\n\r\n    const editor=<Layer elevation={\"sm\"} css={{ padding: '0.25rem' }}>\r\n      <div>\r\n        <InputGroupLine label={`测量设备名称`}>\r\n          <Input autoFocus={true}  value={obj.name ||''}   onChange={e =>setObj({...obj, name: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`规格型号`}>\r\n          <Input autoFocus={true}  value={obj.type ||''}   onChange={e =>setObj({...obj, type: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`测量设备编号`}>\r\n          <Input autoFocus={true}  value={obj.no ||''}   onChange={e =>setObj({...obj, no: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='性能状态-开机后'>\r\n          <SelectHookfork value={obj.powerOn ||''}  onChange={e =>setObj({...obj, powerOn: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='性能状态-关机前'>\r\n          <SelectHookfork value={obj.shutDown ||''}  onChange={e =>setObj({...obj, shutDown: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <Button onPress={() => {\r\n          if(seq !== null) {\r\n            inp?.仪器表?.splice(seq, 1, obj);\r\n            setInp({ ...inp, 仪器表: [...inp?.仪器表] });\r\n          }\r\n          else setInp({ ...inp, 仪器表: [obj] });\r\n        } }\r\n        >{inp?.仪器表?.length>0? `改一条就确认`: `新增一条`}</Button>\r\n      </div>\r\n    </Layer>;\r\n\r\n    const instrumentTable=<div>\r\n      {inp?.仪器表?.map((a,i)=>{\r\n        return <React.Fragment  key={i}>\r\n          <div>{`${i+1}`}\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem onPress={()=>onModifySeq(i,a)}>修改</MenuItem>\r\n                  <MenuItem onPress={()=>onDeleteSeq(i,a)}>刪除这条</MenuItem>\r\n                  <MenuItem onPress={()=>onInsertSeq(i,a)}>插入一条</MenuItem>\r\n                  <MenuItem onPress={()=>onAddSeq(i)}>末尾新增一条</MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <Button  size=\"md\" iconAfter={<IconChevronDown />} variant=\"ghost\" css={{whiteSpace:'unset'}}>\r\n                {`[${a.no}] ${a.name||''} 型号${a.type||''} 开机${a.powerOn||''} 关机${a.shutDown||''}`}\r\n              </Button>\r\n            </ResponsivePopover>\r\n          </div>\r\n          {i===seq && editor}\r\n        </React.Fragment>;\r\n      }) }\r\n    </div>;\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos} label={'主要检验仪器设备'}>\r\n        <Text  variant=\"h5\">\r\n          二、主要测量设备性能检查\r\n        </Text>\r\n        使用的仪器设备表:\r\n        <hr/>\r\n        {instrumentTable}\r\n        {seq===null && editor}\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem0=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      //devCod,检验日期：这些字段要提升到关系数据库表中，json半结构化数据的就不做保留。\r\n      //安全人员,联系电话：放json，算是过度性质输入形态。报告正式批准/终结后，就该触发修改同步到库表中去。也可反馈给下一次定期检验，继承或修改。\r\n      const {devCod,检验日期,安全人员,联系电话} =par||{};\r\n      return {devCod,检验日期,安全人员,联系电话};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'一、设备概况'}>\r\n        允许直接修改部分\r\n        <InputGroupLine  label='设备号{将来是点击链接自动获得}' >\r\n          <Input autoFocus={true} value={inp?.devCod ||''}  placeholder=\"那一台电梯？暂时要求，将来是点击链接自动获得\"\r\n                 onChange={e => setInp({ ...inp, devCod: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='检验日期{将来提升到创立原始记录的前置输入}' >\r\n          <Input value={inp?.检验日期 ||''}  placeholder=\"基准日\" type='date'\r\n                 onChange={e => setInp({ ...inp, 检验日期: e.currentTarget.value}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='安全管理人员' >\r\n          <Input autoFocus={true} value={inp?.安全人员 ||''}\r\n                 onChange={e => setInp({ ...inp, 安全人员: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='联系电话1' >\r\n          <Input autoFocus={true} value={inp?.联系电话 ||''}\r\n                 onChange={e => setInp({ ...inp, 联系电话: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        不可修改的明细：待续或点外部链接。\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem98=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {自检材料,校验材料,整改材料,资料及编号,memo} =par||{};\r\n      return {自检材料,校验材料,整改材料,资料及编号,memo};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'见证材料或问题备注'}>\r\n        六、见证材料{`{将来可能只需输入编号链接即可}`}\r\n        <InputGroupLine  label='1、维保自检材料' >\r\n          <Input autoFocus={true} value={inp?.自检材料 ||''}  placeholder=\"使用默认规则，缺省编号情况的可不填\"\r\n                 onChange={e => setInp({ ...inp, 自检材料: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='2、限速器动作速度校验材料' >\r\n          <Input autoFocus={true} value={inp?.校验材料 ||''}\r\n                 onChange={e => setInp({ ...inp, 校验材料: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='3、使用单位整改反馈材料' >\r\n          <Input autoFocus={true} value={inp?.整改材料 ||''}\r\n                 onChange={e => setInp({ ...inp, 整改材料: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='4、其他资料及编号' >\r\n          <Input autoFocus={true} value={inp?.资料及编号 ||''}\r\n                 onChange={e => setInp({ ...inp, 资料及编号: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        七、备注<br/><br/>\r\n        纸质正式报告备注可能只取前几行\r\n         <TextArea autoFocus={true} value={inp?.memo ||''} rows={10} placeholder=\"网页版本正式报告备注可随意多写\"\r\n                    onChange={e => setInp({ ...inp, memo: e.currentTarget.value||undefined}) } />\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem99=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n     //检验人IDs编制日期编制人结论：这些字段要提升到关系数据库表中，而不是json字段里面。只能保留上级语义更强的，json半结构化数据的就不做保留。\r\n      const {检验结论,编制日期,编制人,检验人IDs} =par||{};\r\n      return {检验结论,编制日期,编制人,检验人IDs};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n\r\n    return (\r\n      <InspectRecordTitle  control={eos}   label={'下结论!'}>\r\n        五、现场检验意见\r\n        <InputGroupLine  label='检验结论{签名后结论不能再改}' >\r\n          <Select inputSize=\"md\" css={{minWidth:'140px',fontSize:'2rem',padding:'0 1rem'}}\r\n                  value={ inp?.检验结论  ||''}\r\n                  onChange={e => setInp({ ...inp, 检验结论: e.currentTarget.value||undefined}) }\r\n          >\r\n            <option></option>\r\n            <option>合格</option>\r\n            <option>不合格</option>\r\n            <option>复检合格</option>\r\n            <option>复检不合格</option>\r\n          </Select>\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='检验人员{用户ID列表,将来签名，登录来签注}' >\r\n          <Input autoFocus={true} value={inp?.检验人IDs ||''} placeholder=\"输入本系统用户ID，将来签名后结论不能再改，多人签名：以 分割\"\r\n                 onChange={e => setInp({ ...inp, 检验人IDs: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='编制人员{将来是提交人员，自动的}' >\r\n          <Input autoFocus={true} value={inp?.编制人 ||''} placeholder=\"目前直接输入名字，一个人\"\r\n                 onChange={e => setInp({ ...inp, 编制人: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='编制日期{将来等于提交日，自动的}' >\r\n          <Input autoFocus={true} value={inp?.编制日期 ||''}  type='date'\r\n                 onChange={e => setInp({ ...inp, 编制日期: e.currentTarget.value}) } />\r\n        </InputGroupLine>\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem96=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {unq} =par||{};\r\n      return {unq};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n    const [seq, setSeq] = React.useState(null);   //表對象的當前一條。\r\n    const [obj, setObj] = React.useState({no:'',desc:'',rres:'',rdate:''});\r\n    React.useEffect(() => {\r\n      let size =inp?.unq?.length;\r\n      setSeq(size>0?  size-1:null);\r\n    }, [inp]);\r\n    function onModifySeq(idx,it){\r\n      setObj(it);\r\n      setSeq(idx);\r\n    };\r\n    function onDeleteSeq(idx,it){\r\n      inp?.unq?.splice(idx,1);\r\n      setInp({...inp,unq: [...inp?.unq] });\r\n      setSeq(null);\r\n    };\r\n    function onInsertSeq(idx,it){\r\n      inp?.unq?.splice(idx,0, obj);\r\n      setInp({...inp,unq:[...inp?.unq] });\r\n      setSeq(idx);\r\n    };\r\n    function onAddSeq(idx){\r\n      let size =inp?.unq?.push(obj);\r\n      setInp( (inp?.unq&&{...inp,unq:[...inp?.unq] } )  || {...inp,unq:[obj] } );\r\n      setSeq((inp?.unq&&(size-1))  || 0 );\r\n    };\r\n\r\n    const editor=<Layer elevation={\"sm\"} css={{ padding: '0.25rem' }}>\r\n      <div>\r\n        <InputGroupLine label={`类别/编号{将来自动的不能改}`}>\r\n          <Input autoFocus={true}  value={obj.no ||''} placeholder=\"目前是人工输入，类比B/4.8这样的\"\r\n                 onChange={e =>setObj({...obj, no: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`不合格内容描述{将来自动的}`}>\r\n          <Input autoFocus={true}  value={obj.desc ||''}  placeholder=\"目前是人工输入，正式报告要呈现不合格说明\"\r\n                 onChange={e =>setObj({...obj, desc: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`复检结果`}>\r\n          <SelectHookfork value={obj.rres ||''}\r\n                          onChange={e =>setObj({...obj, rres: e.currentTarget.value} ) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='复检日期' >\r\n          <Input autoFocus={true} value={obj.rdate ||''}  type='date'\r\n                 onChange={e =>setObj({...obj, rdate: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <Button onPress={() => {\r\n          if(seq !== null) {\r\n            inp?.unq?.splice(seq, 1, obj);\r\n            setInp({ ...inp, unq: [...inp?.unq] });\r\n          }\r\n          else setInp({ ...inp, unq: [obj] });\r\n        } }\r\n        >{inp?.unq?.length>0? `改一条就确认`: `新增一条`}</Button>\r\n      </div>\r\n    </Layer>;\r\n\r\n    const myTable=<div>\r\n      {inp?.unq?.map((a,i)=>{\r\n        return <React.Fragment  key={i}>\r\n          <div>{`${i+1}`}\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem onPress={()=>onModifySeq(i,a)}>修改</MenuItem>\r\n                  <MenuItem onPress={()=>onDeleteSeq(i,a)}>刪除这条</MenuItem>\r\n                  <MenuItem onPress={()=>onInsertSeq(i,a)}>插入一条</MenuItem>\r\n                  <MenuItem onPress={()=>onAddSeq(i)}>末尾新增一条</MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <Button  size=\"md\" iconAfter={<IconChevronDown />} variant=\"ghost\" css={{whiteSpace:'unset'}}>\r\n                {`[${a.rdate}] 项目${a.no||''}： ${a.desc||''}。 复检结果${a.rres||''}`}\r\n              </Button>\r\n            </ResponsivePopover>\r\n          </div>\r\n          {i===seq && editor}\r\n        </React.Fragment>;\r\n      }) }\r\n    </div>;\r\n  //不合格unq表数据生成时机：复检编制开始时初始化来的。在初检场景看到是动态校验目的前端显示表还未存储到后端数据库。\r\n    return (\r\n      <InspectRecordTitle  control={eos} label={'不合格复检结果记录'}>\r\n        <Text  variant=\"h5\">\r\n          四、检验不合格记录及复检结果\r\n        </Text>\r\n        明细表: 初检报告后才显示,复检时修改但是不能删除;\r\n        <hr/>\r\n        {myTable}\r\n        {seq===null && editor}\r\n      </InspectRecordTitle>\r\n    );\r\n  } );\r\n\r\nconst InternalItem97=\r\n  React.forwardRef((\r\n    props,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {检验条件,温度,电压值} =par||{};\r\n      return {检验条件,温度,电压值};\r\n    }, []);\r\n    const { eos, setInp, inp } = useItemControlAs({ref,  filter: getInpFilter});\r\n    const theme = useTheme();\r\n    const [floor, setFloor] = React.useState(null);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <InspectRecordTitle  control={eos} label={'附录B：现场检验条件'}>\r\n          1、机房或者机器设备间的空气温度保持在5℃～40℃之间；<br/>\r\n          2、电源输入电压波动在额定电压值±7％的范围内；<br/>\r\n          3、环境空气中没有腐蚀性和易燃性气体及导电尘埃； <br/>\r\n          4、检验现场（主要指机房或者机器设备间、井道、轿顶、底坑）清洁，没有与电梯工作无关的物品和设备，基站、相关层站等检验现场放置表明正在进行检验的警示牌；<br/>\r\n          5、对井道进行了必要的封闭。 <br/>\r\n          特殊情况下，电梯设计文件对温度、湿度、电压、环境空气条件等进行了专门规定的，检验现场的温度、湿度、电压、环境空气条件等应当符合电梯设计文件的规定。\r\n          <hr/>\r\n          <div>\r\n            确认过的记录:\r\n            {inp?.检验条件?.map((a,i)=>{\r\n              return <React.Fragment key={i}>\r\n                <br/>{\r\n                `[${a}]日: ${inp?.温度?.[a]||''} ℃, ${inp?.电压值?.[a]||''} V;`\r\n              }\r\n              </React.Fragment>;\r\n            }) }\r\n          </div>\r\n          新增检查=＞\r\n          <InputGroupLine  label='首先设置当前检验日期'>\r\n            <SuffixInput\r\n              autoFocus={true}  type='date'\r\n              value={floor||''}\r\n              onChange={e => {setFloor( e.currentTarget.value) }}\r\n            >\r\n              <Button onPress={() =>floor&&(inp?.检验条件?.includes(floor)? null:\r\n                  setInp( (inp?.检验条件&&{...inp,检验条件:[...inp?.检验条件,floor] } )\r\n                    || {...inp,检验条件:[floor] } )\r\n              )}\r\n              >新增</Button>\r\n            </SuffixInput>\r\n          </InputGroupLine>\r\n          <div css={{ textAlign: 'center' }}>\r\n            <Button css={{ marginTop: theme.spaces.sm }} size=\"sm\"\r\n                    onPress={() => floor&&inp?.检验条件?.includes(floor) &&(\r\n                      setInp({...inp,检验条件:[...inp.检验条件.filter(a => a!==floor )],\r\n                        温度:{...inp?.温度,[floor]:undefined}, 电压值:{...inp?.电压值,[floor]:undefined}\r\n                      })\r\n                    )}\r\n            >刪除</Button>\r\n          </div>\r\n          <InputGroupLine label={`机房空气温度(${floor}):`}>\r\n            <SuffixInput\r\n              autoFocus={true}\r\n              placeholder=\"请输入测量数\"\r\n              value={ (inp?.温度?.[floor] ) || ''}\r\n              onChange={e => floor&&setInp({ ...inp, 温度:{...inp?.温度,[floor]:e.currentTarget.value||undefined} }) }\r\n            >℃</SuffixInput>\r\n          </InputGroupLine>\r\n          <InputGroupLine label={`电源输入电压(${floor}):`}>\r\n            <SuffixInput\r\n              autoFocus={true}\r\n              placeholder=\"请输入测量数\"\r\n              value={ (inp?.电压值?.[floor] ) || ''}\r\n              onChange={e => floor&&setInp({ ...inp, 电压值:{...inp?.电压值,[floor]:e.currentTarget.value||undefined} }) }\r\n            >V</SuffixInput>\r\n          </InputGroupLine>\r\n        </InspectRecordTitle>\r\n      </React.Fragment>\r\n    );\r\n  } );\r\n\r\n\r\nconst projectList = [\r\n  createItem(0, <InternalItem0/>),\r\n  createItem(1, <InternalItem1/>),\r\n  createItem(2, <InternalItem2t4/>),\r\n  createItem(5, <InternalItem5/>),\r\n  createItem(6, <InternalItem2d8/>),\r\n  createItem(7, <InternalItem2d9/>),\r\n  createItem(10, <InternalItem3d4/>),\r\n  createItem(13, <InternalItem13/>),\r\n  createItem(16, <InternalItem16/>),\r\n  createItem(18, <InternalItem18/>),\r\n  createItem(22, <InternalItem22/>),\r\n  createItem(25, <InternalItem25/>),\r\n  createItem(27, <InternalItem27/>),\r\n  createItem(30, <InternalItem6d3/>),\r\n  createItem(31, <InternalItem31/>),\r\n  createItem(35, <InternalItem35/>),\r\n  createItem(40, <InternalItem8d1/>),\r\n  createItem(44, <InternalItem8d5/>),\r\n  createItem(48, <InternalItem8d10/>),\r\n  createItem(52, <InternalItemh2/>),\r\n  createItem(96, <InternalItem96/>),\r\n  createItem(97, <InternalItem97/>),\r\n  createItem(98, <InternalItem98/>),\r\n  createItem(99, <InternalItem99/>)\r\n];\r\n","D:\\home\\sei\\front-end\\src\\inspect\\report\\db.ts",["672","673"],"//import * as firebase from \"firebase/app\";\r\n//import \"firebase/firestore\";\r\n//import \"firebase/auth\";\r\n//import config from \"./firebase-config\";\r\nimport debug from \"debug\";\r\n//import omitBy from \"lodash.omitby\";\r\n//import isNil from \"lodash.isnil\";\r\n//import { Ingredient } from \"./RecipeList\";\r\n\r\nimport {gql, useMutation, useQuery } from \"@apollo/client\";\r\nimport { StackItem } from \"react-gesture-stack\";\r\nimport * as React from \"react\";\r\n//import * as React from \"react\";\r\n\r\n//import { client } from \"./graphql/setup\";\r\n\r\nconst log = debug(\"app:db\");\r\nlog.log = console.log.bind(console);\r\n//debug.log = console.info.bind(console);  //输出到\r\n\r\n/*谷歌云 删除,\r\nfirebase.initializeApp(config);\r\n*/\r\n//谷歌的firebase云数据库/云文件存储。\r\n\r\nexport const db =null;\r\n/*谷歌云 删除, 否则 一堆的拒绝连接等\r\nexport const db = firebase.firestore();\r\n*/\r\n/*type UserType = {\r\n  uid: string;\r\n  id: string;   　　//后端的\r\n  email?: string;\r\n  displayName?: string;\r\n  photoURL: string;\r\n};*/\r\n/*谷歌云 删除\r\ndb.enablePersistence().catch(function(err) {\r\n  console.error(err);\r\n});\r\n*/\r\n\r\n/*export function getUserFields(user: UserType) {\r\n  return {\r\n    uid: user.uid,\r\n    displayName: user.displayName,\r\n    email: user.email,\r\n    photoURL: user.photoURL\r\n  };\r\n}\r\n\r\n\r\nconst CREATE_FOLLOW = gql`\r\n  mutation requestFollow($fromUser: ID!, $toUser: ID!) {\r\n    requestFollow(fromUser: $fromUser,toUser: $toUser)\r\n  }\r\n`; */\r\n\r\n//fromUser发起关注toUser\r\n//export const requestFollow = (fromUser: UserType, toUser: UserType) => {\r\n//export const useRequestFollow = (fromUser: UserType, toUser: UserType) => {\r\n  /*return db.collection(\"relations\").add({\r\n    fromUserId: fromUser.uid,\r\n    toUserId: toUser.uid,\r\n    fromUser: getUserFields(fromUser),\r\n    toUser: getUserFields(toUser),\r\n    confirmed: false\r\n  }); */\r\n  /* /const [options, setOptions] = React.useState(null);\r\n  const [userList, setUserList] = React.useState(null);\r\n  //console.log(\"进useRequestFollow User=\"+ JSON.stringify(fromUser) );\r\n  const [createPost, {error, data}] = useMutation(CREATE_FOLLOW, {\r\n    variables: {fromUser: fromUser.id, toUser:toUser.id},\r\n    update: (proxy, mutationResult) => {\r\n      const newPost = mutationResult.data.requestFollow;     //新的一条,登录ok；　　.data.createPost;\r\n      console.log(\"createEntry返回Q=\" + JSON.stringify(mutationResult.data) + newPost);\r\n      //setUserList( [JSON.stringify(mutationResult.data)] );\r\n      setUserList( newPost );\r\n    },\r\n    //将会受此操作到影响的那些Query的也要同时刷新哦。\r\n    refetchQueries:  ['useFollowing']\r\n  })\r\n  return { userList ,submitfunc:createPost,error　};\r\n};*/\r\n\r\n\r\n/*/export const deleteRequestFollow = (id: string) => {}\r\nconst KICKOUT_FOLLOW = gql`\r\n  mutation dismissFollowOf($fromUser: ID!) {\r\n    dismissFollowOf(fromUser: $fromUser)\r\n  }\r\n`;*/\r\n/*export const useKickoutFollower = (id: string) => {\r\n  log(\"delete relation: %s\", id);\r\n  console.log(\"useKickoutFollower　id是=\",id );\r\n  const [options, setOptions] = React.useState(null);\r\n  let result=null;\r\n  const [userList, setUserList] = React.useState(null);\r\n  console.log(\"以useKickoutFollower options=\" + JSON.stringify(options));\r\n  const [createPost, {error, data}] = useMutation(KICKOUT_FOLLOW, {\r\n    variables: {fromUser:id},\r\n    update: (proxy, mutationResult) => {\r\n      const newPost = mutationResult.data.confirmFollow;\r\n      console.log(\"useKickoutFollower返update=\" ,mutationResult);\r\n      setUserList( newPost );\r\n      result=newPost;\r\n    },\r\n    refetchQueries:  ['useFollowing']\r\n  })\r\n  return {setOptions, result ,submitfunc:createPost, error　};\r\n};*/\r\n\r\n/*const DELETE_FOLLOW = gql`\r\n  mutation delRequestFollow($toUser: ID!) {\r\n    delRequestFollow(toUser: $toUser)\r\n  }\r\n`;*/\r\n/*export const useDeleteRequestFollow = (id: string) => {\r\n  log(\"delete relation: %s\", id);\r\n  console.log(\"deleteRequestFollow　id是=\",id );\r\n        return db\r\n    .collection(\"relations\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      log(\"deleted: %s\", id);\r\n    })\r\n    .catch(err => {\r\n      log(\"failed to delete: %s\", err);\r\n      throw err;\r\n    }); */\r\n/*  const [options, setOptions] = React.useState(null);\r\nlet result=null;\r\nconst [userList, setUserList] = React.useState(null);\r\nconsole.log(\"以confirmFollow options=\" + JSON.stringify(options));\r\nconst [createPost, {error, data}] = useMutation(DELETE_FOLLOW, {\r\n  variables: {toUser:id},\r\n  onCompleted: (data) => {\r\n    //接口　onCompleted:　比update:　的运行时机更加滞后。update反而能早点获取应答；\r\n    console.log(\"deleteRequestFollow返Completed=\" ,data );\r\n  },\r\n  update: (proxy, mutationResult) => {\r\n    const newPost = mutationResult.data.confirmFollow;\r\n    console.log(\"deleteRequestFollow返update=\" ,mutationResult);\r\n    //setUserList( [JSON.stringify(mutationResult.data)] );\r\n    setUserList( newPost );\r\n    result=newPost;\r\n  },\r\n   //不更新refetchQueries的话，若用户不手动刷新就无法显示最新数据。\r\n  refetchQueries:  ['useFollowing']\r\n})\r\nreturn {setOptions, result ,submitfunc:createPost, error　};\r\n};*/\r\n\r\n/*const CONFIRM_FOLLOW = gql`\r\n  mutation confirmFollow($userId: ID!) {\r\n    confirmFollow(userId: $userId)\r\n  }\r\n`;*/\r\n/*这id是用户id;\r\nexport const useConfirmFollow = () => {\r\nreturn db\r\n    .collection(\"relations\")\r\n    .doc(id)\r\n    .update({ confirmed: true });*/\r\n/*  const [options, setOptions] = React.useState(null);\r\nconst [userList, setUserList] = React.useState(null);\r\nconsole.log(\"以confirmFollow options=\" + JSON.stringify(options));\r\nconst [createPost, {error, data}] = useMutation(CONFIRM_FOLLOW, {\r\n  variables: {...options},\r\n  onCompleted: (data) => {\r\n    　　//接口　onCompleted:　比update:　的运行时机更加滞后。update反而能早点获取应答；\r\n    console.log(\"观察useMutation返Completed=\" + JSON.stringify(data) );\r\n  },\r\n  update: (proxy, mutationResult) => {\r\n    const newPost = mutationResult.data.confirmFollow;\r\n    console.log(\"观察useMutation返update=\" + JSON.stringify(mutationResult.data) + newPost);\r\n    //setUserList( [JSON.stringify(mutationResult.data)] );\r\n    setUserList( newPost );\r\n  },\r\n  refetchQueries:  ['useFollowing']\r\n})\r\nreturn {setOptions, userList ,submitfunc:createPost,error　};\r\n};*/\r\n\r\n/*\r\nexport interface RecipeOptions {\r\n  title: string;\r\n  plain: string;\r\n  userId: string;\r\n  description: string;\r\n  image?: string;\r\n  createdBy?: {\r\n    email: string;\r\n    photoURL: string;\r\n  };\r\n  author: string;\r\n//  ingredients: Ingredient[];\r\n}\r\n\r\nconst CREATE_DEVICE = gql`\r\n  mutation CREATE_DEVICE($cod: String!,$oid: String!) {\r\n    newEQP(cod: $cod,type:\"电梯4000\",oid: $oid) {\r\n      id cod oid\r\n      pos {\r\n       id address\r\n      }\r\n    }\r\n  }\r\n`;*/\r\n\r\n/*/创立设备　\r\nexport const useCreateDevice = (filter) => {\r\n  const [userList, setUserList] = React.useState(null);\r\n  console.log(\"进入useCreateE-device.filter=\",filter );\r\n  const [submitfunc, {error, data, loading, called}] = useMutation(CREATE_DEVICE, {\r\n    variables: {...filter},\r\n    update: (proxy, mutationResult) => {\r\n      const newPost = mutationResult.data.newEQP;     //新的一条,登录ok；　　.data.createPost;\r\n      console.log(\"createEntry返回Q1=\" + JSON.stringify(mutationResult.data) + newPost);\r\n      setUserList( newPost );\r\n    },\r\n    onCompleted: (data) => {\r\n      console.log(\"createEntry返回Q=Completed=\" ,data );\r\n    }\r\n  })\r\n  return { userList ,submitfunc,error　};\r\n};*/\r\n\r\n/* useMutation 第二参数列表\r\n  update?: MutationUpdaterFn<TData>;     报错的不一定执行这。 mutationResult.data和data实际都是一样，就是触发回调的多个定制机会。\r\n  onCompleted?: (data: TData) => void;　　最终确认成功应答的回调，它比update的运行时机更滞后onCompleted比update慢的多。\r\n  optimisticResponse?: TData | ((vars: TVariables) => TData);   立刻返回数据\r\n  refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesFunction;   附带的同步关联刷新；\r\n  onError: ()=>{};  配置onError后， 外部函数就无法catch()到了;\r\n*/\r\n\r\n\r\n\r\n/*\r\ninterface RecipeUpdateOptions {\r\n  title: string;\r\n  author: string;\r\n  description: string;\r\n  image?: string;\r\n  createdBy?: {\r\n    email: string;\r\n    photoURL: string;\r\n  };\r\n  plain: string;\r\n  ingredients: any[];\r\n}\r\n\r\nconst updateEntry001 = (id: string, options: RecipeUpdateOptions) => {\r\n  return db\r\n    .collection(\"recipes\")\r\n    .doc(id)\r\n    .update(omitBy(options, isNil));\r\n};\r\n\r\nconst UPDATE_DEVICE_MUTATION = gql`\r\n    mutation UPDATE_DEVICE_MUTATION($id: ID!,$unt: ID!,$info: DeviceCommonInput) {\r\n    buildEQP(id: $id, owner: $unt, info: $info) {\r\n      id cod oid\r\n      pos {\r\n       id address\r\n      } ownerUnt{ id name }\r\n    }\r\n    }\r\n`;*/\r\n/*\r\nexport const useUpdateEntry = (options) => {\r\n  const [result, setResult] = React.useState(null);\r\n  console.log(\"进入useUpdateEntry.filter=\",options );\r\n  const [submitfunc, {error, data, loading, called}] = useMutation(UPDATE_DEVICE_MUTATION, {\r\n    variables: {...options},\r\n    update: (proxy, mutationResult) => {\r\n      const newPost = mutationResult.data.buildEQP;     //新的一条,登录ok；　　.data.createPost;\r\n      console.log(\"useUpdateEntry返回Q1=\" + JSON.stringify(mutationResult.data) + newPost);\r\n      setResult( newPost );\r\n    },\r\n    onCompleted: (data) => {\r\n      console.log(\"useUpdateEntry返回Q=Completed=\" ,data );  //onCompleted比update慢的多。\r\n    }\r\n  })\r\n  return { result ,submitfunc, error};\r\n};*/\r\n/*\r\nexport const updateEntry0002 = (id: string, options: RecipeUpdateOptions) => {\r\n  return db\r\n    .collection(\"recipes\")\r\n    .doc(id)\r\n    .update({\r\n      ...omitBy(options, isNil),\r\n      image: options.image\r\n    });\r\n};\r\n\r\nexport const deleteEntry = (id: string) => {\r\n  log(\"delete: %s\", id);\r\n  return db\r\n    .collection(\"recipes\")\r\n    .doc(id)\r\n    .delete();\r\n};*/\r\n/*\r\nconst GET_BOUND_DEVICES = gql`\r\n  query findAllTaskFilter($where: WhereTree,$offset:Int!,$first:Int,$orderBy:String,$asc:Boolean) {\r\n    list:findAllTaskFilter(where: $where,offset:$offset,first:$first,orderBy:$orderBy,asc:$asc) {\r\n        id,dep,date,status,devs{\r\n          id,cod,oid}\r\n     }\r\n  }\r\n`;*/\r\n//任务过滤；\r\n/*/并针对该任务，查询该任务底下已绑定的设备列表［］。\r\nexport function useQueryBoundDevices(filter:any) {\r\n  const { loading, error, data, fetchMore, refetch} = useQuery(GET_BOUND_DEVICES, {\r\n    variables: { ...filter },\r\n    notifyOnNetworkStatusChange: true\r\n  });\r\n  return {items:　data　&&　data.list && data.list[0] && data.list[0].devs,\r\n      　error, loadMore:fetchMore, loading, refetch};\r\n}\r\n*/\r\n\r\n\r\nconst DEVICE_BY_ID = gql`\r\n  query DEVICE_EQPCOD_QUERY($id: ID!) {\r\n    getDeviceSelf(id: $id) {\r\n      id oid cod isps {\r\n        id\r\n      } pos {\r\n        id address\r\n      } ownerUnt {\r\n        id name\r\n      }\r\n    } \r\n  }\r\n`;\r\n\r\nexport function useDeviceDetail( id ) {\r\n  var value = null;\r\n  console.log(\"Recipe页面id=\" + JSON.stringify(id));\r\n  const { loading, error, data,  } = useQuery(DEVICE_BY_ID, {\r\n    variables: { id },\r\n    notifyOnNetworkStatusChange: true\r\n  });\r\n//第一个render这里loading=true，要到第二次再执行到了这里才会有data数据!\r\n  console.log(\"刚Recipe经过\" + JSON.stringify(data) + \"进行中\" + JSON.stringify(loading));\r\n\r\n  if (!loading) {\r\n    if (data) {\r\n      const { getDeviceSelf: recipe } = data;\r\n      if (recipe) {\r\n        value = recipe;\r\n        //  authjs = JSON.parse(user);\r\n        //setAuthj(authjs); 报错！//React limits the number of renders to prevent an infinite loop.\r\n        console.log(\"以Recipe从后端获得=\" + JSON.stringify(value),\"函数：\",'useDeviceDetail');\r\n        return { loading,error, data:recipe };\r\n      }\r\n    }\r\n  }\r\n  //可能有数据data但是同时errors[]存在的情况。\r\n  return { loading,error, data:null };\r\n}\r\n\r\n\r\n\r\n\r\n//从后端服务器获取该ISP的所有子报告列表。\r\nconst GET_ISP＿REPORTS = gql`\r\n  query getReportOfISP($id: ID!) {\r\n    reps:getReportOfISP(id: $id) {\r\n        id,type,no,upLoadDate,path\r\n     }\r\n  }\r\n`;\r\n//底下refetch可用于紧急手动刷新＝刷新URL一样的， 底层缓存机制与自动更新界面很慢。\r\nexport function useLookReports(filter:any) {\r\n  const { loading, error, data, fetchMore, refetch} = useQuery(GET_ISP＿REPORTS, {\r\n    variables: { ...filter },\r\n    notifyOnNetworkStatusChange: true\r\n  });\r\n  return {items:　data　&&　data.reps,　error, loadMore:fetchMore, loading, refetch};\r\n}\r\n\r\n//useQuery输出包含：'startPolling' 'subscribeToMore' | 'refetch' | 'variables'> +fetchMore；　输入第二参数：onCompleted?:　onError?: ；\r\n//类似fetchMore，原型定义 refetch(variables) 立刻刷新；startPolling(pollInterval)；subscribeToMore(options{variables，updateQuery()})；　\r\n\r\nconst DELETE_REPORT = gql`\r\n    mutation deleteReport(\r\n        $repId: ID! \r\n        $reason: String\r\n    ) {\r\n    res: deleteReport(repId: $repId,  reason: $reason) \r\n    }\r\n`;\r\n//删除一份报告\r\n//这里用refetchQueries:  ['findAllUserFilter']不好使的，无法让上一级列表即刻刷新。因为该<StackItem>组件内容不是由它查来的。\r\nexport const useDeleteReport  = (options) => {\r\n  const [submit, {error, data, loading, called}] = useMutation( DELETE_REPORT, {\r\n    variables: {...options},\r\n    refetchQueries:  ['getReportOfISP']\r\n  })\r\n  const { res : result} = data||{};\r\n  return { result ,submit, error, loading, called };\r\n};\r\n\r\nconst NEW_REPORT = gql`\r\n    mutation newReport(\r\n        $isp: ID! \r\n        $type: String!\r\n        $version: String\r\n    ) {\r\n    res: newReport(isp: $isp, modeltype: $type, modelversion: $version) {\r\n      id, no  upLoadDate\r\n    }\r\n    }\r\n`;\r\n//增加新的报告\r\nexport const useNewReport  = (options) => {\r\n  const [submit, {error, data, loading, called}] = useMutation( NEW_REPORT, {\r\n    variables: {...options},\r\n    refetchQueries:  ['getReportOfISP']\r\n  });\r\n  const { res : result} = data||{};\r\n  return { result ,submit, error, loading, called };\r\n};\r\n\r\n//点击触发更新：同一个文件内gql` query getReportOfISP；同时当前路由页面内挂载着的；并非直接上级组件内的query能立刻更新，而两个组件实际毫无嵌套关系的。\r\n\r\n","D:\\home\\sei\\front-end\\src\\device\\task\\BoundDevices.tsx",["674"],"/** @jsxImportSource @emotion/react */\r\n//import { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Text,\r\n  Spinner,\r\n  useTheme,\r\n  List,\r\n  Button,\r\n  ListItem,\r\n  Skeleton, ScrollView, useInfiniteScroll, Embed, Avatar\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport {  useQueryBoundDevices } from \"./db\";\r\nimport { useFirebaseImage } from \"../../Image\";\r\nimport { Link as RouterLink, useLocation, useRoute } from \"wouter\";\r\nimport { FadeImage } from \"../../FadeImage\";\r\n\r\n\r\n\r\ninterface BoundDevicesProps {\r\n  id: string;   //任务ID\r\n}\r\n//显示某一个关注对象用户菜谱列表\r\n//有1个地方会引用到的。\r\nexport const BoundDevices: React.FunctionComponent<\r\n  BoundDevicesProps\r\n> = ({ id }) => {\r\n  const theme = useTheme();\r\n  //console.log(\"看FollowingRecipes filter =id=\", id );\r\n  let wheres={　id  };\r\n\r\n  const [filter, setFilter] = React.useState({filter:wheres,\r\n    offset:0,\r\n    limit:5,\r\n    orderBy: \"date\",\r\n    asc: true\r\n  });\r\n  //根据任务ｉｄ找设备，返回items＝下挂设备列表\r\n  const {\r\n    loading,\r\n    error,\r\n    items,\r\n    loadMore\r\n  } =useQueryBoundDevices(filter);\r\n\r\n  //console.log(\"看FollowingRecipes filter=\", filter );\r\n  //就算id切换了，本组件的数据还是会被appollo自动缓存的，id变化不会一定导致重新查询后端数据库的，看着像页面显示的缓存。\r\n  //根据id和界面操作后的参数，来要修正graphQL的Query()的参数 = 要做重新查询。\r\n  React.useEffect(() => {\r\n    let wheres={　id  };\r\n    setFilter({filter:wheres,\r\n      offset:0,\r\n      limit:5,\r\n      orderBy: \"date\",\r\n      asc: true\r\n    });\r\n  }, [id]);\r\n  //滚动条触发的更多查询。初始查询的记录满员必须大于让滚动条开启{满屏了}的数量，否则无法触发后续更多查询。\r\n  const ref = React.useRef();\r\n  const [hasMore, setHasMore] = React.useState(true);\r\n\r\n  const [fetching] = useInfiniteScroll({\r\n    container: ref,\r\n    hasMore: hasMore,\r\n    onFetch: () => toLoadMore()\r\n   });\r\n\r\n  async function toLoadMore() {\r\n    loadMore({\r\n      variables: {\r\n        offset: items.length,\r\n      },\r\n      updateQuery: (prev, { fetchMoreResult }) => {\r\n        console.log(\"fetchMoreResult来看=\"+ JSON.stringify(fetchMoreResult)+\",原来=\"+ JSON.stringify(prev) );\r\n        if (!fetchMoreResult)   return prev;\r\n        if (!fetchMoreResult.recipe)   return prev;\r\n        if(fetchMoreResult.recipe.length===0)\r\n          setHasMore(false);\r\n        if(prev.recipe.length + fetchMoreResult.recipe.length > 2000 )\r\n          setHasMore(false);\r\n        return Object.assign({}, prev, {\r\n          recipe: [...prev.recipe, ...fetchMoreResult.recipe],\r\n        });\r\n      },\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <ScrollView　overflowY\r\n                   css={{\r\n                     flex: 1,\r\n                     height: \"100%\",\r\n                    //WebkitOverflowScrolling: \"touch\"\r\n                   }}\r\n                  innerRef={ref}>\r\n        <div\r\n          css={{   //特意把父div滚动条启动开。`calc(100vh - ${ileapHeight}px)`,   '750px',  注意串里的空格必须要有！\r\n            //关键是靠内容持续增长列表的紧上一级DIV来控制，把这一个div高度撑开，迫使最近的窗口所附属的滚动条启动。\r\n            minHeight: `calc(100vh - 164px)`,\r\n            [theme.mediaQueries.md]: {\r\n              minHeight: `calc(100vh - 164px - ${theme.spaces.lg} - ${theme.spaces.lg})`\r\n            },\r\n            [theme.mediaQueries.xl]: {\r\n              minHeight: `calc(100vh - 164px - ${theme.spaces.xl} - ${theme.spaces.xl})`\r\n            },\r\n          }}\r\n        >\r\n          {/*loading && <Spinner center />*/}\r\n          {!loading && !items && (\r\n            <Text\r\n              muted\r\n              css={{\r\n                display: \"block\",\r\n                fontSize: theme.fontSizes[0],\r\n                margin: theme.spaces.lg\r\n              }}\r\n            >\r\n              This user currently 没有东西.\r\n            </Text>\r\n          )}\r\n\r\n          <List>\r\n            {loading && (\r\n              <React.Fragment>\r\n                <ListItem\r\n                  interactive={false}\r\n                  contentBefore={\r\n                    <Skeleton\r\n                      css={{\r\n                        width: \"32px\",\r\n                        height: \"32px\",\r\n                        borderRadius: \"50%\"\r\n                      }}\r\n                    />\r\n                  }\r\n                  primary={<Skeleton css={{ maxWidth: \"160px\" }} />}\r\n                />\r\n                <ListItem\r\n                  interactive={false}\r\n                  contentBefore={\r\n                    <Skeleton\r\n                      css={{\r\n                        width: \"32px\",\r\n                        height: \"32px\",\r\n                        borderRadius: \"50%\"\r\n                      }}\r\n                    />\r\n                  }\r\n                  primary={<Skeleton css={{ maxWidth: \"200px\" }} />}\r\n                />\r\n              </React.Fragment>\r\n            )}\r\n\r\n            {items && items.map(recipe => (\r\n              <DeviceListItem\r\n                id={recipe.id}\r\n                key={recipe.id}\r\n                editable\r\n                recipe={recipe as any}\r\n                task={id}\r\n              />\r\n            ))}\r\n\r\n            {fetching && (\r\n              <ListItem\r\n                interactive={false}\r\n                aria-live=\"polite\"\r\n                aria-busy=\"true\"\r\n                primary={<Skeleton animated css={{ width: \"150px\" }} />}\r\n              />\r\n            )}\r\n          </List>\r\n\r\n          {loading && <Spinner />}\r\n          {/*loadingError || (loadingMoreError && <div>Loading error...</div>)*/}\r\n          {error  && <div>Loading error...</div> }\r\n          {(!items || items.length===0) && (\r\n            <div css={{ textAlign: \"center\" }}>\r\n              <Button  onPress={ () => toLoadMore() } >\r\n                哎呀还没有已经关联设备可看\r\n              </Button>\r\n            </div>\r\n          )}\r\n       </div>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\n//某个任务　下挂　单个设备的　recipe＝device{}\r\nfunction DeviceListItem({ recipe, id, highlight ,task }: any) {\r\n  const theme = useTheme();\r\n  //缩略图thumb-sm@和完整图片thumb@的url不一样的；后端支持缩略？　没必要做；\r\n  const { src, error } = useFirebaseImage(\"thumb-sm@\", recipe.image);\r\n\r\n  const href = `/device/${id}/task/${task}`;\r\n  //被点击中匹配href，成功=true=isActive[? ,..];　表示正好跟界面显示同样的一个路由。\r\n  const [isActive,] = useRoute(href);\r\n  const [, setLocation] = useLocation();\r\n//\r\n  //   href={`/device/${id}`}\r\n  //        //navigate(href , { replace: true });\r\n\r\n  return (\r\n    <RouterLink to={href}>\r\n      <ListItem  interactive={false}\r\n        wrap={false}\r\n        /*onPress={e => {\r\n          // 有问题？　e.preventDefault();\r\n          setLocation(href, { replace: false });\r\n        }}\r\n        */\r\n        aria-current={isActive}\r\n        css={{\r\n          paddingTop: 0,\r\n          paddingBottom: 0,\r\n          height: \"56px\",\r\n          alignItems: \"center\",\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          \"& em\": {\r\n            fontStyle: \"normal\",\r\n            color: theme.colors.text.selected\r\n          },\r\n          backgroundColor: isActive ? theme.colors.background.tint1 : null,\r\n          \"& > *\": {\r\n            flex: 1,\r\n            overflow: \"hidden\"\r\n          }\r\n        }}\r\n        contentBefore={\r\n          <React.Fragment>\r\n            <Avatar size=\"xs\" name={'曳'}/>\r\n            <Avatar size=\"xs\" name={'有'}/>\r\n          </React.Fragment>\r\n        }\r\n        contentAfter={\r\n          recipe.image && !error ? (\r\n            <Embed css={{ width: \"60px\" }} width={75} height={50}>\r\n              <FadeImage src={src} hidden />\r\n            </Embed>\r\n          ) : (\r\n            recipe.oid\r\n          )\r\n        }\r\n        primary={\r\n          highlight ? (\r\n            <span dangerouslySetInnerHTML={{ __html: highlight.title.value }} />\r\n          ) : (\r\n            recipe.cod\r\n          )\r\n        }\r\n      />\r\n    </RouterLink>\r\n  );\r\n}\r\n\r\n\r\n\r\n/**上面的loadMore的updateQuery的函数原型定义这样的：...node_modules/apollo-client/core/ObservableQuery.d.ts:25；\r\n * =更新整个Query查询结果。\r\n  export interface FetchMoreOptions<TData = any, TVariables = OperationVariables> {\r\n    updateQuery: (previousQueryResult: TData, options: {\r\n        fetchMoreResult?: TData;    //这个是=后端服务器新增加数据。\r\n        variables?: TVariables;\r\n    }) => TData;\r\n}\r\n **/\r\n\r\n\r\n//引入useInfiniteScroll使用的四个要素：有滚动条的组件innerRef，hasMore，onFetch()，fetching；\r\n//<ScrollView >要么height:\"100%\"要么删除height参数让内容去撑开，不能使用height:\"70%\"之类的数，内部2次DIV嵌套,导致0.7*0.7=实际上内部高度。\r\n//较上层DIV若是style={{ height: \"xxx%\" }}，注意若父辈元素都没限定最小的高度，那么就会导致由底下的内容撑开了，这等价于没height参数=实际无效！；\"100%\"若父辈有px数就听父辈的。\r\n\r\n","D:\\home\\sei\\front-end\\src\\ImageUpload.jsx",[],["675","676"],"D:\\home\\sei\\front-end\\src\\Editor.jsx",[],"D:\\home\\sei\\front-end\\src\\report\\elevator\\PeriodicalInspection.O-1.tsx",["677","678"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Button,\r\n} from \"customize-easy-ui-component\";\r\nimport {  OriginalViewProps,  useProjectListAs } from \"../comp/base\";\r\nimport {  InternalItemHandResult  } from \"../comp/base\";\r\nimport {  mergeEditorItemRefs  } from \"../../utils/tools\";\r\n//import isEqual from \"lodash.isequal\";\r\n//import { Link as RouterLink } from \"wouter\";\r\nimport { EditStorageContext } from \"../StorageContext\";\r\nimport { ItemConclusion, ItemRecheckResult, ItemUniversal } from \"../editor/eBase\";\r\nimport { ItemAppendixB, ItemRemarks } from \"./elvBase\";\r\nimport { ItemGapMeasure, ItemSurveyLinkMan } from \"./elvRarelyVary\";\r\nimport { ItemInstrumentTable } from \"../editor/eRarelyVary\";\r\nimport { createItem, getInspectionItemsLength, verifyAction } from \"../editor/eHelper\";\r\nimport { inspectionContent } from \"./Periodical/main\";\r\nimport { useGeneralFormat } from \"./Periodical/editor\";\r\nimport { useThrottle } from \"../../hooks/useHelpers\";\r\n\r\n//原始记录，一一对应的报告的录入编辑数据，可打印。\r\n//不需要每个verId新搞一个文件的，甚至不需要搞新的组件，可以只需内部逻辑处理。\r\n\r\n//对应某报告模板下所有编辑修改组件；原始记录打印展示全部列表。項目標記符不能用ALL none preview printAll item1.1保留字。\r\nconst recordPrintList =[\r\n  createItem('Survey', <ItemSurveyLinkMan/>),\r\n  createItem('Instrument', <ItemInstrumentTable/>),\r\n  createItem('item1.1', <ItemUniversal x={0} y={0} inspectionContent={inspectionContent}/>),\r\n  createItem('gap', <ItemGapMeasure/>),\r\n  createItem('Appendix', <ItemAppendixB/>),\r\n  createItem('Remark', <ItemRemarks/>),\r\n  createItem('ReCheck', <ItemRecheckResult/>),\r\n  createItem('Conclusion', <ItemConclusion/>),\r\n];\r\n//检验项目数量\r\nconst maxItemsSeq=getInspectionItemsLength(inspectionContent);\r\n\r\n//forwardRef实际上已经没用了，ref，也可改成简易组件模式。\r\nexport const OriginalView=\r\n  React.forwardRef((\r\n    { action,  verId, repId}:OriginalViewProps, ref\r\n  ) => {\r\n    const {storage, setStorage} =React.useContext(EditStorageContext);\r\n    const {generalFormat} =useGeneralFormat({verId, repId});\r\n    let editorRefCount=recordPrintList.length+maxItemsSeq;\r\n    const clRefs =useProjectListAs({count: editorRefCount});\r\n    //同名字的字段：清除／覆盖，编辑器未定义的字段数据可保留。\r\n    const outCome=mergeEditorItemRefs( ...clRefs.current! );\r\n    //旧模式两次暴露传递，返回给爷辈组件。\r\n    const [doConfirmModify, setDoConfirmModify] = React.useState(false);\r\n    React.useImperativeHandle( ref,() => ({doConfirm: setDoConfirmModify }), [setDoConfirmModify] );\r\n    const {doFunc:throttledSetDoConfirmModify, ready} = useThrottle(setDoConfirmModify);\r\n    //点按钮后outCome先要render一次获得最新值；必须从false到true的变化才能触发执行。 true->true不能执行的。 useLayoutEffect\r\n    React.useEffect(() => {\r\n      if(doConfirmModify){\r\n        setStorage({...storage, ...outCome});\r\n        setDoConfirmModify(false);\r\n      }\r\n   }, [doConfirmModify, outCome, storage, setStorage] );\r\n\r\n\r\n    const renderItemsContent =React.useMemo(() => {\r\n      let seq = 0;\r\n      let htmlTxts =[];\r\n      inspectionContent.forEach((rowBigItem, x) => {\r\n        rowBigItem && rowBigItem.items.forEach((item, y) => {\r\n          if(item){\r\n            seq += 1;\r\n            const rowHead =<ItemUniversal key={seq} ref={clRefs.current![recordPrintList.length+seq-1]}  x={x}  y={y}\r\n                                   alone={false} show={action==='printAll'} inspectionContent={inspectionContent}\r\n                                   procedure={generalFormat[x].items[y].procedure}  details={generalFormat[x].items[y].details}\r\n            />;\r\n            htmlTxts.push(rowHead);\r\n          }\r\n        });\r\n      });\r\n      return ( <React.Fragment key={'item1.1'}>\r\n        {htmlTxts}\r\n      </React.Fragment> );\r\n    }, [action,  clRefs, generalFormat]);\r\n\r\n    //这里action是 '2.1' ALL none printAll 这样的路由参数 ?readOnly=1&。\r\n    const recordList= React.useMemo(() =>\r\n      {\r\n        const {isItemNo, x, y} =verifyAction(action,generalFormat);\r\n        if(isItemNo){\r\n          return <React.Fragment>\r\n            <ItemUniversal key={0} ref={null}  x={x}  y={y} show={true} inspectionContent={inspectionContent}\r\n                           procedure={generalFormat[x].items[y].procedure}  details={generalFormat[x].items[y].details}\r\n            />\r\n          </React.Fragment>;\r\n        }else{\r\n          const itemA=recordPrintList.find((one)=>one.itemArea===action);\r\n          if(itemA){\r\n            return <React.Fragment>\r\n              {\r\n                React.cloneElement(itemA.zoneContent as React.ReactElement<any>, {\r\n                  ref: null,\r\n                  key: itemA.itemArea,\r\n                  repId,\r\n                  show: true\r\n                })\r\n              }\r\n            </React.Fragment>;\r\n          }else if(action==='ALL' || action==='printAll'){\r\n            return recordPrintList.map((each, i) => {\r\n              if(each.itemArea==='item1.1')\r\n                return  renderItemsContent;\r\n              else\r\n                return React.cloneElement(each.zoneContent as React.ReactElement<any>, {\r\n                  ref: clRefs.current![i],\r\n                  show: action==='printAll',\r\n                  alone: false,\r\n                  repId,\r\n                  key: i\r\n                });\r\n            });\r\n          }\r\n        }\r\n        return  null;\r\n      }\r\n      ,[action, clRefs,renderItemsContent,generalFormat,repId]);\r\n\r\n\r\n    return <React.Fragment>\r\n      {recordList}\r\n      { (action==='ALL' || action==='printAll') &&\r\n          <Button size=\"lg\" intent={'primary'}  disabled ={!ready}\r\n                onPress={() =>{\r\n                 //这里派发出去editorSnapshot: outCome {...storage, ...outCome}都是按钮捕获的值，还要经过一轮render才会有最新值。\r\n                 throttledSetDoConfirmModify(true);\r\n              }\r\n            }>\r\n            全部项目一起确认\r\n          </Button>\r\n      }\r\n    </React.Fragment>;\r\n  } );\r\n\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\report\\elevator\\PeriodicalInspection.R-1.tsx",["679"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,} from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport { Collapse, Text, useTheme } from \"customize-easy-ui-component\";\r\nimport { Table, TableBody, TableHead, TableRow, Cell, CCell } from \"../../comp/TableExt\";\r\nimport { useTouchable, } from \"touchable-hook\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useMedia } from \"use-media\";\r\nimport { Link as RouterLink } from \"wouter\";\r\nimport { getInstrument2xColumn, itemResultTransform } from \"../comp/helper\";\r\nimport { ReportViewProps, useIspNormalizeContent } from \"../comp/base\";\r\nimport { reportFirstPageHead, 末尾链接, 注意事项, 落款单位地址, 首页设备概况 } from \"../comp/rarelyVary\";\r\nimport { 检验编制核准, 检验设备情况 } from \"./elvRarelyVary\";\r\nimport { inspectionContent } from \"./Periodical/main\";\r\nimport * as queryString from \"querystring\";\r\n\r\n//正式报告的显示打印。\r\n//不需要每个verId新搞一个文件的，甚至不需要搞新的组件，可以只需内部逻辑处理。\r\n\r\nexport const ReportView: React.FunctionComponent<ReportViewProps> = ({\r\n    repId,   source: orc,  verId,\r\n}) => {\r\n  const theme = useTheme();\r\n  const notSmallScr = useMedia('(min-width:800px),print');\r\n  const qs= queryString.parse(window.location.search);\r\n  const printing =qs && !!qs.print;\r\n  console.log(\"参数第三层路由&print qs printing=\",printing, qs);\r\n  const [redundance, setRedundance] =React.useState(notSmallScr||printing);\r\n  function onPress() {\r\n      setRedundance(!redundance);\r\n  }\r\n  const {bind:bindRedund ,} =useTouchable({ onPress,  behavior: \"button\" });\r\n  React.useEffect(() => {\r\n     setRedundance(notSmallScr||printing);\r\n  }, [notSmallScr, printing] );\r\n  const instrumentTable =React.useMemo(() => getInstrument2xColumn(orc.仪器表), [orc.仪器表]);\r\n  const 检验结果替换 =React.useCallback((orc, out) => {\r\n    if(orc['轿井间距'])   out[3.7][0]=`间距${orc['轿井间距']}m`;\r\n    if(orc['对重越程'] && orc['对重越程最大'])   out[3.15][2]=`最大允许值${orc['对重越程最大']}mm;测量值${orc['对重越程']}mm`;\r\n  }, []);\r\n  const itRes =React.useMemo(()=>itemResultTransform(orc,inspectionContent,检验结果替换), [orc,检验结果替换]);\r\n  const {renderIspContent} =useIspNormalizeContent({itRes, inspectionContent, modelPath:'EL-DJ/ver/1', repNo:`${repId}`});\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Helmet title={`JD2020FTC00004`}/>\r\n      <div css={{\r\n            \"@media not print\": {\r\n              marginTop:'1rem',\r\n              marginBottom: '1rem'\r\n            }\r\n          }}\r\n      >\r\n       <div role=\"button\" tabIndex={0} {...bindRedund}>\r\n          {!(redundance) && <Text variant=\"h4\">\r\n               {`No：JD2020FTC00004 更多...`}\r\n             </Text>\r\n          }\r\n       </div>\r\n        <Collapse id={'1'} show={redundance} noAnimated>\r\n          <div role=\"button\" {...bindRedund}>\r\n            { reportFirstPageHead({theme, No: 'JD2020FTC00004'}) }\r\n            <div css={{\r\n                \"@media print\": {\r\n                  height:'110px'\r\n                }\r\n            }}>\r\n            </div>\r\n          </div>\r\n        </Collapse>\r\n        <Text variant=\"h3\" css={{\r\n              textAlign:'center',\r\n              \"@media (min-width:690px),print and (min-width:538px)\": {\r\n                fontSize: theme.fontSizes[6],\r\n              }\r\n            }}>\r\n        有机房曳引驱动电梯定期检验报告\r\n        </Text>\r\n        <div css={{\r\n            \"@media print\": {\r\n              height:'200px'\r\n            }\r\n          }}>\r\n        </div>\r\n        { 首页设备概况( {theme, orc} ) }\r\n        <div role=\"button\" tabIndex={1} {...bindRedund}>\r\n          {!(redundance) && <Text variant=\"h4\">\r\n                福建省特种设备检验研究院 更多...\r\n              </Text>\r\n          }\r\n        </div>\r\n        <Collapse id={'2'} show={redundance} noAnimated>\r\n            <div css={{\r\n              \"@media print\": {\r\n                height:'210px'\r\n              }\r\n            }}>\r\n            </div>\r\n            <div  css={{\r\n              textAlign:'center',\r\n              \"@media print\": {\r\n                pageBreakAfter:'always'\r\n              }\r\n            }}>\r\n              {落款单位地址}\r\n            </div>\r\n          <div role=\"button\" {...bindRedund}>\r\n            <Text variant=\"h1\" css={{textAlign:'center'}}>注意事项</Text>\r\n          </div>\r\n            <Text variant=\"h4\"><br/>\r\n              1. 本报告依据《电梯监督检验和定期检验规则——曳引与强制驱动电梯》（TSG T7001-2009）及1号、2号修改单制定，适用于有机房曳引驱动电梯定期检验。<br/>\r\n              {注意事项}\r\n            </Text>\r\n          <div role=\"button\" {...bindRedund}>\r\n            <Text variant=\"h2\" css={{textAlign:'center'}}>有机房曳引驱动电梯定期检验报告</Text>\r\n          </div>\r\n        </Collapse>\r\n        <RouterLink  to={`/report/EL-DJ/ver/1/Survey/${repId}`}>\r\n         <Table  fixed={ [\"15%\",\"34%\",\"16%\",\"%\"]  }\r\n                printColWidth={ [\"95\",\"210\",\"110\",\"300\"] }\r\n                css={ {borderCollapse: 'collapse' } }\r\n           >\r\n         {检验设备情况({orc})}\r\n        </Table>\r\n       </RouterLink>\r\n       <Table  fixed={ [\"6%\",\"8%\",\"26%\",\"14%\",\"8%\",\"%\",\"14%\"]  }\r\n                printColWidth={ [\"46\",\"70\",\"240\",\"160\",\"70\",\"240\",\"160\"] }\r\n                css={ {borderCollapse: 'collapse' } }\r\n        >\r\n          <TableBody>\r\n            <TableRow>\r\n              <CCell component=\"th\" scope=\"row\">设备技术参数</CCell>\r\n              <CCell colSpan={6} css={{padding:0}}>\r\n                <Table  fixed={ [\"17%\",\"33%\",\"16%\",\"%\"]  }\r\n                        printColWidth={ [\"95\",\"210\",\"110\",\"300\"] }\r\n                        css={ {borderCollapse: 'collapse', height:'fill-available'} }\r\n                  >\r\n                  <TableBody>\r\n                    <TableRow >\r\n                      <CCell>额定载重量</CCell>\r\n                      <CCell>{orc.额定载荷}  kg</CCell>\r\n                      <CCell>额定速度</CCell>\r\n                      <CCell>{orc.运行速度}  m/s</CCell>\r\n                    </TableRow>\r\n                    <TableRow >\r\n                      <CCell>层站数</CCell>\r\n                      <CCell>{orc.电梯层数}  层   {orc.电梯站数}  站  {orc.电梯门数} 门</CCell>\r\n                      <CCell>控制方式</CCell>\r\n                      <CCell>{orc.控制方式}</CCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </CCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <CCell component=\"th\" scope=\"row\">检验依据</CCell>\r\n              <Cell colSpan={6}>《电梯监督检验和定期检验规则——曳引与强制驱动电梯》（TSG T7001-2009）及1号、2号修改单</Cell>\r\n            </TableRow>\r\n            <RouterLink  to={`/report/EL-DJ/ver/1/Instrument/${repId}`}>\r\n              <TableRow >\r\n                <CCell component=\"th\" scope=\"row\" rowSpan={1+instrumentTable.length}>主要检验仪器设备</CCell>\r\n                <CCell>序号</CCell>\r\n                <CCell>仪器名称</CCell>\r\n                <CCell>仪器编号</CCell>\r\n                <CCell>序号</CCell>\r\n                <CCell>仪器名称</CCell>\r\n                <CCell>仪器编号</CCell>\r\n              </TableRow>\r\n            </RouterLink>\r\n            {instrumentTable.map((o,i) => {\r\n                return (\r\n                  <TableRow key={i}>\r\n                    <CCell>{o.s1}</CCell>\r\n                    <CCell>{o.name1}</CCell>\r\n                    <CCell css={{wordBreak: 'break-all'}}>{o.no1}</CCell>\r\n                    <CCell>{o.s2}</CCell>\r\n                    <CCell>{o.name2}</CCell>\r\n                    <CCell css={{wordBreak: 'break-all'}}>{o.no2}</CCell>\r\n                  </TableRow>\r\n                );\r\n              } )\r\n            }\r\n            <RouterLink  to={`/report/EL-DJ/ver/1/Conclusion/${repId}`}>\r\n             <TableRow>\r\n              <CCell component=\"th\" scope=\"row\">检验结论</CCell>\r\n              <CCell colSpan={6}><Text variant=\"h1\" css={{fontSize:'4rem'}}>{orc.检验结论}</Text></CCell>\r\n            </TableRow>\r\n            </RouterLink>\r\n            <RouterLink  to={`/report/EL-DJ/ver/1/Remark/${repId}`}>\r\n            <TableRow>\r\n              <CCell component=\"th\" scope=\"row\">备注</CCell>\r\n              <Cell colSpan={6}>{orc.memo}</Cell>\r\n            </TableRow>\r\n            </RouterLink>\r\n          </TableBody>\r\n        </Table>\r\n        <Table  fixed={ [\"11%\",\"23%\",\"6%\",\"12%\",\"%\"]  }\r\n                printColWidth={ [\"95\",\"210\",\"90\",\"110\",\"300\"] }\r\n                css={ {borderCollapse: 'collapse' } }\r\n        >\r\n          <TableBody>\r\n            <RouterLink  to={`/report/EL-DJ/ver/1/Appendix/${repId}`}>\r\n            <TableRow>\r\n              <CCell component=\"th\" scope=\"row\">检验日期</CCell>\r\n              <CCell colSpan={2}>{orc.检验日期}</CCell>\r\n              <CCell>下次检验日期</CCell>\r\n              <CCell>{orc.下检日期 || '／'}</CCell>\r\n            </TableRow>\r\n            </RouterLink>\r\n           {检验编制核准({orc})}\r\n            <TableRow >\r\n              <CCell component=\"th\" scope=\"row\">审核</CCell>\r\n              <CCell></CCell>\r\n              <CCell>日期</CCell>\r\n              <CCell>2020-01-02</CCell>\r\n            </TableRow>\r\n            <TableRow >\r\n              <CCell component=\"th\" scope=\"row\">批准</CCell>\r\n              <CCell></CCell>\r\n              <CCell>日期</CCell>\r\n              <CCell></CCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n       <br/>\r\n        <Table  fixed={ [\"6%\",\"7%\",\"7%\",\"9%\",\"10%\",\"%\",\"17%\",\"9%\"]  }\r\n                printColWidth={ [\"46\",\"46\",\"55\",\"55\",\"130\",\"405\",\"175\",\"120\"] }\r\n               css={ {borderCollapse: 'collapse' } }\r\n        >\r\n          <TableHead>\r\n            <RouterLink  to={`/report/EL-DJ/ver/1/ALL/${repId}`}>\r\n              <TableRow>\r\n                <CCell>序号</CCell>\r\n                <CCell>检验类别</CCell>\r\n                <CCell colSpan={4}>检验项目及内容</CCell>\r\n                <CCell>检验结果</CCell>\r\n                <CCell>检验结论</CCell>\r\n              </TableRow>\r\n            </RouterLink>\r\n          </TableHead>\r\n          <TableBody>\r\n            {renderIspContent}\r\n          </TableBody>\r\n        </Table>\r\n        检验不合格项目内容及复检结果\r\n        <Table  fixed={ [\"5%\",\"11%\",\"%\",\"14%\",\"14%\"]  }\r\n                printColWidth={ [\"35\",\"66\",\"700\",\"70\",\"95\"] }\r\n                css={ {borderCollapse: 'collapse' } }\r\n        >\r\n          <TableHead>\r\n           <RouterLink  to={`/report/EL-DJ/ver/1/ReCheck/${repId}`}>\r\n            <TableRow>\r\n              <CCell>序号</CCell>\r\n              <CCell>类别/编号</CCell>\r\n              <CCell>检验不合格内容记录</CCell>\r\n              <CCell>复检结果</CCell>\r\n              <CCell>复检日期</CCell>\r\n            </TableRow>\r\n           </RouterLink>\r\n          </TableHead>\r\n          <TableBody>\r\n            {itRes.failure.map((ts, i) => {\r\n              return (\r\n                <RouterLink key={i} to={`/report/EL-DJ/ver/1/${ts}/${repId}`}>\r\n                  <TableRow>\r\n                    <CCell component=\"th\" scope=\"row\">{i+1}</CCell>\r\n                    <CCell>{itRes[ts].iClass}/{ts}</CCell>\r\n                    <CCell>{itRes[ts].fdesc}</CCell>\r\n                    <CCell></CCell>\r\n                    <CCell></CCell>\r\n                  </TableRow>\r\n                </RouterLink>\r\n              );\r\n            })\r\n            }\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n      {末尾链接({template:'EL-DJ',verId,repId})}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\inspect\\report\\BoundReports.tsx",["680"],"/** @jsxImportSource @emotion/react */\r\n//import { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//谷歌云服务 import usePaginateQuery from \"firestore-pagination-hook\";\r\n//import firebase from \"firebase/app\";\r\nimport {\r\n  Text,\r\n  Spinner,\r\n  useTheme,\r\n  List,\r\n  Button,\r\n  ListItem,\r\n  Skeleton,\r\n  ScrollView,\r\n  useInfiniteScroll,\r\n  Embed,\r\n  ResponsivePopover,\r\n  MenuList,\r\n  MenuItem,\r\n  IconPackage,\r\n  MenuDivider,\r\n  IconButton, IconMoreVertical, useToast\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport { useDeleteReport, useLookReports } from \"./db\";\r\nimport { useFirebaseImage } from \"../../Image\";\r\nimport { Link as RouterLink,useLocation, useRoute } from \"wouter\";\r\nimport { FadeImage } from \"../../FadeImage\";\r\n\r\n\r\n\r\ninterface BoundReportsProps {\r\n  id: string;\r\n}\r\n//某个检验ISP 底下的报告队列。\r\nexport const BoundReports: React.FunctionComponent<\r\n  BoundReportsProps\r\n> = ({ id }) => {\r\n  const theme = useTheme();\r\n  console.log(\"看BoundReports filter =id=\", id );\r\n\r\n\r\n  const [filter, setFilter] = React.useState({ id:id });\r\n  const {loading, error, items, loadMore } =useLookReports(filter);\r\n\r\n  console.log(\"所有挂接的报告 filter=\", filter, items);\r\n  //就算id切换了，本组件的数据还是会被appollo自动缓存的，id变化不会一定导致重新查询后端数据库的，看着像页面显示的缓存。\r\n  //根据id和界面操作后的参数，来要修正graphQL的Query()的参数 = 要做重新查询。\r\n  React.useEffect(() => {\r\n    setFilter({ id:id });\r\n  }, [id,]);\r\n  //滚动条触发的更多查询。初始查询的记录满员必须大于让滚动条开启{满屏了}的数量，否则无法触发后续更多查询。\r\n  const ref = React.useRef();\r\n  const [hasMore, setHasMore] = React.useState(true);\r\n\r\n  const [fetching] = useInfiniteScroll({\r\n    container: ref,\r\n    hasMore: hasMore,\r\n    onFetch: () => toLoadMore()\r\n   });\r\n\r\n  async function toLoadMore() {\r\n    loadMore({\r\n      variables: {\r\n        offset: items.length,\r\n      },\r\n      updateQuery: (prev, { fetchMoreResult }) => {\r\n        console.log(\"fetchMoreResult来看=\"+ JSON.stringify(fetchMoreResult)+\",原来=\"+ JSON.stringify(prev) );\r\n        if (!fetchMoreResult)   return prev;\r\n        if (!fetchMoreResult.recipe)   return prev;\r\n        if(fetchMoreResult.recipe.length===0)\r\n          setHasMore(false);\r\n        if(prev.recipe.length + fetchMoreResult.recipe.length > 2000 )\r\n          setHasMore(false);\r\n        return Object.assign({}, prev, {\r\n          recipe: [...prev.recipe, ...fetchMoreResult.recipe],\r\n        });\r\n      },\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <ScrollView　overflowY\r\n                   css={{\r\n                     flex: 1,\r\n                     height: \"100%\",\r\n                    //WebkitOverflowScrolling: \"touch\"\r\n                   }}\r\n                  innerRef={ref}>\r\n        <div\r\n          css={{   //特意把父div滚动条启动开。`calc(100vh - ${ileapHeight}px)`,   '750px',  注意串里的空格必须要有！\r\n            //关键是靠内容持续增长列表的紧上一级DIV来控制，把这一个div高度撑开，迫使最近的窗口所附属的滚动条启动。\r\n            minHeight: `calc(100vh - 164px)`,\r\n          //Todo: 嵌入不是一个地方的，高度不同。\r\n            [theme.mediaQueries.md]: {\r\n              minHeight: `calc(100vh - 164px - ${theme.spaces.lg} - ${theme.spaces.lg})`\r\n            },\r\n            [theme.mediaQueries.xl]: {\r\n              minHeight: `calc(100vh - 164px - ${theme.spaces.xl} - ${theme.spaces.xl})`\r\n            },\r\n          }}\r\n        >\r\n          {/*loading && <Spinner center />*/}\r\n          {!loading && !items && (\r\n            <Text\r\n              muted\r\n              css={{\r\n                display: \"block\",\r\n                fontSize: theme.fontSizes[0],\r\n                margin: theme.spaces.lg\r\n              }}\r\n            >\r\n              This user currently 没有东西.\r\n            </Text>\r\n          )}\r\n\r\n          <List>\r\n            {loading && (\r\n              <React.Fragment>\r\n                <ListItem\r\n                  interactive={false}\r\n                  contentBefore={\r\n                    <Skeleton\r\n                      css={{\r\n                        width: \"32px\",\r\n                        height: \"32px\",\r\n                        borderRadius: \"50%\"\r\n                      }}\r\n                    />\r\n                  }\r\n                  primary={<Skeleton css={{ maxWidth: \"160px\" }} />}\r\n                />\r\n                <ListItem\r\n                  interactive={false}\r\n                  contentBefore={\r\n                    <Skeleton\r\n                      css={{\r\n                        width: \"32px\",\r\n                        height: \"32px\",\r\n                        borderRadius: \"50%\"\r\n                      }}\r\n                    />\r\n                  }\r\n                  primary={<Skeleton css={{ maxWidth: \"200px\" }} />}\r\n                />\r\n              </React.Fragment>\r\n            )}\r\n            {/*所有挂接的报告*/}\r\n            {items && items.map(recipe => (\r\n              <ReportListItem\r\n                id={recipe.id}\r\n                key={recipe.id}\r\n                editable\r\n                recipe={recipe as any}\r\n                task={id}\r\n              />\r\n            ))}\r\n\r\n            {fetching && (\r\n              <ListItem\r\n                interactive={false}\r\n                aria-live=\"polite\"\r\n                aria-busy=\"true\"\r\n                primary={<Skeleton animated css={{ width: \"150px\" }} />}\r\n              />\r\n            )}\r\n          </List>\r\n\r\n          {loading && <Spinner />}\r\n          {/*loadingError || (loadingMoreError && <div>Loading error...</div>)*/}\r\n          {error  && <div>Loading error...</div> }\r\n          {(!items || items.length===0) && (\r\n            <div css={{ textAlign: \"center\" }}>\r\n              <Button  onPress={ () => toLoadMore() } >\r\n                检验ID　{id}　底下还没有现成的报告可看\r\n              </Button>\r\n            </div>\r\n          )}\r\n       </div>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\n//缩略图和完整图都是同一个图片的数据内容，　不做差异化处理！\r\nfunction ReportListItem({ recipe, id, highlight ,task }: any) {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  const ispId =task;\r\n  const {  error } = useFirebaseImage(\"thumb-sm@\", recipe.image);\r\n  //Todo: 根据身份识别场景，　区分按钮点击的url，或是隐藏按钮。\r\n  //报告编制人的报告入口链接\r\n  const href = `/inspect/${task}/report/${id}`;\r\n  //Todo: 类型和版本；　report/EL-DJ/ver/1/preview/\r\n\r\n  const [isActive,] = useRoute(href);\r\n  const [, setLocation] = useLocation();\r\n  const [repId, setRepId] = React.useState(null);\r\n  const {result, submit:updateFunc, } = useDeleteReport({\r\n    repId, reason:'测试期直接删'\r\n  });\r\n  //下面highlight. 是algoliasearch.Response返回的，必须有预先定义。\r\n  async function handleDelete(id: string) {\r\n    try {\r\n      await updateFunc();\r\n    } catch (err) {\r\n      toast({\r\n        title: \"后端报错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      console.log(\"handleDelete返回\", err);\r\n      return;\r\n    }\r\n    setLocation(\"/inspect/\"+ispId,  { replace: true } );\r\n  }\r\n\r\n  return (\r\n    <RouterLink to={href}>\r\n      <ListItem  interactive={false}\r\n        wrap={false}\r\n\r\n        aria-current={isActive}\r\n        // href={`/device/${id}`}\r\n        css={{\r\n          alignItems: \"center\",\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          \"& em\": {\r\n            fontStyle: \"normal\",\r\n            color: theme.colors.text.selected\r\n          },\r\n          backgroundColor: isActive ? theme.colors.background.tint1 : null,\r\n          \"& > *\": {\r\n            flex: 1,\r\n            overflow: \"hidden\"\r\n          }\r\n        }}\r\n        contentBefore={\r\n          recipe.sssdf && !error ? (\r\n            <Embed css={{ width: \"60px\" }} width={75} height={50}>\r\n              <FadeImage src={recipe.path} hidden />\r\n            </Embed>\r\n          ) : (\r\n            recipe.id\r\n          )\r\n        }\r\n        primary={\r\n          highlight ? (\r\n            <span dangerouslySetInnerHTML={{ __html: highlight.title.value }} />\r\n          ) : (\r\n            `报告号 ${recipe.no||''}`\r\n          )\r\n        }\r\n        secondary={recipe.type ||''}\r\n        contentAfter={\r\n          <ResponsivePopover\r\n            content={\r\n              <MenuList>\r\n                <MenuItem onPress={ async () => {\r\n                  await setRepId(recipe.id);\r\n                  handleDelete(recipe.id)\r\n                }\r\n                }>删除该报告\r\n                </MenuItem>\r\n                <MenuDivider />\r\n                <MenuItem contentBefore={<IconPackage />}  onPress={() => {\r\n                  toast({\r\n                    title: \"该功能还未做呢，只能提交审核员一个网页链接看看\"\r\n                  });\r\n                  setLocation(\"/\", { replace: true } );\r\n                } }>\r\n                  签名并提交审核\r\n                </MenuItem>\r\n              </MenuList>\r\n            }\r\n          >\r\n            <IconButton\r\n              css={{\r\n                //display: !editing && editable ? undefined : \"none\",\r\n                //marginLeft: theme.spaces.sm\r\n              }}\r\n              variant=\"ghost\" size={'md'}\r\n              icon={<IconMoreVertical />}\r\n              label=\"菜单\"\r\n            />\r\n          </ResponsivePopover>\r\n        }\r\n      >\r\n        { `日期 ${recipe.upLoadDate||''}` }\r\n      </ListItem>\r\n    </RouterLink>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n//引入useInfiniteScroll使用的四个要素：有滚动条的组件innerRef，hasMore，onFetch()，fetching；\r\n//<ScrollView >要么height:\"100%\"要么删除height参数让内容去撑开，不能使用height:\"70%\"之类的数，内部2次DIV嵌套,导致0.7*0.7=实际上内部高度。\r\n//较上层DIV若是style={{ height: \"xxx%\" }}，注意若父辈元素都没限定最小的高度，那么就会导致由底下的内容撑开了，这等价于没height参数=实际无效！；\"100%\"若父辈有px数就听父辈的。\r\n//<ListItem>组件，其中primary要用在填充较长的内容，contentAfter是相对简短的内容显示，不要颠倒；primary会截短，而contentAfter不会缩短。\r\n","D:\\home\\sei\\front-end\\src\\report\\elevator\\PeriodicalInspection.E.tsx",["681"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\n//import * as React from \"react\";\r\nimport { ReportView } from \"./PeriodicalInspection.R-1\";\r\nimport { OriginalView } from \"./PeriodicalInspection.O-1\";\r\n\r\n//模板的动态加载入口文件。\r\n//版本号verId  \"1\" \"2\"  再一次做个 订制的路由。\r\n//新版本号启动必要性？ 老版本几年后消亡？为啥新建版本号啊？。 实际可以照verId逻辑区分来做。 也可以选择新定义组件模式， 都能支持。\r\nexport  const  reportTemplate={\r\n  \"1\": <ReportView source={null} verId={'1'}/>,\r\n  \"2\":  null,\r\n};\r\n\r\n//2大类用途的模板定义实例；这2个输出名字不能改。\r\nexport  const  originalTemplate={\r\n  \"1\": <OriginalView inp={null} action='none' verId={'1'}/>,\r\n  \"2\":  null,\r\n};\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\utils\\cookies.ts",["682"],"interface CookiesOptions {\r\n  path?: string;\r\n  expires?: Date | string | number;\r\n  [key: string]: string | Date | undefined | boolean | number;\r\n}\r\n\r\nexport default {\r\n  get(name: string) {\r\n    /* eslint-disable */\r\n    const matches = document.cookie.match(\r\n      new RegExp('(?:^|; )' + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + '=([^;]*)')\r\n    );\r\n    /* eslint-enable */\r\n\r\n    return matches ? decodeURIComponent(matches[1]) : undefined;\r\n  },\r\n\r\n  set(name: string, val: string, options: CookiesOptions = {}) {\r\n    if (!options.path) {\r\n      options.path = '/';\r\n    }\r\n\r\n    let { expires } = options;\r\n\r\n    if (typeof expires === 'number' && expires) {\r\n      const d = new Date();\r\n      d.setTime(d.getTime() + expires * 1000);\r\n      expires = d;\r\n      options.expires = d;\r\n    }\r\n    if (expires && expires instanceof Date) {\r\n      options.expires = expires.toUTCString();\r\n    }\r\n\r\n    const value = encodeURIComponent(val);\r\n\r\n    let updatedCookie = `${name}=${value}`;\r\n\r\n    Object.keys(options).forEach(propName => {\r\n      updatedCookie += `; ${propName}`;\r\n\r\n      const propValue = options[propName];\r\n      if (propValue !== true) {\r\n        updatedCookie += `= ${propValue}`;\r\n      }\r\n    });\r\n\r\n    document.cookie = updatedCookie;\r\n  },\r\n\r\n  remove(name: string) {\r\n    this.set(name, '', {\r\n      expires: -1\r\n    });\r\n  }\r\n};\r\n\r\n/* 原文：https://blog.csdn.net/hxg117/article/details/76954606\r\n3. 将Token存储于Cookie\r\nHTTP/1.1 200 OK\r\nSet-Cookie: access_token=eyJhbGciOiJIUzI1NiIsI.eyJpc3MiOiJodHRwczotcGxlL.mFrs3Zo8eaSNcxiNfvRh9dqKP4F1cB; Secure; HttpOnly;\r\n随后的请求需要带上Token\r\nGET /stars/pollux\r\nHost: galaxies.com\r\nCookie: access_token=eyJhbGciOiJIUzI1NiIsI.eyJpc3MiOiJodHRwczotcGxlL.mFrs3Zo8eaSNcxiNfvRh9dqKP4F1cB;\r\n优点：\r\n  可以指定 httponly，  来防止被Javascript读取， 也可以指定secure，\r\n          来保证token只在HTTPS下传输。\r\n缺点：\r\n  不符合Restful 最佳实践。\r\n  容易遭受CSRF攻击 （可以在服务器端检查 Refer 和 Origin）\r\n*/\r\n\r\n","D:\\home\\sei\\front-end\\src\\report\\elevator\\Periodical\\editor.tsx",["683"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,} from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport { IndentationLayText, SelectHookfork } from \"../../comp/base\";\r\nimport { InputGroupLine, SuffixInput, Touchable } from \"customize-easy-ui-component\";\r\nimport { CCell, Cell, Table, TableBody, TableRow } from \"../../../comp/TableExt\";\r\nimport { Link as RouterLink } from \"wouter\";\r\n\r\n//方便管理： 目录 分离。组件越来越多，不好查找管理。\r\n//原始记录检验内容通用格式部分：这个是可以跟随检验记录数据变化的可配置部分。\r\n\r\n//模板的配套正式报告的显示打印； 版本号要相同的。\r\n//下一个版本实际可以和这版本共用大部分配置，可直接引入generalFormat再做动态修改的方案也可考虑，在差别不大的情况？。版本号启动和消亡？\r\n//通用的格式显示。\r\nexport const useGeneralFormat= ( {verId, repId}\r\n) => {\r\n  const generalFormat =React.useMemo(() => {\r\n    const arr =\r\n      [\r\n        {\r\n          //bigNo: 1,\r\n          items:[\r\n            null,null,null,\r\n            {\r\n              // item:1.4,\r\n              procedure:  <div>\r\n                使用单位提供了以下资料：<br/>\r\n                （1）使用登记资料，内容与实物相符；\r\n                <IndentationLayText title={'(2)安全技术档案至少包括：'}>\r\n                  ①1.1、1.2、1.3所述文件资料[1.2的(3)项和1.3的(5)项除外];<br/>\r\n                  ②监督检验报告;<br/>\r\n                  ③定期检验报告;<br/>\r\n                  ④日常检查与使用状况记录;<br/>\r\n                  ⑤日常维护保养记录;<br/>\r\n                  ⑥年度自行检查记录或者报告;<br/>\r\n                  ⑦应急救援演习记录;<br/>\r\n                  ⑧运行故障和事故记录等;保存完好（本规则实施前已经完成安装、改造或重大修理的，1.1、1.2、1.3项所述文件资料如有缺陷，应当由使用单位联系相关单位予以完善，可不作为本项审核结论的否决内容）；\r\n                </IndentationLayText>\r\n                <IndentationLayText title={'(3)以岗位责任制为核心的电梯运行管理规章制度，包括：'}>\r\n                  ①事故与故障的应急措施和救援预案；<br/>\r\n                  ②电梯钥匙使用管理制度等；\r\n                </IndentationLayText>\r\n                （4）与取得相应资质单位签订的日常维护保养合同；<br/>\r\n                （5）按照规定配备的电梯安全管理和作业人员的特种设备作业人员证。\r\n              </div>,\r\n              details:[],\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          //bigNo: 2,\r\n          items:[\r\n            {\r\n              //item:2.1,\r\n              procedure: <div>\r\n                （1）应当在任何情况下均能够安全方便地使用通道。采用梯子作为通道时，必须符合以下条件：\r\n                <IndentationLayText >\r\n                  ①通往机房(机器设备间)的通道不应当高出楼梯所到平面4m；<br/>\r\n                  ②梯子必须固定在通道上而不能被移动；<br/>\r\n                  ③梯子高度超过1.50m时，其与水平方向的夹角应当在65°～75°之间，并不易滑动或者翻转；<br/>\r\n                  ④靠近梯子顶端应当设置容易握到的把手。\r\n                </IndentationLayText>\r\n                （2）通道应当设置永久性电气照明；<br/>\r\n                （3）机房通道门的宽度应当不小于0.60m，高度应当不小于1.80m，并且门不得向机房内开启。门应当装有带钥匙的锁，并且可以从机房内不用钥匙打开。门外侧有下述或者类似的警示标志：“电梯机器——危险 未经允许禁止入内”\r\n              </div>,\r\n              details:[ (inp,setInp)=>{\r\n                return <React.Fragment>\r\n                  采用梯子作为通道时\r\n                  <InputGroupLine label={`机房高出平面`}>\r\n                    <SuffixInput\r\n                      placeholder=\"请输入测量数\"\r\n                      value={ inp?.机房高出 ||''}\r\n                      onChange={e => setInp({ ...inp, 机房高出: e.currentTarget.value||undefined}) }\r\n                    >m</SuffixInput>\r\n                  </InputGroupLine>\r\n                  <InputGroupLine label={`水平方向夹角`}>\r\n                    <SuffixInput\r\n                      placeholder=\"请输入测量数\"\r\n                      value={ inp?.梯子夹角 ||''}\r\n                      onChange={e => setInp({ ...inp, 梯子夹角: e.currentTarget.value||undefined}) }\r\n                    >(°)</SuffixInput>\r\n                  </InputGroupLine>\r\n                  <InputGroupLine  label='用梯子作为通道时，测量结果判定'>\r\n                    <SelectHookfork value={ inp?.梯子判定 ||''}\r\n                                    onChange={e => setInp({ ...inp, 梯子判定: e.currentTarget.value||undefined}) }\r\n                    />\r\n                  </InputGroupLine>\r\n                </React.Fragment>\r\n              },\r\n                null,\r\n                (inp,setInp)=>{\r\n                  return  <React.Fragment>\r\n                    机房通道门\r\n                    <InputGroupLine label={`宽度`}>\r\n                      <SuffixInput\r\n                        placeholder=\"请输入测量数\"\r\n                        value={ inp?.通道门宽 ||''}\r\n                        onChange={e => setInp({ ...inp, 通道门宽: e.currentTarget.value||undefined}) }\r\n                      >m</SuffixInput>\r\n                    </InputGroupLine>\r\n                    <InputGroupLine label={`高度`}>\r\n                      <SuffixInput\r\n                        placeholder=\"请输入测量数\"\r\n                        value={ inp?.通道门高 ||''}\r\n                        onChange={e => setInp({ ...inp, 通道门高: e.currentTarget.value||undefined}) }\r\n                      >m</SuffixInput>\r\n                    </InputGroupLine>\r\n                    <InputGroupLine  label='机房通道门的测量结果判定'>\r\n                      <SelectHookfork value={ inp?.通道判定 ||''}\r\n                                      onChange={e => setInp({ ...inp, 通道判定: e.currentTarget.value||undefined}) }\r\n                      />\r\n                    </InputGroupLine>\r\n                  </React.Fragment>\r\n                }\r\n              ]\r\n            },\r\n            null,null,null,\r\n            {\r\n              // item:2.5,\r\n              procedure:  <div>\r\n                （1）机房(机器设备间)设有永久性电气照明；在靠近入口(或多个入口)处的适当高度设置一个开关，控制机房(机器设备间)照明\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:2.6,\r\n              procedure:  <div>\r\n                （2）主开关不得切断轿厢照明和通风、机房（机器设备间）照明和电源插座、轿顶与底坑的电源插座、电梯井道照明、报警装置的供电电路\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              // item:2.7,\r\n              procedure:  <div>\r\n                （2）驱动主机工作时无异常噪声和振动；<br/>\r\n                （3）曳引轮轮槽不得有缺损或者不正常磨损；如果轮槽的磨损可能影响曳引能力时，进行曳引能力验证试验；<br/>\r\n                （4）制动器动作灵活，制动时制动闸瓦(制动钳)紧密、均匀地贴合在制动轮(制动盘)上，电梯运行时制动闸瓦(制动钳)与制动轮(制动盘)不发生摩擦，制动闸瓦(制动钳)以及制动轮(制动盘)工作面上没有油污；<br/>\r\n                （5）手动紧急操作装置符合以下要求：<br/>\r\n                ①对于可拆卸盘车手轮，设有一个电气安全装置，最迟在盘车手轮装上电梯驱动主机时动作；<br/>\r\n                ②松闸扳手涂成红色，盘车手轮是无辐条的并且涂成黄色，可拆卸盘车手轮放置在机房内容易接近的明显部位；<br/>\r\n                ③在电梯驱动主机上接近盘车手轮处，明显标出轿厢运行方向，如果手轮是不可拆卸的，可以在手轮上标出；<br/>\r\n                ④能够通过操纵手动松闸装置松开制动器，并且需要以一个持续力保持其松开状态；<br/>\r\n                ⑤进行手动紧急操作时，易于观察到轿厢是否在开锁区\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:2.8,\r\n              procedure:  <div>\r\n                (2)断相、错相保护功能有效；电梯运行与相序无关时，可以不设错相保护。\r\n                <IndentationLayText title={'(4)紧急电动运行装置应当符合以下要求：'}>\r\n                  ①依靠持续揿压按钮来控制轿厢运行，此按钮有防止误操作的保护，按钮上或其近旁标出 相应的运行方向<br/>\r\n                  ②一旦进入检修运行，紧急电动运行装置控制轿厢运行的功能由检修控制装置所取代；<br/>\r\n                  ③进行紧急电动运行操作时，易于观察到轿厢是否在开锁区。\r\n                </IndentationLayText>\r\n                <IndentationLayText title={'(6)层门和轿门旁路装置应当符合以下要求：'}>\r\n                  ①在层门和轿门旁路装置上或者其附近标明“旁路”字样,并且标明旁路装置的“旁路”状态或者“关”状态;<br/>\r\n                  ②旁路时取消正常运行(包括动力操作的自动门的任何运行);只有在检修运行或者紧急电动运行状态下,轿厢才能够运行;运行期间,轿厢上的听觉信号和轿底的闪烁灯起作用;<br/>\r\n                  ③能够旁路层门关闭触点、层门门锁触点、轿门关闭触点、轿门门锁触点;不能同时旁路层门和轿门的触点;对于手动层门,不能同时旁路层门关闭触点和层门门锁触点;<br/>\r\n                  ④提供独立的监控信号证实轿门处于关闭位置。\r\n                </IndentationLayText>\r\n                (7)应当具有门回路检测功能,当轿厢在开锁区域内、轿门开启并且层门门锁释放时,监测检查\r\n                轿门关闭位置的电气安全装置、检查层门门锁锁紧位置的电气安全装置和轿门监控信号的正确动\r\n                作;如果监测到上述装置的故障,能够防止电梯的正常运行。<br/>\r\n                (8)应当具有制动器故障保护功能,当监测到制动器的提起(或者释放)失效时,能够防止电梯的正常启动。\r\n                <IndentationLayText title={'(9)自动救援操作装置(如果有)应该符合以下要求:'}>\r\n                  ①设有铭牌,标明制造单位名称、产品型号、产品编号、主要技术参数,加装的自动救援操作装置的铭牌和该装置的产品质量证明文件相符;<br/>\r\n                  ②在外电网断电至少等待3s后自动投入救援运行,电梯自动平层并且开门;<br/>\r\n                  ③当电梯处于检修运行、紧急电动运行、电气安全装置动作或者主开关断开时,不得投入救援运行;<br/>\r\n                  ④设有一个非自动复位的开关,当该开关处于关闭状态时,该装置不能启动救援运行。\r\n                </IndentationLayText>\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:2.9,\r\n              procedure:  <div>\r\n                （2）限速器或者其他装置上设有在轿厢上行或者下行速度达到限速器动作速度之前动作的电气安全装置，以及验证限速器复位状态的电气安全装置<br/>\r\n                （3）限速器各调节部位封记完好，运转时不得出现碰擦、卡阻、转动不灵活等现象，动作正常<br/>\r\n                （4）受检电梯的维护保养单位应当每2年(对于使用年限不超过15年的限速器)或者每年(对于使用年限超过15年的限速器)进行一次限速器动作速度校验，校验结果应当符合要求\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              // item:2.10,\r\n              procedure:  <div>\r\n                （2）所有电气设备及线管、线槽的外露可以导电部分应当与保护导体（PE，地线）可靠连接\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              // item:2.11,\r\n              procedure:  <div>\r\n                （1）动力电路、照明电路和电气安全装置电路的绝缘电阻应当符合下述要求：\r\n                <Table css={{borderCollapse:'collapse'}}>\r\n                  <TableBody>\r\n                    <TableRow >\r\n                      <CCell >标称电压/V</CCell>\r\n                      <CCell >测试电压 (直流)/V  </CCell>\r\n                      <CCell>绝缘电阻/MΩ</CCell>\r\n                    </TableRow>\r\n                    <TableRow >\r\n                      <CCell>安全电压</CCell>\r\n                      <CCell>250</CCell>\r\n                      <CCell>≥0.25</CCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <CCell>≤500</CCell>\r\n                      <CCell>500</CCell><CCell>≥0.50</CCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <CCell>＞500</CCell>\r\n                      <CCell>1000</CCell><CCell>≥1.00</CCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </div>,\r\n              details:[(inp,setInp)=>{\r\n                return <React.Fragment>\r\n                  数据测量\r\n                  <InputGroupLine  label='动力电路' >\r\n                    <SuffixInput\r\n                      value={inp?.动力电阻 ||''}\r\n                      onChange={e => setInp({ ...inp, 动力电阻: e.currentTarget.value||undefined}) }\r\n                      inputSize=\"md\"\r\n                      type=\"text\"\r\n                      placeholder=\"请输入测量数\"\r\n                    >MΩ\r\n                    </SuffixInput>\r\n                  </InputGroupLine>\r\n                  <InputGroupLine  label='照明电路' >\r\n                    <SuffixInput\r\n                      value={inp?.照明电阻 ||''}\r\n                      onChange={e => setInp({ ...inp, 照明电阻: e.currentTarget.value||undefined}) }\r\n                      inputSize=\"md\"\r\n                      type=\"text\"\r\n                      placeholder=\"请输入测量数\"\r\n                    >MΩ\r\n                    </SuffixInput>\r\n                  </InputGroupLine>\r\n                  <InputGroupLine  label='安全装置电路' >\r\n                    <SuffixInput\r\n                      value={inp?.安全装置电阻 ||''}\r\n                      onChange={e => setInp({ ...inp, 安全装置电阻: e.currentTarget.value||undefined}) }\r\n                      inputSize=\"md\"\r\n                      type=\"text\"\r\n                      placeholder=\"请输入测量数\"\r\n                    >MΩ\r\n                    </SuffixInput>\r\n                  </InputGroupLine>\r\n                </React.Fragment>\r\n              }\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          // bigNo: 3,\r\n          items:[\r\n            null,null,null,\r\n            {\r\n              //item:3.4,\r\n              procedure:  <div>\r\n                （3）门上应当装设用钥匙开启的锁，当门开启后不用钥匙能够将其关闭和锁住，在门锁住后，不用钥匙能够从井道内将门打开；<br/>\r\n                （4）应当设置电气安全装置以验证门的关闭状态。\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:3.5,\r\n              procedure:  <div>\r\n                （3）应当装设用钥匙开启的锁，当门开启后不用钥匙能够将其关闭和锁住，在门锁住后，不用钥匙能够从井道内将门打开；<br/>\r\n                （4）应当设置电气安全装置以验证门的关闭状态。\r\n              </div>,\r\n              details:[]\r\n            },\r\n            null,\r\n            {\r\n              //item:3.7,\r\n              procedure:  <div>\r\n                （1）轿厢与面对轿厢入口的井道壁的间距不大于0.15m，对于局部高度不大于0.50m或者采用垂直滑动门的载货电梯，该间距可以增加到0.20m。如果轿厢装有机械锁紧的门并且门只能在开锁区内打开时，则上述间距不受限制。\r\n              </div>,\r\n              details:[(inp,setInp)=>{\r\n                return <React.Fragment>\r\n                  数据及测量\r\n                  <InputGroupLine label={`间距`}>\r\n                    <SuffixInput\r\n                      placeholder=\"请输入测量数\"\r\n                      value={ inp?.轿井间距 ||''}\r\n                      onChange={e => setInp({ ...inp, 轿井间距: e.currentTarget.value||undefined}) }\r\n                    >m</SuffixInput>\r\n                  </InputGroupLine>\r\n                </React.Fragment>\r\n              }]\r\n            },\r\n            null,null,\r\n            {\r\n              //item:3.10,\r\n              procedure:  <div>\r\n                （1）井道上下两端应当装设极限开关，该开关在轿厢或者对重接触缓冲器前起作用，并且在缓冲器被压缩期间保持其动作状态。\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:3.11,\r\n              procedure:  <div>\r\n                （1）井道应当装设永久性电气照明。对于部分封闭井道，如果井道附近有足够的电气照明，井道内可以不设照明\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              // item:3.12,\r\n              procedure:  <div>\r\n                （1）底坑底部应当光滑平整，不得渗水、漏水；<br/>\r\n                （3）底坑内应当设置在进入底坑时和底坑地面上均能方便操作的停止装置，停止装置的操作装置为双稳态、红色、标以“停止”字样，并且有防止误操作的保护\r\n              </div>,\r\n              details:[]\r\n            },\r\n            null,\r\n            {\r\n              //item:3.14,\r\n              procedure:  <div>\r\n                （2）当限速器绳断裂或者过分伸长时，应当通过一个电气安全装置的作用，使电梯停止运转\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:3.15,\r\n              procedure:  <div>\r\n                （3）缓冲器应当固定可靠、无明显倾斜，并且无断裂、塑性变形、剥落、破损等现象；<br/>\r\n                （4）耗能型缓冲器液位应当正确，有验证柱塞复位的电气安全装置。<br/>\r\n                （5）对重缓冲器附近应当设置永久性的明显标识，标明当轿厢位于顶层端站平层位置时，对重装置撞板与其缓冲器顶面间的最大允许垂直距离；并且该垂直距离不超过最大允许值\r\n              </div>,\r\n              details:[null,null,\r\n                (inp,setInp)=>{\r\n                  return <React.Fragment>\r\n                    (5)对重越程距离\r\n                    <InputGroupLine label={`最大允许值`}>\r\n                      <SuffixInput\r\n                        placeholder=\"请输入测量数\"\r\n                        value={ inp?.对重越程最大 ||''}\r\n                        onChange={e => setInp({ ...inp, 对重越程最大: e.currentTarget.value||undefined}) }\r\n                      >mm</SuffixInput>\r\n                    </InputGroupLine>\r\n                    <InputGroupLine label={`测量值`}>\r\n                      <SuffixInput\r\n                        placeholder=\"请输入测量数\"\r\n                        value={ inp?.对重越程 ||''}\r\n                        onChange={e => setInp({ ...inp, 对重越程: e.currentTarget.value||undefined}) }\r\n                      >mm</SuffixInput>\r\n                    </InputGroupLine>\r\n                  </React.Fragment>\r\n                }\r\n              ]\r\n            },\r\n          ]\r\n        },\r\n        {\r\n          //bigNo: 4,\r\n          items:[\r\n            {\r\n              //item:4.1,\r\n              procedure:  <div>\r\n                （1）轿顶应当装设一个易于接近的检修运行控制装置，并且符合以下要求：<br/>\r\n                ①由一个符合电气安全装置要求，能够防止误操作的双稳态开关（检修开关）进行操作；<br/>\r\n                ②一经进入检修运行时，即取消正常运行（包括任何自动门操作）、紧急电动运行、对接操作运行，只有再一次操作检修开关，才能使电梯恢复正常工作；<br/>\r\n                ③依靠持续揿压按钮来控制轿厢运行，此按钮有防止误操作的保护，按钮上或其近旁标出相应的运行方向；<br/>\r\n                ④该装置上设有一个停止装置，停止装置的操作装置为双稳态、红色、并标以“停止”字样，并且有防止误操作的保护；<br/>\r\n                ⑤检修运行时，安全装置仍然起作用。<br/>\r\n                （2）轿顶应当装设一个从入口处易于接近的停止装置，停止装置的操作装置为双稳态、红色、并标以“停止”字样，并且有防止误操作的保护。如果检修运行控制装置设在从入口处易于接近的位置，该停止装置也可以设在检修运行控制装置上\r\n              </div>,\r\n              details:[]\r\n            },\r\n            null,\r\n            {\r\n              //item:4.3,\r\n              procedure:  <div>\r\n                如果轿厢设有安全窗（门），应当符合以下要求：<br/>\r\n                （3）其锁紧由电气安全装置予以验证。\r\n              </div>,\r\n              details:[]\r\n            },\r\n            null,\r\n            {\r\n              //item:4.5,\r\n              procedure:  <div>\r\n                （1）对重(平衡重)块可靠固定；<br/>\r\n                （2）具有能够快速识别对重(平衡重)块数量的措施(例如标明对重块的数量或者总高度)\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:4.6,\r\n              procedure:  <div>\r\n                （2）对于为了满足使用要求而轿厢面积超出上述规定的载货电梯，必须满足以下条件：<br/>\r\n                ①在从层站装卸区域总可看见的位置上设置标志，表明该载货电梯的额定载重量；<br/>\r\n                ②该电梯专用于运送特定轻质货物，其体积可保证在装满轿厢情况下，该货物的总质量不会超过额定载重量；<br/>\r\n                ③该电梯由专职司机操作，并严格限制人员进入。\r\n              </div>,\r\n              details:[]\r\n            },\r\n            null,\r\n            {\r\n              //item:4.8,\r\n              procedure:  <div>\r\n                轿厢内应当装设符合下述要求的紧急报警装置和紧急照：<br/>\r\n                （1）正常照明电源中断时，能够自动接通紧急照明电源；<br/>\r\n                （2）紧急报警装置采用对讲系统以便与救援服务持续联系，当电梯行程大于30m时，在轿厢和机房（或者紧急操作地点）之间也设置对讲系统，紧急报警装置的供电来自本条（1）所述的紧急照明电源或者等效电源；在启动对讲系统后，被困乘客不必再做其他操作\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:4.9,\r\n              procedure:  <div>\r\n                （1）轿厢地坎下应当装设护脚板，其垂直部分的高度不小于0.75m，宽度不小于层站入口宽度\r\n              </div>,\r\n              details:[(inp,setInp)=>{\r\n                return <React.Fragment>\r\n                  数据及测量\r\n                  <InputGroupLine label={`护脚板高度`}>\r\n                    <SuffixInput\r\n                      placeholder=\"请输入测量数\"\r\n                      value={ inp?.护脚板高 ||''}\r\n                      onChange={e => setInp({ ...inp, 护脚板高: e.currentTarget.value||undefined}) }\r\n                    >m</SuffixInput>\r\n                  </InputGroupLine>\r\n                  <InputGroupLine  label='测量结果判定'>\r\n                    <SelectHookfork value={ inp?.护脚板高判定 ||''}\r\n                                    onChange={e => setInp({ ...inp, 护脚板高判定: e.currentTarget.value||undefined}) }\r\n                    />\r\n                  </InputGroupLine>\r\n                </React.Fragment>\r\n              }\r\n              ]\r\n            },\r\n            {\r\n              //item:4.10,\r\n              procedure:  <div>\r\n                （1）设置当轿厢内的载荷超过额定载重量时，能够发出警示信号，并且使轿厢不能运行的超载保护装置。该装置最迟在轿厢内的载荷达到110％额定载重量(对于额定载重量小于750kg的电梯，最迟在超载量达到75kg)时动作，防止电梯正常启动及再平层，并且轿内有音响或者发光信号提示，动力驱动的自动门完全打开，手动门保持在未锁状态\r\n              </div>,\r\n              details:[]\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          //bigNo: 5,\r\n          items:[\r\n            {\r\n              //item:5.1,\r\n              procedure:  <div>\r\n                出现下列情况之一时，悬挂钢丝绳和补偿钢丝绳应当报废：<br/>\r\n                ①出现笼状畸变、绳股挤出、扭结、部分压扁、弯折；<br/>\r\n                ②一个捻距内出现的断丝数大于下表列出的数值时：\r\n                <Table minWidth={'140px'} css={{borderCollapse:'collapse'}}>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <CCell rowSpan={2}>断丝的形式</CCell>\r\n                      <CCell colSpan={3}>钢丝绳的类型</CCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <CCell>6×19</CCell><CCell>8×9</CCell><CCell>9×19</CCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <CCell>均布在外层绳股上</CCell>\r\n                      <CCell>24</CCell><CCell>30</CCell><CCell>34</CCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <CCell>集中在一或者两根外层绳股上</CCell>\r\n                      <CCell>8</CCell><CCell>10</CCell><CCell>11</CCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <CCell>一根外绳股上相邻的断丝</CCell>\r\n                      <CCell>4</CCell><CCell>4</CCell><CCell>4</CCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <CCell>股谷（缝）断丝 </CCell>\r\n                      <CCell>1</CCell><CCell>1</CCell><CCell>1</CCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <Cell colSpan={4}>注：上述断丝数参考长度为一个捻距，约为6d(d表示钢丝绳的公称直径，mm）</Cell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n                ③钢丝绳直径小于其公称直径的90%；<br/>\r\n                ④钢丝绳严重锈蚀，铁锈填满绳股间隙。<br/>\r\n                采用其他类型悬挂装置的，悬挂装置的磨损、变形等不得超过制造单位设定的报废指标\r\n              </div>,\r\n              details:[(inp,setInp)=>{\r\n                return <React.Fragment>\r\n                  数据及测量\r\n                  <InputGroupLine label={`②断丝数`}>\r\n                    <SuffixInput\r\n                      placeholder=\"请输入测量数\"\r\n                      value={ inp?.断丝数 ||''}\r\n                      onChange={e => setInp({ ...inp, 断丝数: e.currentTarget.value||undefined}) }\r\n                    >根</SuffixInput>\r\n                  </InputGroupLine>\r\n                  <InputGroupLine  label='②一个捻距断丝数,结果判定'>\r\n                    <SelectHookfork value={ inp?.断丝判定  ||''}\r\n                                    onChange={e => setInp({ ...inp, 断丝判定: e.currentTarget.value||undefined}) }\r\n                    />\r\n                  </InputGroupLine>\r\n                  <InputGroupLine label={`③钢丝绳直径`}>\r\n                    <SuffixInput\r\n                      placeholder=\"请输入测量数\"\r\n                      value={ inp?.钢绳直径 ||''}\r\n                      onChange={e => setInp({ ...inp, 钢绳直径: e.currentTarget.value||undefined}) }\r\n                    >mm</SuffixInput>\r\n                  </InputGroupLine>\r\n                  <InputGroupLine label={`③公称直径`}>\r\n                    <SuffixInput\r\n                      placeholder=\"请输入测量数\"\r\n                      value={ inp?.钢绳公称 ||''}\r\n                      onChange={e => setInp({ ...inp, 钢绳公称: e.currentTarget.value||undefined}) }\r\n                    >mm</SuffixInput>\r\n                  </InputGroupLine>\r\n                  <InputGroupLine  label='③钢丝绳直径小于公称90%,结果判定'>\r\n                    <SelectHookfork value={ inp?.钢绳判定 ||''}\r\n                                    onChange={e => setInp({ ...inp, 钢绳判定: e.currentTarget.value||undefined}) }\r\n                    />\r\n                  </InputGroupLine>\r\n                </React.Fragment>\r\n              }\r\n              ]\r\n            },\r\n            {\r\n              //item:5.2,\r\n              procedure:  <div>\r\n                （1）悬挂钢丝绳绳端固定应当可靠，弹簧、螺母、开口销等连接部件无缺损。<br/>\r\n                采用其他类型悬挂装置的，其端部固定应当符合制造单位的规定。\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:5.3,\r\n              procedure:  <div>\r\n                （1）补偿绳（链）端固定应当可靠；<br/>\r\n                （2）应当使用电气安全装置来检查补偿绳的最小张紧位置；<br/>\r\n                （3）当电梯的额定速度大于3.5m/s时，还应当设置补偿绳防跳装置，该装置动作时应当有一个电气安全装置使电梯驱动主机停止运转。\r\n              </div>,\r\n              details:[]\r\n            },\r\n            null,\r\n            {\r\n              //item:5.5,\r\n              procedure:  <div>\r\n                （1）如果轿厢悬挂在两根钢丝绳或者链条上，则应当设置检查绳(链)松弛的电气安全装置，当其中一根钢丝绳(链条)发生异常相对伸长时，电梯应当停止运行\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:5.6,\r\n              procedure:  <div>\r\n                （1）在机房（机器设备间）内的曳引轮、滑轮、链轮、限速器，在井道内的曳引轮、滑轮、链轮、限速器及张紧轮、补偿绳张紧轮，在轿厢上的滑轮、链轮等与钢丝绳、链条形成传动的旋转部件，均应当设置防护装置，以避免人身伤害、钢丝绳或链条因松弛而脱离绳槽或链轮、异物进入绳与绳槽或链与链轮之间；<br/>\r\n                对于允许按照GB 7588—1995及更早期标准生产的电梯，可以按照以下要求检验：<br/>\r\n                ①采用悬臂式曳引轮或者链轮时，有防止钢丝绳脱离绳槽或者链条脱离链轮的装置，并且当驱动主机不装设在井道上部时，有防止异物进入绳与绳槽之间或者链条与链轮之间的装置；<br/>\r\n                ②井道内的导向滑轮、曳引轮、轿架上固定的反绳轮和补偿绳张紧轮，有防止钢丝绳脱离绳槽和进入异物的防护装置\r\n              </div>,\r\n              details:[]\r\n            },\r\n          ]\r\n        },\r\n        {\r\n          //bigNo: 6,\r\n          items:[\r\n            null,null,\r\n            {\r\n              //item:6.3,\r\n              procedure:  <div>\r\n                <IndentationLayText title={'门关闭后,应当符合以下要求:'}>\r\n                  (1) 门扇之间及门扇与立柱、门楣和地坎之间的间的间隙,对于乘客电梯不大于6mm;对于载货电梯不大于8mm,使用过程中由于磨损,允许达10mm;<br />\r\n                  (2) 在水平移动门和折叠门主动门扇的开启方向,以150N的人力施加在一个最不利的点，前条所述的间\r\n                  隙允许增大，但对于旁开门不大于30mm，对于中分门其总和不大于45mm\r\n                </IndentationLayText>\r\n              </div>,\r\n              details:[(inp,setInp)=>{\r\n                return <React.Fragment>\r\n                  点击下方标题修改\r\n                  <Table css={{borderCollapse:'collapse'}}>\r\n                    <TableBody>\r\n                      <RouterLink to={`/report/EL-DJ/ver/${verId}/gap/${repId}?&from=6.3`}>\r\n                        <TableRow >\r\n                          <CCell>层</CCell>\r\n                          <CCell>门扇隙</CCell>\r\n                          <CCell>门套隙</CCell>\r\n                          <CCell>地坎隙</CCell>\r\n                          <CCell>施力隙</CCell>\r\n                        </TableRow>\r\n                      </RouterLink>\r\n                      {inp?.层站?.map((a,i)=>{\r\n                        return <TableRow key={i}>\r\n                          <CCell>{a}</CCell>\r\n                          <CCell>{inp?.门扇隙?.[a]||''}</CCell>\r\n                          <CCell>{inp?.门套隙?.[a]||''}</CCell>\r\n                          <CCell>{inp?.地坎隙?.[a]||''}</CCell>\r\n                          <CCell>{inp?.施力隙?.[a]||''}</CCell>\r\n                        </TableRow>\r\n                      }) }\r\n                    </TableBody>\r\n                  </Table>\r\n                </React.Fragment>\r\n              }, null\r\n              ]\r\n            },\r\n            {\r\n              //item:6.4,\r\n              procedure:  <div>\r\n                （1）层门和轿门采用玻璃门时，应当有防止儿童的手被拖曳的措施\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:6.5,\r\n              procedure:  <div>\r\n                （1）动力驱动的自动水平滑动门应当设置防止门夹人的保护装置，当人员通过层门入口被正在关闭的门扇撞击或者将被撞击时，该装置应当自动使门重新开启\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:6.6,\r\n              procedure:  <div>\r\n                （1）层门和轿门正常运行时不得出现脱轨、机械卡阻或者在行程终端时错位；由于磨损、锈蚀或者火灾可能造成层门导向装置失效时，应当设置应急导向装置，使层门保持在原有位置\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:6.7,\r\n              procedure:  <div>\r\n                （1）在轿门驱动层门的情况下，当轿厢在开锁区域之外时，如果层门开启（无论何种原因），应当有一种装置能够确保该层门自动关闭。自动关闭装置采用重块时，应当有防止重块坠落的措施\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:6.8,\r\n              procedure:  <div>\r\n                （1）每个层门均应当能够被一把符合要求的钥匙从外面开启；紧急开锁后，在层门闭合时门锁装置不应当保持开锁位置\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:6.9,\r\n              procedure:  <div>\r\n                <IndentationLayText title={'(1)每个层门都应当设有符合下述要求的门锁装置:'}>\r\n                  ②锁紧动作由重力、永久磁铁或者弹簧来产生和保持，即使永久磁铁或者弹簧失效，重力亦不能导致开锁；<br/>\r\n                  ③轿厢在锁紧元件啮合不小于7mm时才能启动；<br/>\r\n                  ④门的锁紧由一个电气安全装置来验证，该装置由锁紧元件强制操作而没有任何中间机构，并且能够防止误动作；\r\n                </IndentationLayText>\r\n                (2)如果轿门采用了门锁装置,该装置也应当符合本条(1)的要求。\r\n              </div>,\r\n              details:[(inp,setInp)=>{\r\n                let  toothUnquf=inp?.层站?.find((f,i)=>{\r\n                  return parseFloat(inp?.门锁啮长?.[f])<7;\r\n                });\r\n                return <React.Fragment>\r\n                  <RouterLink  to={`/report/EL-DJ/ver/${verId}/gap/${repId}?&from=6.9`}>\r\n                    (点击修改)已检门锁啮合长度:\r\n                  </RouterLink>\r\n                  <div>\r\n                    {inp?.层站?.map(a=>{\r\n                      return ` ${a}层:${inp?.门锁啮长?.[a]||''};`\r\n                    }) }\r\n                  </div>\r\n                  <InputGroupLine  label='(1)③门锁啮合长度{自动填}'>\r\n                    <SelectHookfork value={toothUnquf? '×': inp?.层站?.length>=1? '√':''} disabled/>\r\n                  </InputGroupLine>\r\n                </React.Fragment>\r\n              }, null\r\n              ]\r\n            },\r\n            {\r\n              //item:6.10,\r\n              procedure:  <div>\r\n                （1）正常运行时应当不能打开层门，除非轿厢在该层门的开锁区域内停止或停站；如果一个层门或者轿门（或者多扇门中的任何一扇门）开着，在正常操作情况下，应当不能启动电梯或者不能保持继续运行；<br/>\r\n                （2）每个层门和轿门的闭合都应当由电气安全装置来验证，如果滑动门是由数个间接机械连接的门扇组成，则未被锁住的门扇上也应当设置电气安全装置以验证其闭合状态\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:6.11,\r\n              procedure:  <div>\r\n                （1）应当设置轿门开门限制装置，当轿厢停在开锁区域外时，能够防止轿厢内的人员打开轿门离开轿厢；<br/>\r\n                （2）在轿厢意外移动保护装置允许的最大制停距离范围内，打开对应的层门后，能够不用工具(三角钥匙或者永久性设置在现场的工具除外)从层站处打开轿门\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:6.12,\r\n              procedure:  <div>\r\n                1）轿门门刀与层门地坎，层门锁滚轮与轿厢地坎的间隙应当不小于5mm；电梯运行时不得互相碰擦\r\n              </div>,\r\n              details:[(inp,setInp)=>{\r\n                let  knifeUnquf=inp?.层站?.find((f,i)=>{\r\n                  return parseFloat(inp?.刀坎距?.[f])<5;\r\n                });\r\n                let  rollerUnquf=inp?.层站?.find((f,i)=>{\r\n                  return parseFloat(inp?.轮坎距?.[f])<5;\r\n                });\r\n                return <React.Fragment>\r\n                  <RouterLink  to={`/report/EL-DJ/ver/${verId}/gap/${repId}?&from=6.12`}>\r\n                    <Touchable  component={'div'} >\r\n                      (点击修改):\r\n                      <div>\r\n                        轿门门刀与层门地坎间距:\r\n                        {inp?.层站?.map(a=>{\r\n                          return ` ${a}层:${inp?.刀坎距?.[a]||''};`\r\n                        }) }\r\n                      </div>\r\n                      <div>\r\n                        门锁滚轮与轿门地坎间距:\r\n                        {inp?.层站?.map(a=>{\r\n                          return ` ${a}层:${inp?.轮坎距?.[a]||''};`\r\n                        }) }\r\n                      </div>\r\n                    </Touchable>\r\n                  </RouterLink>\r\n                  <InputGroupLine  label='间隙应当不小于5mm{自动填}'>\r\n                    <SelectHookfork value={knifeUnquf||rollerUnquf? '×': inp?.层站?.length>=1? '√':''} disabled/>\r\n                  </InputGroupLine>\r\n                </React.Fragment>\r\n              }\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        null,\r\n        {\r\n          //bigNo: 8,\r\n          items:[\r\n            {\r\n              //item:8.1,\r\n              procedure:  <div>\r\n                （1）曳引电梯的平衡系数应当在0.40～0.50之间，或者符合制造（改造）单位的设计值\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:8.2,\r\n              procedure:  <div>\r\n                （1）当轿厢上行速度失控时，轿厢上行超速保护装置应当动作，使轿厢制停或者至少使其速度降低至对重缓冲器的设计范围；该装置动作时，应当使一个电气安全装置动作\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:8.3,\r\n              procedure:  <div>\r\n                （1）轿厢在井道上部空载，以型式试验证书所给出的试验速度上行并触发制停部件，仅使用制停部件能够使电梯停止，轿厢的移动距离在型式试验证书给出的范围内；\r\n                （2）如果电梯采用存在内部冗余的制动器作为制停部件，则当制动器提起(或者释放)失效，或者制动力不足时，应当关闭轿门和层门，并且防止电梯的正常启动\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:8.4,\r\n              procedure:  <div>\r\n                （2）定期检验：轿厢空载，以检修速度下行，进行限速器-安全钳联动试验，限速器－安全钳动作应当可靠\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:8.5,\r\n              procedure:  <div>\r\n                （1）轿厢空载，以检修速度上行，进行限速器-安全钳联动试验，限速器－安全钳动作应当可靠\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:8.6,\r\n              procedure:  <div>\r\n                （1）轿厢空载，以正常运行速度上、下运行，呼梯、楼层显示等信号系统功能有效、指示正确、动作无误，轿厢平层良好，无异常现象发生；对于设有IC卡系统的电梯，轿厢内的人员无需通过IC卡系统即可到达建筑物的出口层，并且在电梯退出正常服务时，自动退出IC卡功能\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:8.7,\r\n              procedure:  <div>\r\n                （1）在机房内或者紧急操作和动态测试装置上设有明晰的应急救援程序；<br/>\r\n                （2）建筑物内的救援通道保持通畅，以便相关人员无阻碍地抵达实施紧急操作的位置和层站等处；<br/>\r\n                （3）在各种载荷工况下，按照本条(1)所述的应急救援程序实施操作，能够安全、及时地解救被困人员\r\n              </div>,\r\n              details:[]\r\n            },\r\n            null,\r\n            {\r\n              //item:8.9,\r\n              procedure:  <div>\r\n                （1）当对重压在缓冲器上而曳引机按电梯上行方向旋转时，应当不能提升空载轿厢\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:8.10,\r\n              procedure:  <div>\r\n                （1）轿厢空载以正常运行速度上行至行程上部，切断电动机与制动器供电，轿厢应当完全停止\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:8.11,\r\n              procedure:  <div>\r\n                （1）轿厢装载125%额定载重量，以正常运行速度下行至行程下部，切断电动机与制动器供电，轿厢应当完全停止\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:8.12,\r\n              procedure:  <div>\r\n                （1）对于轿厢面积超过规定的载货电梯，以轿厢实际面积所对应的125%额定载重量进行静态曳引试验；对于额定载重量按照单位轿厢有效面积不小于200kg/m2计算的汽车电梯，以150%额定载重量做静态曳引试验；历时10min，曳引绳应当没有打滑现象\r\n              </div>,\r\n              details:[]\r\n            },\r\n            {\r\n              //item:8.13,\r\n              procedure:  <div>\r\n                （1）轿厢装载125%额定载重量，以正常运行速度下行时，切断电动机和制动器供电，制动器应当能够使驱动主机停止运转，试验后轿厢应无明显变形和损坏\r\n              </div>,\r\n              details:[]\r\n            }\r\n          ]\r\n        }\r\n      ];\r\n    //根据版本号verId小调整。\r\n    //下一个版本generalFormat实际可选择以旧版generalFormat做js动态的修改，或者另外再定义新变量输出。\r\n\r\n    return  arr;\r\n  }, [verId, repId]);\r\n  return { generalFormat };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\report\\elevator\\Periodical\\main.tsx",[],"D:\\home\\sei\\front-end\\src\\report\\editor\\eRarelyVary.tsx",["684","685"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Text,\r\n  Layer,\r\n  InputGroupLine,\r\n  Input,\r\n  Button,\r\n  ResponsivePopover,\r\n  MenuList,\r\n  MenuItem,\r\n  IconChevronDown\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport {\r\n  InspectRecordLayout,\r\n  InternalItemHandResult,\r\n  InternalItemProps,\r\n  SelectHookfork,\r\n  useItemInputControl\r\n} from \"../comp/base\";\r\n\r\n//很多内容相对重复，这里是报告较高层范围复用的组件；专门报告类型的可以安排在下一层次分开目录去做。\r\n\r\n\r\nexport const ItemInstrumentTable=\r\n  React.forwardRef((\r\n    { children, show ,alone=true}:InternalItemProps,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {仪器表} =par||{};\r\n      return {仪器表};\r\n    }, []);\r\n    const {inp, setInp} = useItemInputControl({ ref });\r\n    const [seq, setSeq] = React.useState(null);   //表對象的當前一條。\r\n    const [obj, setObj] = React.useState({no:'',name:'',type:'',powerOn:'',shutDown:''});\r\n    React.useEffect(() => {\r\n      let size =inp?.仪器表?.length;\r\n      setSeq(size>0?  size-1:null);\r\n    }, [inp]);\r\n    function onModifySeq(idx,it){\r\n      setObj(it);\r\n      setSeq(idx);\r\n    };\r\n    function onDeleteSeq(idx,it){\r\n      inp?.仪器表?.splice(idx,1);\r\n      setInp({...inp,仪器表: [...inp?.仪器表] });\r\n      setSeq(null);\r\n    };\r\n    function onInsertSeq(idx,it){\r\n      inp?.仪器表?.splice(idx,0, obj);\r\n      setInp({...inp,仪器表:[...inp?.仪器表] });\r\n      setSeq(idx);\r\n    };\r\n    function onAddSeq(idx){\r\n      let size =inp?.仪器表?.push(obj);\r\n      setInp( (inp?.仪器表&&{...inp,仪器表:[...inp?.仪器表] } )  || {...inp,仪器表:[obj] } );\r\n      setSeq((inp?.仪器表&&(size-1))  || 0 );\r\n    };\r\n\r\n    const editor=<Layer elevation={\"sm\"} css={{ padding: '0.25rem' }}>\r\n      <div>\r\n        <InputGroupLine label={`测量设备名称`}>\r\n          <Input   value={obj.name ||''}   onChange={e =>setObj({...obj, name: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`规格型号`}>\r\n          <Input   value={obj.type ||''}   onChange={e =>setObj({...obj, type: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`测量设备编号`}>\r\n          <Input   value={obj.no ||''}   onChange={e =>setObj({...obj, no: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='性能状态-开机后'>\r\n          <SelectHookfork value={obj.powerOn ||''}  onChange={e =>setObj({...obj, powerOn: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='性能状态-关机前'>\r\n          <SelectHookfork value={obj.shutDown ||''}  onChange={e =>setObj({...obj, shutDown: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <Button onPress={() => {\r\n          if(seq !== null) {\r\n            inp?.仪器表?.splice(seq, 1, obj);\r\n            setInp({ ...inp, 仪器表: [...inp?.仪器表] });\r\n          }\r\n          else setInp({ ...inp, 仪器表: [obj] });\r\n        } }\r\n        >{inp?.仪器表?.length>0? `改一条就确认`: `新增一条`}</Button>\r\n      </div>\r\n    </Layer>;\r\n\r\n    const instrumentTable=<div>\r\n      {inp?.仪器表?.map((a,i)=>{\r\n        return <React.Fragment  key={i}>\r\n          <div>{`${i+1}`}\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem onPress={()=>onModifySeq(i,a)}>修改</MenuItem>\r\n                  <MenuItem onPress={()=>onDeleteSeq(i,a)}>刪除这条</MenuItem>\r\n                  <MenuItem onPress={()=>onInsertSeq(i,a)}>插入一条</MenuItem>\r\n                  <MenuItem onPress={()=>onAddSeq(i)}>末尾新增一条</MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <Button  size=\"md\" iconAfter={<IconChevronDown />} variant=\"ghost\" css={{whiteSpace:'unset'}}>\r\n                {`[${a.no}] ${a.name||''} 型号${a.type||''} 开机${a.powerOn||''} 关机${a.shutDown||''}`}\r\n              </Button>\r\n            </ResponsivePopover>\r\n          </div>\r\n          {i===seq && editor}\r\n        </React.Fragment>;\r\n      }) }\r\n    </div>;\r\n\r\n    return (\r\n      <InspectRecordLayout inp={inp} setInp={setInp}  getInpFilter={getInpFilter} show={show}\r\n                           alone={alone}  label={'主要检验仪器设备'}>\r\n        <Text  variant=\"h5\">\r\n          二、主要测量设备性能检查\r\n        </Text>\r\n        使用的仪器设备表:\r\n        <hr/>\r\n        {instrumentTable}\r\n        {seq===null && editor}\r\n      </InspectRecordLayout>\r\n    );\r\n  } );\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\report\\editor\\eHelper.ts",[],"D:\\home\\sei\\front-end\\src\\report\\editor\\eBase.tsx",["686","687","688"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Text,  Button,  IconChevronDown,\r\n  Select, Layer,  InputGroupLine, Input, ResponsivePopover, MenuList, MenuItem\r\n} from \"customize-easy-ui-component\";\r\n//import { Link as RouterLink } from \"wouter\";\r\nimport {\r\n  InspectRecordLayout,\r\n  InternalItemHandResult,\r\n  InternalItemProps,\r\n  SelectHookfork,\r\n  useItemInputControl\r\n} from \"../comp/base\";\r\n\r\n\r\n//公共的复用性好的组件；编辑、原始记录，在多数模板能通用的。不通用的要安排放在更加具体贴近的目录文件内。\r\n//方便不同模板和不同版本的可重复引用。文件目录管理，组件按照抽象性程度和参数配置的关联度，分级分层次，标识容易区分开。\r\n\r\nexport const ItemConclusion=\r\n  React.forwardRef((\r\n    { children, show ,alone=true}:InternalItemProps,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      //检验人IDs编制日期编制人结论：这些字段要提升到关系数据库表中，而不是json字段里面。只能保留上级语义更强的，json半结构化数据的就不做保留。\r\n      const {检验结论,编制日期,编制人,检验人IDs} =par||{};\r\n      return {检验结论,编制日期,编制人,检验人IDs};\r\n    }, []);\r\n    const {inp, setInp} = useItemInputControl({ ref });\r\n    return (\r\n      <InspectRecordLayout inp={inp} setInp={setInp}  getInpFilter={getInpFilter} show={show}\r\n                           alone={alone}  label={'下结论!'}>\r\n        五、现场检验意见\r\n        <InputGroupLine  label='检验结论{签名后结论不能再改}' >\r\n          <Select inputSize=\"md\" css={{minWidth:'140px',fontSize:'1.3rem',padding:'0 1rem'}}\r\n                  value={ inp?.检验结论  ||''}\r\n                  onChange={e => setInp({ ...inp, 检验结论: e.currentTarget.value||undefined}) }\r\n          >\r\n            <option></option>\r\n            <option>合格</option>\r\n            <option>不合格</option>\r\n            <option>复检合格</option>\r\n            <option>复检不合格</option>\r\n          </Select>\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='检验人员{用户ID列表,将来签名，登录来签注}' >\r\n          <Input  value={inp?.检验人IDs ||''} placeholder=\"输入本系统用户ID，将来签名后结论不能再改，多人签名：以 分割\"\r\n                  onChange={e => setInp({ ...inp, 检验人IDs: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='编制人员{将来是提交人员，自动的}' >\r\n          <Input  value={inp?.编制人 ||''} placeholder=\"目前直接输入名字，一个人\"\r\n                  onChange={e => setInp({ ...inp, 编制人: e.currentTarget.value||undefined}) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='编制日期{将来等于提交日，自动的}' >\r\n          <Input  value={inp?.编制日期 ||''}  type='date'\r\n                  onChange={e => setInp({ ...inp, 编制日期: e.currentTarget.value}) } />\r\n        </InputGroupLine>\r\n      </InspectRecordLayout>\r\n    );\r\n  } );\r\n\r\n//不合格表unq数据生成时机：复检编制开始时初始化来的。在初检场景看到是动态校验目的前端显示表还未存储到后端数据库。\r\nexport const ItemRecheckResult=\r\n  React.forwardRef((\r\n    { children, show ,alone=true}:InternalItemProps,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      const {unq} =par||{};\r\n      return {unq};\r\n    }, []);\r\n    const {inp, setInp} = useItemInputControl({ ref });\r\n    const [seq, setSeq] = React.useState(null);   //表對象的當前一條。\r\n    const [obj, setObj] = React.useState({no:'',desc:'',rres:'',rdate:''});\r\n    React.useEffect(() => {\r\n      let size =inp?.unq?.length;\r\n      setSeq(size>0?  size-1:null);\r\n    }, [inp]);\r\n    function onModifySeq(idx,it){\r\n      setObj(it);\r\n      setSeq(idx);\r\n    };\r\n    function onDeleteSeq(idx,it){\r\n      inp?.unq?.splice(idx,1);\r\n      setInp({...inp,unq: [...inp?.unq] });\r\n      setSeq(null);\r\n    };\r\n    function onInsertSeq(idx,it){\r\n      inp?.unq?.splice(idx,0, obj);\r\n      setInp({...inp,unq:[...inp?.unq] });\r\n      setSeq(idx);\r\n    };\r\n    function onAddSeq(idx){\r\n      let size =inp?.unq?.push(obj);\r\n      setInp( (inp?.unq&&{...inp,unq:[...inp?.unq] } )  || {...inp,unq:[obj] } );\r\n      setSeq((inp?.unq&&(size-1))  || 0 );\r\n    };\r\n\r\n    const editor=<Layer elevation={\"sm\"} css={{ padding: '0.25rem' }}>\r\n      <div>\r\n        <InputGroupLine label={`类别/编号{将来自动的不能改}`}>\r\n          <Input   value={obj.no ||''} placeholder=\"目前是人工输入，类比B/4.8这样的\"\r\n                   onChange={e =>setObj({...obj, no: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`不合格内容描述{将来自动的}`}>\r\n          <Input   value={obj.desc ||''}  placeholder=\"目前是人工输入，正式报告要呈现不合格说明\"\r\n                   onChange={e =>setObj({...obj, desc: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <InputGroupLine label={`复检结果`}>\r\n          <SelectHookfork value={obj.rres ||''}\r\n                          onChange={e =>setObj({...obj, rres: e.currentTarget.value} ) }\r\n          />\r\n        </InputGroupLine>\r\n        <InputGroupLine  label='复检日期' >\r\n          <Input  value={obj.rdate ||''}  type='date'\r\n                  onChange={e =>setObj({...obj, rdate: e.currentTarget.value} ) } />\r\n        </InputGroupLine>\r\n        <Button onPress={() => {\r\n          if(seq !== null) {\r\n            inp?.unq?.splice(seq, 1, obj);\r\n            setInp({ ...inp, unq: [...inp?.unq] });\r\n          }\r\n          else setInp({ ...inp, unq: [obj] });\r\n        } }\r\n        >{inp?.unq?.length>0? `改一条就确认`: `新增一条`}</Button>\r\n      </div>\r\n    </Layer>;\r\n\r\n    const myTable=<div>\r\n      {inp?.unq?.map((a,i)=>{\r\n        return <React.Fragment  key={i}>\r\n          <div>{`${i+1}`}\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem onPress={()=>onModifySeq(i,a)}>修改</MenuItem>\r\n                  <MenuItem onPress={()=>onDeleteSeq(i,a)}>刪除这条</MenuItem>\r\n                  <MenuItem onPress={()=>onInsertSeq(i,a)}>插入一条</MenuItem>\r\n                  <MenuItem onPress={()=>onAddSeq(i)}>末尾新增一条</MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <Button  size=\"md\" iconAfter={<IconChevronDown />} variant=\"ghost\" css={{whiteSpace:'unset'}}>\r\n                {`[${a.rdate}] 项目${a.no||''}： ${a.desc||''}。 复检结果${a.rres||''}`}\r\n              </Button>\r\n            </ResponsivePopover>\r\n          </div>\r\n          {i===seq && editor}\r\n        </React.Fragment>;\r\n      }) }\r\n    </div>;\r\n    //不合格unq表数据生成时机：复检编制开始时初始化来的。在初检场景看到是动态校验目的前端显示表还未存储到后端数据库。\r\n    return (\r\n      <InspectRecordLayout inp={inp} setInp={setInp}  getInpFilter={getInpFilter} show={show}\r\n                           alone={alone}  label={'不合格复检结果记录'}>\r\n        <Text  variant=\"h5\">\r\n          四、检验不合格记录及复检结果\r\n        </Text>\r\n        明细表: 初检报告后才显示,复检时修改但是不能删除;\r\n        <hr/>\r\n        {myTable}\r\n        {seq===null && editor}\r\n      </InspectRecordLayout>\r\n    );\r\n  } );\r\n\r\n\r\n//检验项目的标准化展示组件\r\nexport interface ItemUniversalProps  extends React.HTMLAttributes<HTMLDivElement>{\r\n  show?: boolean;\r\n  alone?: boolean;\r\n  //检验项目配置对象标准的索引.[x].[y] ； 这里x是大项目；y是检验项目{还可拆分成几个更小项目的}。比如对应action=\"2.1\"就是x=1,y=0的配置。\r\n  x: number;\r\n  y: number;\r\n  inspectionContent: any[];\r\n  ref?: any;\r\n  procedure?: any;     //传递一个检验项目开头流程性内容，显示的格式等。\r\n  details?: any[];     //传递各个子项目(若没有子项目的，就算项目本身[0])的定制，测量数据细节内容。\r\n}\r\n//引进Render Props模式提高复用能力 { details[0](inp,setInp)  }；就可以配置成通用的组件。\r\nexport const ItemUniversal=\r\n  React.forwardRef((\r\n    { children, show=true, procedure, details, x, y ,alone=true,inspectionContent}:ItemUniversalProps,  ref\r\n  ) => {\r\n    const getInpFilter = React.useCallback((par) => {\r\n      let fields={};\r\n      //配置动态命名的字段获取旧的值，还想保存修改数据，还要界面同步显示变化数值的场景，就按这里做法。\r\n      inspectionContent[x].items[y].names?.map((aName,i)=> {\r\n        const namexD = `${aName}_D`;\r\n        fields[aName] =par[aName];\r\n        fields[namexD] =par[namexD];\r\n      });\r\n      inspectionContent[x].items[y].addNames.forEach(name=>\r\n        fields[name] =par[name]\r\n      );\r\n      return fields;\r\n    }, [x,y,inspectionContent]);\r\n    const {inp, setInp} = useItemInputControl({ ref });\r\n    //因为Hook不能用逻辑条件，只能上组件分解了，按条件分解两个组件。\r\n    //下拉列表标题=检验类别+项目内容；\r\n    //逻辑组件内部的钩子Hook有差异需求。分解成两个组件逻辑合并后，性能是有提升。\r\n    return (\r\n      <InspectRecordLayout inp={inp} setInp={setInp}  getInpFilter={getInpFilter} show={show}\r\n                           alone={alone} label={`${inspectionContent[x].items[y].iClass}${inspectionContent[x].items[y].label}`}>\r\n        <div css={{ display: 'flex', justifyContent: 'space-around' }}>\r\n          <Text variant=\"h6\">检验项目: {`${x + 1}.${y + 1}`}</Text>\r\n          <Text variant=\"h6\">{`${x + 1} ${inspectionContent[x].bigLabel}`}</Text>\r\n        </div>\r\n        <div css={{ display: 'flex', justifyContent: 'space-around' }}>\r\n          <Text variant=\"h6\">{`${x + 1}.${y + 1} ${inspectionContent[x].items[y].label}`}</Text>\r\n          <Text variant=\"h6\">检验类别 {`${inspectionContent[x].items[y].iClass}`}  </Text>\r\n        </div>\r\n        <hr/>\r\n        {procedure}\r\n        <Text variant=\"h5\">\r\n          查验结果\r\n        </Text>\r\n        {inspectionContent[x].items[y].subItems ? (inspectionContent[x].items[y].subItems?.map((a, i) => {\r\n            const namex = `${inspectionContent[x].items[y].names[i]}`;\r\n            const namexD = `${inspectionContent[x].items[y].names[i]}_D`;\r\n            return <React.Fragment key={i}>\r\n              {details[i] && details[i](inp, setInp)}\r\n              <InputGroupLine label={inspectionContent[x].items[y].subItems[i]}>\r\n                <SelectHookfork value={(inp?.[namex]) || ''} onChange={e => {\r\n                  inp[namex] = e.currentTarget.value || undefined;\r\n                  setInp({ ...inp });\r\n                }}\r\n                />\r\n              </InputGroupLine>\r\n              <InputGroupLine label='描述或问题'>\r\n                <Input value={(inp?.[namexD]) || ''} onChange={e => {\r\n                  inp[namexD] = e.currentTarget.value || undefined;\r\n                  setInp({ ...inp });\r\n                }}\r\n                />\r\n              </InputGroupLine>\r\n            </React.Fragment>;\r\n          }))\r\n          :\r\n          (inspectionContent[x].items[y].names?.map((a, i) => {\r\n            const namex = `${inspectionContent[x].items[y].names[i]}`;\r\n            const namexD = `${inspectionContent[x].items[y].names[i]}_D`;\r\n            return <React.Fragment key={i}>\r\n              {details[i] && details[i](inp, setInp)}\r\n              <InputGroupLine label={inspectionContent[x].items[y].label}>\r\n                <SelectHookfork value={(inp?.[namex]) || ''} onChange={e => {\r\n                  inp[namex] = e.currentTarget.value || undefined;\r\n                  setInp({ ...inp });\r\n                }}\r\n                />\r\n              </InputGroupLine>\r\n              <InputGroupLine label='描述或问题'>\r\n                <Input value={(inp?.[namexD]) || ''} onChange={e => {\r\n                  inp[namexD] = e.currentTarget.value || undefined;\r\n                  setInp({ ...inp });\r\n                }}\r\n                />\r\n              </InputGroupLine>\r\n            </React.Fragment>;\r\n          }))\r\n        }\r\n      </InspectRecordLayout>\r\n    );\r\n  } );\r\n\r\n\r\n\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\report\\comp\\rarelyVary.tsx",["689"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Text, Link, Divider, Embed, useTheme\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport { CCell, RCell, Table, TableBody, TableRow } from \"../../comp/TableExt\";\r\nimport { FadeImage } from \"../../FadeImage\";\r\nimport { Link as RouterLink } from \"wouter\";\r\nimport Img_Ma  from '../../images/MA.png';\r\nimport Img_ReportNoQR from '../../images/reportNoQR.png';\r\n//很多内容相对重复，这里是报告较高层范围复用的组件；专门报告类型的可以安排在下一层次分开目录去做。\r\n\r\n\r\nexport const 注意事项=<React.Fragment>\r\n  <br/>\r\n  2. 本报告应当由计算机打印输出，或者用钢笔、签字笔填写，字迹应当工整，修改无效。<br/>\r\n  <br/>\r\n  3. 本报告无检验、编制、审核、批准人员签字和检验机构的核准证号、检验专用章或者公章无效。<br/>\r\n  <br/>\r\n  4. 本报告一式三份，由检验机构、施工单位和使用单位分别保存。<br/>\r\n  <br/>\r\n  5. 受检单位对本报告结论如有异议，请在收到报告书之日起15日内，向检验机构提出书面意见。<br/>\r\n  <br/>\r\n  6. 根据《中华人民共和国特种设备安全法》，使用单位应于下次检验日期届满前1个月向检验机构提出定期检验申请。<br/>\r\n  <br/>\r\n  7. 有关检测数据未经允许，施工、使用单位不得擅自向社会发布信息。<br/>\r\n  <br/>\r\n  8. 报检电话：968829，网址：<Link href=\"http://27.151.117.65:9999/sdn\" title=\"报检\">http:// 27.151.117.65:9999 /sdn</Link>\r\n  <br/><br/>\r\n</React.Fragment>;\r\n\r\nexport const 落款单位地址=<React.Fragment>\r\n    <Text variant=\"h4\" css={{textAlign:'center'}}>福建省特种设备检验研究院</Text>\r\n    <Text variant=\"h6\" css={{textAlign:'center'}}>\r\n      FUJIAN SPECIAL EQUIPMENT INSPECTION AND RESEARCH INSTITUTE\r\n    </Text>\r\n    <Divider css={{borderTopColor: 'black'}}/>\r\n    <Text variant=\"h5\" >\r\n      地址（Add.）：福建省福州市仓山区卢滨路370号\r\n    </Text>\r\n    <div css={{display:'flex'}}>\r\n      <span css={{flex:'1'}}>电话（Tel.）：0591-968829</span>\r\n      <span css={{flex:'1'}}>\t传真（Fax）：0591-88700509</span>\r\n      <span css={{flex:'1'}}>邮政编码：350008</span>\r\n    </div>\r\n    <div css={{display:'flex'}}>\r\n      <span css={{flex:'1'}}>网址（Website）：www.fjtj.com</span>\r\n      <span css={{flex:'1'}}>\t电子邮箱（Email）：fjtj@fjtj.org</span>\r\n    </div>\r\n    <br/>\r\n</React.Fragment>;\r\n\r\nexport const reportFirstPageHead= ( {theme, No }\r\n) => {\r\n  return <React.Fragment>\r\n      <div css={{\r\n        textAlign: \"center\",\r\n        \"& > div\": {\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\"\r\n        },\r\n        \"@media (min-width:690px),print and (min-width:538px)\": {\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          flexWrap: 'wrap',\r\n          \"& > div\": {\r\n            margin: theme.spaces.sm,\r\n          }\r\n        }\r\n      }}\r\n      >\r\n        <div>\r\n          <Embed css={{width: \"190px\",margin: \"auto\"}} width={95} height={45}>\r\n            <FadeImage src={Img_Ma}/>\r\n          </Embed>\r\n          <br/>\r\n          <Text variant=\"h5\">181320110160</Text>\r\n        </div>\r\n        <div>\r\n          <Embed css={{width: \"140px\",margin: \"auto\"}} width={10} height={10}>\r\n            <FadeImage src={Img_ReportNoQR}/>\r\n          </Embed>\r\n        </div>\r\n        <div>\r\n          <Text variant=\"h5\">FJB/TC-1001-1-0-2017</Text>\r\n          <br/><br/>\r\n          <Text variant=\"h5\" css={{\r\n            \"@media (min-width:690px),print and (min-width:538px)\": {\r\n              marginRight: \"1rem\"\r\n            }\r\n          }}\r\n          >No：{No}\r\n          </Text>\r\n        </div>\r\n      </div>\r\n  </React.Fragment>;\r\n};\r\n\r\n\r\nexport const 首页设备概况= ( {theme, orc }\r\n) => {\r\n  return <React.Fragment>\r\n    <Table fixed={ [\"20%\",\"%\"] }   printColWidth={ [\"210\",\"750\"] }   css={ {borderCollapse: 'collapse'} }  >\r\n      <TableBody>\r\n        <TableRow>\r\n          <RCell css={{border:'none'}}>使用单位</RCell>\r\n          <CCell css={{border:'none',borderBottom:`1px dashed ${theme.colors.intent.primary.light}`}}>{orc.使用单位}</CCell>\r\n        </TableRow>\r\n        <TableRow>\r\n          <RCell css={{border:'none'}}>分支机构</RCell>\r\n          <CCell css={{border:'none',borderBottom:`1px dashed ${theme.colors.intent.primary.light}`}}>{orc.分支机构 || '／'}</CCell>\r\n        </TableRow>\r\n        <TableRow>\r\n          <RCell css={{border:'none'}}>楼盘名称</RCell>\r\n          <CCell css={{border:'none',borderBottom:`1px dashed ${theme.colors.intent.primary.light}`}}>{orc.楼盘 || '／'}</CCell>\r\n        </TableRow>\r\n        <TableRow>\r\n          <RCell css={{border:'none'}}>设备类别</RCell>\r\n          <CCell css={{border:'none',borderBottom:`1px dashed ${theme.colors.intent.primary.light}`}}>{orc.设备类别}</CCell>\r\n        </TableRow>\r\n        <TableRow>\r\n          <RCell css={{border:'none'}}>设备品种</RCell>\r\n          <CCell css={{border:'none',borderBottom:`1px dashed ${theme.colors.intent.primary.light}`}}>{orc.设备品种}</CCell>\r\n        </TableRow>\r\n        <TableRow>\r\n          <RCell css={{border:'none'}}>检验日期</RCell>\r\n          <CCell css={{border:'none',borderBottom:`1px dashed ${theme.colors.intent.primary.light}`}}>{orc.检验日期}</CCell>\r\n        </TableRow>\r\n        <TableRow>\r\n          <RCell css={{border:'none'}}>监察识别码</RCell>\r\n          <CCell css={{border:'none',borderBottom:`1px dashed ${theme.colors.intent.primary.light}`}}>{orc.监察识别码}</CCell>\r\n        </TableRow>\r\n        <TableRow>\r\n          <RCell css={{border:'none'}}>设备号</RCell>\r\n          <CCell css={{border:'none',borderBottom:`1px dashed ${theme.colors.intent.primary.light}`}}>{orc.eqpcod}</CCell>\r\n        </TableRow>\r\n        <TableRow>\r\n          <RCell css={{border:'none'}}>设备代码</RCell>\r\n          <CCell css={{border:'none',borderBottom:`1px dashed ${theme.colors.intent.primary.light}`}}>{orc.设备代码}</CCell>\r\n        </TableRow>\r\n      </TableBody>\r\n    </Table>\r\n    <br/>\r\n  </React.Fragment>;\r\n};\r\n\r\n//重复性代码抽象抽取参数化后可复用。\r\nexport const 末尾链接= ( {template, verId, repId }\r\n) => {\r\n  const theme = useTheme();\r\n  return  <div css={{\r\n              \"@media print\": {\r\n                display:'none'\r\n              },\r\n              textAlign:'center',\r\n              marginBottom: '0.8rem'\r\n          }}\r\n       >\r\n    <RouterLink to=\"/\">-报告完毕,返回-</RouterLink>\r\n      <div css={{\r\n        textAlign: \"center\",\r\n        \"& > div\": {\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\",\r\n          marginTop: '0.5rem',\r\n          marginBottom: '0.5rem'\r\n        },\r\n        [theme.mediaQueries.md]: {\r\n          display: \"flex\",\r\n          justifyContent: \"space-evenly\",\r\n          flexWrap: 'wrap'\r\n        }\r\n      }}\r\n      >\r\n        <div>\r\n          <RouterLink to={`/report/${template}/ver/${verId}/printAll/${repId}`}>\r\n            看完整原始记录\r\n          </RouterLink>\r\n        </div>\r\n        <div>\r\n          <RouterLink to={`/report/${template}/ver/${verId}/ALL/${repId}`}>\r\n            编辑原始记录\r\n          </RouterLink>\r\n        </div>\r\n      </div>\r\n    </div>;\r\n};\r\n\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\report\\comp\\helper.ts",[],"D:\\home\\sei\\front-end\\src\\report\\comp\\base.tsx",["690","691"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, css, SerializedStyles } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  useTheme,\r\n  Text,\r\n  Button,SelectProps,\r\n  IconChevronUp,\r\n  IconChevronDown, Collapse, useCollapse,\r\n  Select, Layer, Check,\r\n} from \"customize-easy-ui-component\";\r\nimport PropTypes from \"prop-types\";\r\n//import { useUid } from \"customize-easy-ui-component/esm/Hooks/use-uid\";\r\nimport { Dispatch, SetStateAction } from \"react\";\r\n//import isEqual from \"lodash.isequal\";\r\nimport { MutableRefObject } from \"react\";\r\nimport { Ref } from \"react\";\r\nimport { EditStorageContext } from \"../StorageContext\";\r\nimport { Link as RouterLink } from \"wouter\";\r\nimport { CCell, Cell, TableRow } from \"../../comp/TableExt\";\r\n\r\n//公共的复用性好的组件。\r\n\r\nexport interface InspectRecordHeadColumnProps {\r\n  level: string;\r\n  bigLabel: string;\r\n  label: string;\r\n  tinyLabel?: string;\r\n  children: React.ReactNode;\r\n}\r\n//检验项目的开头几个列的布局\r\nexport const InspectRecordHeadColumn: React.FunctionComponent<InspectRecordHeadColumnProps> = ({\r\n                                                                       label,\r\n                                                                       children,\r\n                                                                       level,\r\n                                                                       bigLabel,\r\n                                                                        tinyLabel,\r\n                                                                       ...other\r\n                                                                     }) => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div css={{ display: 'flex', justifyContent: 'space-between'}}>\r\n          <Text  variant=\"h6\"> 检验类别 {level}  </Text>\r\n          <Text  variant=\"h6\"> 检验项目与内容及其要求 </Text>\r\n      </div>\r\n\r\n      <Text  variant=\"h6\"　css={{ textAlign: 'center' }}>\r\n          <Text  variant=\"subtitle\"　>\r\n            {bigLabel}\r\n          </Text>\r\n          <Text  variant=\"body\"　>\r\n            {label}\r\n          </Text>\r\n       </Text>\r\n\r\n        <Text className=\"Collapse__text\" variant=\"subtitle\">\r\n          {\r\n            tinyLabel?  tinyLabel : null\r\n          }\r\n          <hr/>\r\n\r\n          {children}\r\n\r\n        </Text>\r\n\r\n        <Text  variant=\"h4\"　>\r\n          查验结果\r\n        </Text>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\nInspectRecordHeadColumn.propTypes = {\r\n  level: PropTypes.string.isRequired,\r\n  bigLabel: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  tinyLabel: PropTypes.string,\r\n  children: PropTypes.node\r\n};\r\n\r\n\r\nexport interface InspectZoneHeadColumnProps {\r\n  label: string;\r\n  projects: string[];\r\n  children?: React.ReactNode;\r\n}\r\n//几个检验项目的聚合模式，1个下拉的分区装入多个项目。\r\nexport const InspectZoneHeadColumn: React.FunctionComponent<InspectZoneHeadColumnProps> = ({\r\n      label,\r\n      projects,\r\n      children,\r\n      ...other\r\n   }) => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div css={{ display: 'flex', justifyContent: 'space-around'}}>\r\n        <Text  variant=\"h6\">项目: {projects.join(',')}</Text>\r\n        <Text  variant=\"h6\">{label}</Text>\r\n      </div>\r\n      {children}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\nexport interface InspectItemHeadColumnProps {\r\n  level: string;\r\n  label: string;\r\n  children: React.ReactNode;\r\n}\r\n//下拉的分区装入多个项目, 之后单一个检验项目的开头\r\nexport const InspectItemHeadColumn: React.FunctionComponent<InspectItemHeadColumnProps> = ({\r\n      level,\r\n      label,\r\n      children,\r\n      ...other\r\n      }) => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div css={{ display: 'flex',justifyContent: 'space-around',marginTop:'1rem'}}>\r\n        <Text  variant=\"h6\">{label}</Text>\r\n        <Text  variant=\"h6\">检验类别 {level}  </Text>\r\n      </div>\r\n        <hr/>\r\n        {children}\r\n      <Text  variant=\"h4\"　>\r\n        查验结果\r\n      </Text>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n//React.useMemo(() =><RenderLoad/>, []); 用它加速显示组件是针对已经在当前界面显示或display：none的才管用;\r\n\r\nexport interface InspectRecordTitleProps {\r\n  //control参数实际是 useCollapse(show,true) 返回值。\r\n  //底下的?号是必不可少的。\r\n  control:  {　show?:boolean,\r\n              setShow?: React.Dispatch<React.SetStateAction<boolean>>,\r\n              buttonProps?: any ,\r\n              collapseProps?:{id:string,　show:boolean} 　\r\n            };　\r\n  label: string;\r\n  children: React.ReactNode;\r\n  collapseNoLazy?: boolean;\r\n  onPullUp?: () => void;\r\n}\r\n//原始记录的列表项，很像菜单列表标题；　　包装成一个组件，以便　修改和复用。\r\nexport const InspectRecordTitle: React.FunctionComponent<InspectRecordTitleProps> = ({\r\n         control,\r\n         label,\r\n         onPullUp,\r\n         collapseNoLazy=false,\r\n         children,\r\n         ...other\r\n      }) => {\r\n  const theme = useTheme();\r\n  //点击最底下的按钮，可以触发编辑器的确认临时存储的功能。\r\n  return (\r\n    <Layer elevation={\"sm\"}     css={{ padding: '0.25rem' }}>\r\n      <div>\r\n          <Button\r\n            variant=\"ghost\"\r\n            intent=\"primary\"\r\n            iconAfter={control.show  ? <IconChevronUp /> : <IconChevronDown />}\r\n            {...control.buttonProps}\r\n          >\r\n            {<Text variant=\"h5\" css={{color: control.show ? theme.colors.palette.red.base:undefined}}>{label}</Text>}\r\n          </Button>\r\n\r\n          <Collapse {...control.collapseProps}  noAnimated>\r\n              {children}\r\n             <div css={{textAlign: 'right',padding:'0.2rem'}}>\r\n              <Button\r\n                variant=\"ghost\"\r\n                intent=\"primary\"\r\n                iconAfter={control.show  ? <IconChevronUp /> : <IconChevronDown />}\r\n                {...control.buttonProps}\r\n                onPress={() =>{\r\n                    onPullUp&&onPullUp();\r\n                    control.setShow(!control.show);\r\n                } }\r\n              >\r\n                {control.show ? \"确认修改并收起\" : \"更多\"}\r\n              </Button>\r\n             </div>\r\n          </Collapse>\r\n      </div>\r\n    </Layer>\r\n  );\r\n};\r\n\r\nInspectRecordTitle.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n  control: PropTypes.shape({\r\n      show: PropTypes.bool.isRequired,\r\n      setShow: PropTypes.func,\r\n      buttonProps: PropTypes.any.isRequired,\r\n      collapseProps: PropTypes.any.isRequired,\r\n  }).isRequired,　\r\n};\r\n\r\n\r\nexport interface InspectRecordCollapseProps {\r\n  label: string;\r\n  show?: boolean;\r\n  children: React.ReactNode;\r\n  inp:  any;\r\n  setInp:  React.Dispatch<React.SetStateAction<any>>;\r\n  getInpFilter: ( any ) => any;\r\n}\r\n//EditStorageContext导致上级组件对底下子组件无感觉，上层并不知道底下使用了context操作，很大地破坏封装性。\r\nexport const InspectRecordCollapse: React.FunctionComponent<InspectRecordCollapseProps> = ({\r\n    label,\r\n    show=true,\r\n    inp,\r\n    setInp,\r\n    getInpFilter,\r\n    children,\r\n    ...other\r\n }) => {\r\n  const theme = useTheme();\r\n  const context =React.useContext(EditStorageContext);\r\n  if(!context)  throw new Error(\"需context下\");\r\n  const {storage, setStorage} =context;\r\n  const eos =useCollapse(show,true);\r\n  React.useEffect(() => {\r\n    eos.show&& storage&& setInp(getInpFilter(storage));\r\n  }, [eos.show, storage, setInp, getInpFilter] );\r\n  const onPullUp = React.useCallback(() => {\r\n    eos.show && setStorage({...storage, ...inp});\r\n  }, [eos.show, inp,storage,setStorage]);\r\n  //点击最底下的按钮，可以触发编辑器的确认临时存储的功能。\r\n  //不可以把<Button> 再用eos.show外加逻辑 &&隐藏，报错！。\r\n  return (\r\n    <Layer elevation={\"sm\"}     css={{ padding: '0.25rem' }}>\r\n        <Button\r\n          variant=\"ghost\"\r\n          intent=\"primary\"\r\n          iconAfter={eos.show  ? <IconChevronUp /> : <IconChevronDown />}\r\n          {...eos.buttonProps}\r\n          css={{whiteSpace:'unset'}}\r\n        >\r\n          {<Text variant=\"h5\" css={{color: eos.show ? theme.colors.palette.red.base:undefined}}>{label}</Text>}\r\n        </Button>\r\n      <Collapse {...eos.collapseProps}  noAnimated>\r\n          {children}\r\n          <div css={{textAlign: 'right',padding:'0.2rem'}}>\r\n            <Button\r\n              variant=\"ghost\"\r\n              intent=\"primary\"\r\n              iconAfter={eos.show  ? <IconChevronUp /> : <IconChevronDown />}\r\n              {...eos.buttonProps}\r\n              onPress={() =>{\r\n                onPullUp&&onPullUp();\r\n                eos.setShow(!eos.show);\r\n              } }\r\n            >\r\n              修改确认收起\r\n            </Button>\r\n          </div>\r\n      </Collapse>\r\n    </Layer>\r\n  );\r\n};\r\n\r\nexport interface InspectRecordDialogProps {\r\n  children: React.ReactNode;\r\n  inp:  any;\r\n  setInp:  React.Dispatch<React.SetStateAction<any>>;\r\n  getInpFilter: ( any ) => any;\r\n}\r\n//独立编辑形式的。\r\nexport const InspectRecordDialog: React.FunctionComponent<InspectRecordDialogProps> = ({\r\n     inp,\r\n     setInp,\r\n     getInpFilter,\r\n     children,\r\n     ...other\r\n }) => {\r\n  const {storage, setStorage} =React.useContext(EditStorageContext);\r\n  React.useEffect(() => {\r\n      storage&& setInp(getInpFilter(storage));\r\n  }, [storage, setInp, getInpFilter] );\r\n  //点击最底下的按钮，可以触发编辑器的确认临时存储的功能。\r\n  return (\r\n    <Layer elevation={\"sm\"}  css={{ padding: '0.25rem' }}>\r\n       {children}\r\n        <div css={{textAlign: 'right',padding:'0.2rem'}}>\r\n          <Button size=\"lg\" intent={'primary'}\r\n             onPress={() => {setStorage({ ...storage, ...inp }) }}>\r\n            修改确认\r\n          </Button>\r\n        </div>\r\n    </Layer>\r\n  );\r\n};\r\n\r\nexport interface SelectHookforkProps extends SelectProps {\r\n  topDivStyle?: SerializedStyles;\r\n}\r\n//太多重复了，自定义成一个新组件。\r\nexport const SelectHookfork: React.FunctionComponent<SelectHookforkProps> = ({\r\n                                                                 value,\r\n                                                                 onChange,\r\n                                                                 topDivStyle,\r\n                                                               ...other\r\n                                                             }) => {\r\n  return (\r\n    <Select inputSize=\"md\" css={{minWidth:'140px',fontSize:'1.3rem',padding:'0 1rem'}} divStyle={css`max-width:240px;`}\r\n            value={value}  onChange={onChange}  topDivStyle={topDivStyle}\r\n            {...other}\r\n    >\r\n      <option value={''}>空</option>\r\n      <option value={'√'}>合格</option>\r\n      <option value={'▽'}>见证确认</option>\r\n      <option value={'／'}>无此项</option>\r\n      <option value={'×'}>不合格</option>\r\n      <option value={'△'}>无法检测</option>\r\n    </Select>\r\n  );\r\n};\r\n\r\n\r\nexport interface AntCheckProps\r\n            extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  label: string;\r\n  topDivStyle?: SerializedStyles;\r\n  defaultChecked?: boolean,\r\n  //外部传递来的状态宿主，点击改变inp。\r\n  inp: any,\r\n  setInp: Dispatch<SetStateAction<any>>,\r\n  //子项目名字\r\n  item: string;\r\n  //父项目名字，若sup为空，item直接挂到inp底下第一层属性，否则嵌套在sup底下，支持2两层楼属性。\r\n  sup?: string;\r\n}\r\n//用来简化重复的部分，就像是一个语法糖。\r\nexport const AntCheck: React.FunctionComponent<AntCheckProps> = ({\r\n              label,\r\n              id,\r\n              topDivStyle,\r\n              defaultChecked=false,\r\n              inp,\r\n              setInp,\r\n              sup,\r\n              item,\r\n              ...other\r\n}) => {\r\n\r\n  //inp属性inp['witnessConfirm']=false可直接改，但做 inp['tool']['vernierCaliper'] = !(inp['tool']['vernierCaliper'])就不生效？!!\r\n  //     defaultChecked={ defaultChecked  } err but not both). Decide between using a controlled or uncontrolled input element\r\n\r\n  return (\r\n      <Check label={label}\r\n             checked={ (sup?  inp?.[sup]?.[item]  :  inp?.[item] ) || defaultChecked }\r\n             onChange={e => {\r\n                   setInp( (sup&& inp&&{ ...inp,  [sup]: { ...inp[sup],  [item]  :   !( inp[sup]  &&  inp[sup][item] )   }    } )\r\n                           ||  (sup&& { [sup]: { [item] :  !defaultChecked }  } )\r\n                           ||  (inp&&{ ...inp,   [item]  :  ! inp[item] } )\r\n                           ||  { [item]  :  !defaultChecked }   )\r\n                 }  }\r\n             topDivStyle={topDivStyle}\r\n      />\r\n  );\r\n};\r\n\r\ninterface IndentationLayTextProps  {\r\n  title?: string | React.ReactNode;\r\n  id?: string;\r\n  children?: React.ReactNode;\r\n  component?: React.ElementType<any>;\r\n}\r\n//子元素缩进排版: 文本段落，缩进的。\r\nexport const IndentationLayText: React.FunctionComponent<IndentationLayTextProps> = ({\r\n                 children,\r\n                 title,\r\n                 id,\r\n                 component :Component= \"div\",\r\n                 ...other\r\n               }) => {\r\n  const theme = useTheme();\r\n  return (\r\n    <Component\r\n      className=\"Indentation\"\r\n      css={{\r\n      }}\r\n      {...other}\r\n    >\r\n      <Text\r\n        className=\"Indentation__title\"\r\n        id={id}\r\n        css={{ margin: 0 }}\r\n        variant=\"h6\"\r\n      >\r\n        {title}\r\n      </Text>\r\n      <div css={{ paddingLeft: '1rem',\r\n            [theme.mediaQueries.sm]: {\r\n              paddingLeft: '0.5rem'\r\n            },\r\n            [theme.mediaQueries.lg]: {\r\n              paddingLeft: '2rem'\r\n            }\r\n           }}>\r\n        {children}\r\n      </div>\r\n    </Component>\r\n  );\r\n};\r\n\r\n\r\n//par代表整体原后端数据，itemVal是当前条目的截取部分数据。\r\n//把par 直接保存到了useRef做成的 那个不可变previousState当中。\r\n//总的show按钮各分区项目show的控制，以单一个逻辑变量无法完全正确操纵！必须传递然后合并成独立一个show逻辑。\r\nexport interface ItemControlProps {\r\n  ref: React.Ref<any>;\r\n  show: boolean;\r\n  //par: any;   改成回调模式，上级深度控制下级，去除组件参数，避免多头受控，可能死循环。   par={},\r\n  //接受par输入的过滤器，回调 过滤有用数据。\r\n  filter: (par: any) => {};\r\n}\r\n//后端数据没有变化的，前端输入正在导致记录变化的，要维持以正在交互的输入为准，等待保存给后端。\r\n//par被上级组件利用回调钩子模式接管控制后，就不能在这里多头设置，否则死循环。\r\n//useXXX钩子函数，每次render调用次数顺序需要保证一致性。规则限制！不能用逻辑{&&}套住它。\r\nexport　function useItemControlAs_delete({\r\n                             ref=null,\r\n                             filter=null,\r\n                             show=false\r\n                            } : ItemControlProps\r\n) {\r\n  const eos =useCollapse(show,true);\r\n  const [inp, setInp] = React.useState(null);\r\n  const [par, setPar] = React.useState(null);\r\n  //用回调钩子setShow来替换；原先的show参数下传配合在useCollapse内部useEffect(() [defaultShow] 做修正方式。\r\n  //回调钩子的模式。在上层父组件去统一调用本函数的，这里仅仅生成函数的代码但还未执行。\r\n  const onParChange = React.useCallback(function (par) {\r\n                    setPar(par);\r\n                    setInp(filter(par));\r\n                }, [ filter]);\r\n  //【廢棄】setShow功能，無需排序和全部開或拉上。\r\n  //旧的模式,子组件把自己的东西暴露给了父组件；，准备废弃了！\r\n   React.useImperativeHandle( ref,() => ({ inp ,setShow:eos.setShow, onParChange}), [inp, onParChange,eos.setShow] );\r\n    //不直接用import { usePrevious } from \"./Hooks/previous\" 减少render次数。\r\n  return {eos, setInp, inp, par};\r\n}\r\n\r\nexport interface ItemInputControlProps {\r\n  ref: React.Ref<any>;\r\n  //接受par输入的过滤器，回调 过滤有用数据。\r\n  //filter: (par: any) => {};\r\n}\r\nexport　function useItemInputControl({\r\n                                   ref,\r\n                                   //filter=null,\r\n                                 } : ItemInputControlProps\r\n) {\r\n  const [inp, setInp] = React.useState(null);\r\n  //用回调钩子setShow来替换；原先的show参数下传配合在useCollapse内部useEffect(() [defaultShow] 做修正方式。\r\n  //回调钩子的模式。在上层父组件去统一调用本函数的，这里仅仅生成函数的代码但还未执行。\r\n  //【廢棄】setShow功能，無需排序和全部開或拉上。\r\n  React.useImperativeHandle( ref,() => ({ inp }), [inp] );\r\n  return {inp, setInp};\r\n}\r\n\r\n\r\n//各个检验单项子组件暴露给父组件的接口数据。\r\nexport interface InternalItemHandResult {\r\n  inp: any;\r\n  doConfirm: ()=>{};\r\n}\r\n//各个检验单项\r\nexport interface InternalItemProps  extends React.HTMLAttributes<HTMLDivElement>{\r\n  show?: boolean;\r\n  alone?: boolean;\r\n  ref?: any;\r\n  //报告ID号；数据库最大19位 number 大坑17位以后的Number类型数值精度丢失。\r\n  repId?: string;\r\n}\r\n//动态载入的模板组件, 所有参数都必须？可选的，否则报错。\r\nexport interface OriginalViewProps {\r\n  inp?: any;\r\n  action: string;\r\n  ref?: any;\r\n  verId: string;\r\n  repId?: string;\r\n}\r\n\r\nexport interface ReportViewProps {\r\n  repId?: string;\r\n  source: any;\r\n  //printing?: boolean;\r\n  ref?: any;\r\n  verId: string;\r\n}\r\n\r\n//Hook编译报错，不允许直接套数组()=> 回调函数模式创建；需要包裹一层Component()规避检查。\r\n//若本组件没有重新加载，{count}数组长度变化，会导致ｈｏｏｋ报错。  重命名也逃不掉报错。\r\n//count=下拉组件亦即独立展示项目个数；\r\n//HOOK机制要求，useXXX() 次数与顺序都不允许变化。HOOK报错。\r\n//外部采用路由模式，组件进入后采取根据入口参数来调节count的就没问题，count不会因为两次render表现出个数差异。\r\nexport function useProjectListAs({count}) {\r\n  const array= new Array(count).fill(null);\r\n  function WrappedComp(i: number) {\r\n        return React.useRef<InternalItemHandResult>(null);\r\n  };\r\n  return React.useRef<MutableRefObject<InternalItemHandResult>[] | null>(array.map((i) => WrappedComp(i) ) );\r\n}\r\n\r\n\r\n\r\nexport interface InspectRecordLayoutProps {\r\n  alone: boolean;\r\n  label: string;\r\n  show?: boolean;\r\n  children: React.ReactNode;\r\n  inp:  any;\r\n  setInp:  React.Dispatch<React.SetStateAction<any>>;\r\n  getInpFilter: ( any ) => any;\r\n}\r\n//继续复用，组合来节省冗余代码量。\r\nexport const InspectRecordLayout: React.FunctionComponent<InspectRecordLayoutProps> = ({\r\n    alone,\r\n    label,\r\n    show=true,\r\n    inp,\r\n    setInp,\r\n    getInpFilter,\r\n    children,\r\n    ...other\r\n }) => {\r\n  if(alone)  return (\r\n       <InspectRecordDialog inp={inp} setInp={setInp} getInpFilter={getInpFilter} >\r\n          {children}\r\n       </InspectRecordDialog>\r\n      );\r\n  else\r\n      return <InspectRecordCollapse inp={inp} setInp={setInp}  getInpFilter={getInpFilter}\r\n                                    show={show}  label={label} >\r\n            {children}\r\n    </InspectRecordCollapse>;\r\n};\r\n\r\n\r\n\r\n//自定义Ｈｏｏｋ的 例子。\r\n/*const useValues = () => {\r\n  const [values, setValues] = React.useState({  });\r\n  const itBinds=useProjectListAs({count: 8});\r\n  const updateData = React.useCallback(\r\n    (nextData) => {    },    [values],\r\n  );\r\n  return [values, updateData, itBinds];\r\n};\r\n*/\r\n\r\n//通用的格式显示。\r\nexport const useIspNormalizeContent= ( {itRes, inspectionContent, modelPath, repNo}\r\n) => {\r\n  const renderIspContent =React.useMemo(() => {\r\n    let seq = 0;\r\n    let htmlTxts =[];\r\n    inspectionContent.forEach((rowBigItem, x) => {\r\n      let bigItemRowCnt=0;\r\n      rowBigItem && rowBigItem.items.forEach((item, y) => {\r\n        if(item){\r\n          seq += 1;\r\n          let itemXY = `${x + 1}.${y + 1}`;\r\n          let subCnt =item.subItems?.length || 0;\r\n          let iRowSpan =subCnt? subCnt : 1;\r\n          let bigLineCnt=rowBigItem.splitLine[bigItemRowCnt];\r\n          const rowHead = <RouterLink key={seq} to={`/report/${modelPath}/${itemXY}/${repNo}`}>\r\n            <TableRow>\r\n              <CCell component=\"th\" scope=\"row\" rowSpan={iRowSpan}>{seq}</CCell>\r\n              <CCell rowSpan={iRowSpan}>{item.iClass}</CCell>\r\n              {bigLineCnt && <CCell rowSpan={bigLineCnt}>{x+1}<br/>{rowBigItem.bigLabel}</CCell> }\r\n              <CCell rowSpan={iRowSpan}>{itemXY}</CCell>\r\n              { subCnt?  ( <React.Fragment>\r\n                  <CCell rowSpan={iRowSpan}>{item.label}</CCell>\r\n                  <Cell>{item.subItems[0]}</Cell>\r\n                </React.Fragment> )\r\n                :\r\n                <Cell colSpan={2}>{item.label}</Cell>\r\n              }\r\n              <CCell>{itRes[itemXY][0]}</CCell>\r\n              <CCell rowSpan={iRowSpan}>{itRes[itemXY].result}</CCell>\r\n            </TableRow>\r\n          </RouterLink>;\r\n          htmlTxts.push(rowHead);\r\n          bigItemRowCnt++;\r\n          for(let i=0; i<subCnt-1; i++){\r\n            let bigLineCnt=rowBigItem.splitLine[bigItemRowCnt];\r\n            const rowSub =<TableRow key={`${itemXY}-${i+1}`}>\r\n              {bigLineCnt && <CCell rowSpan={bigLineCnt}>{`${x+1}`}<br/>{`${rowBigItem.bigLabel}`}</CCell> }\r\n              <Cell>{item.subItems[i+1]}</Cell>\r\n              <CCell>{itRes[itemXY][i+1]}</CCell>\r\n            </TableRow>;\r\n            htmlTxts.push(rowSub);\r\n            bigItemRowCnt++;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    return  htmlTxts;\r\n  }, [itRes,repNo,modelPath,inspectionContent]);\r\n  return { renderIspContent };\r\n};\r\n\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\comp\\TableExt.tsx",["692"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, css } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//import { Layer } from \"./Layer\";\r\nimport PropTypes from \"prop-types\";\r\n//import { useTheme } from \"./Theme/Providers\";\r\n\r\n//报表，打印的表格：　从sancho拷贝来，深度定做。\r\nimport {Layer, useTheme,} from \"customize-easy-ui-component\";\r\n\r\n\r\ntype SectionTypeVariants = \"TableHead\" | \"TableBody\";\r\n\r\ninterface TableSectionContextType {\r\n  type: SectionTypeVariants;\r\n}\r\n\r\n//没有对外输出TableSectionContext的；无法import {TableSectionContext} from \"customize-easy-ui-component\";\r\nconst TableSectionContext = React.createContext<TableSectionContextType>({\r\n  type: \"TableHead\"\r\n});\r\n\r\n//const TableContext = React.createContext({ fixed: false });\r\n\r\n/**\r\n * A Table provides a useful abstraction for managing rows and columns.\r\n */\r\n\r\ninterface TableProps extends React.HTMLAttributes<HTMLTableElement> {\r\n  /** An optional minimum width for table content.\r\n   * 配置表格的最小宽度，小于它就启用水平滚动条。 举例：minWidth=css 单位。\r\n   *  */\r\n  minWidth?: string;\r\n  /** An optional array of fixed layout widths for each column\r\n   * 非打印场景的必须看fixed； 打印场景优先使用printColWidth；若这两者都没定义那就是系统自动的。\r\n   * 百分比% 和数值px两种形式。 举例：fixed={[\"8%\",\"23%\",\"%\",\"12%\"] }  printColWidth={[\"60\",\"156\",\"700\",\"80\"]}\r\n   * */\r\n  fixed?: string[];\r\n  //打印场景才采用的： 敲定的列宽on printer case,set just as fixed  above; 3种形式[pixels, %, relative_length];\r\n  printColWidth?: string[];\r\n}\r\n\r\n\r\nexport const Table: React.FunctionComponent<TableProps> = ({\r\n                                                             children,\r\n                                                             minWidth,\r\n                                                             fixed,\r\n                                                             printColWidth,\r\n                                                             ...other\r\n                                                           }) => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        width: \"100%\",\r\n        display: \"block\",\r\n        overflowX: minWidth ? \"auto\" : \"initial\"\r\n      }}\r\n    >\r\n      <table\r\n        css={{\r\n          borderSpacing: 0,\r\n          borderCollapse: \"separate\",\r\n          width: \"100%\",\r\n          fontFamily: theme.fonts.base,\r\n          WebkitAppearance: \"none\",\r\n          WebkitFontSmoothing: \"antialiased\",\r\n          display: \"table\",\r\n          minWidth,\r\n          tableLayout: fixed ? \"fixed\" : undefined,\r\n          \"@media print\": {\r\n            tableLayout: printColWidth ? \"fixed\" : fixed? \"fixed\" : undefined,\r\n          }\r\n        }}\r\n        {...other}\r\n      >\r\n        {fixed && (\r\n          <colgroup\r\n            css={{\r\n              \"@media print\": {\r\n                display: printColWidth ?  'none' : undefined,\r\n              },\r\n            }}\r\n          >\r\n            {fixed.map((width, i) => {\r\n              return <col key={i} width={width} />;\r\n            })}\r\n          </colgroup>\r\n        )}\r\n\r\n        {printColWidth && (\r\n          <colgroup\r\n            css={{\r\n              \"@media not print\": {\r\n                display: 'none',\r\n              },\r\n              \"@media print\": {\r\n                display: undefined,\r\n              },\r\n            }}\r\n          >\r\n            {printColWidth.map((width, i) => {\r\n              return <col key={i} width={width} />;\r\n            })}\r\n          </colgroup>\r\n        )}\r\n\r\n          {children}\r\n\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nTable.propTypes = {\r\n  minWidth: PropTypes.string,\r\n  fixed: PropTypes.arrayOf(PropTypes.string),\r\n  printColWidth: PropTypes.arrayOf(PropTypes.string),\r\n  children: PropTypes.node\r\n};\r\n\r\n/**\r\n * A TableHead is used to render column labels in a table.\r\n */\r\n\r\ntype TableHeadProps = React.HTMLAttributes<HTMLTableSectionElement>;\r\n\r\nexport function TableHead({ children, ...other }: TableHeadProps) {\r\n  return (\r\n    <thead\r\n      css={{\r\n        display: \"table-header-group\"\r\n      }}\r\n      {...other}\r\n    >\r\n    <TableSectionContext.Provider value={{ type: \"TableHead\" }}>\r\n      {children}\r\n    </TableSectionContext.Provider>\r\n    </thead>\r\n  );\r\n}\r\n\r\ninterface TableRowProps extends React.HTMLAttributes<HTMLTableRowElement> {\r\n  /** A callback when a row is selected */\r\n  onClick?: () => void;\r\n}\r\n\r\nexport const TableRow: React.FunctionComponent<TableRowProps> = ({\r\n                                                                   onClick,\r\n                                                                   children,\r\n                                                                   ...other\r\n                                                                 }) => {\r\n  const theme = useTheme();\r\n  const { type: tableSectionType } = React.useContext(TableSectionContext);\r\n\r\n  const buttonProps = onClick\r\n    ? {\r\n      role: \"button\",\r\n      tabIndex: 0\r\n    }\r\n    : {};\r\n\r\n  return (\r\n    <tr\r\n      onClick={onClick}\r\n      css={{\r\n        height: tableSectionType === \"TableHead\" ? \"31px\" : \"49px\",\r\n        display: \"table-row\",\r\n        outline: \"none\",\r\n        verticalAlign: \"middle\",\r\n        cursor: onClick ? \"pointer\" : \"default\",\r\n        \":hover\": {\r\n          background: onClick ? theme.colors.background.tint1 : \"none\"\r\n        }\r\n      }}\r\n      {...buttonProps}\r\n      {...other}\r\n    >\r\n      {children}\r\n    </tr>\r\n  );\r\n};\r\n\r\nTableRow.propTypes = {\r\n  onClick: PropTypes.func,\r\n  children: PropTypes.node\r\n};\r\n\r\n/**\r\n * Cell, used for both <td> and <th> elements.\r\n */\r\n//justify导致字间距自动变大，感觉不规整，不如left。\r\n\r\nconst tableCellAlignments = {\r\n  right: css({\r\n    textAlign: \"right\",\r\n    flexDirection: \"row-reverse\"\r\n  }),\r\n  left: css({\r\n    textAlign: \"left\"\r\n  }),\r\n  center: css({\r\n    textAlign: \"center\"\r\n  }),\r\n  justify: css({\r\n    textAlign: \"justify\"\r\n  })\r\n};\r\n\r\ntype tableCellVariants = \"head\" | \"body\";\r\n\r\ntype TableCellBaseProps = React.ThHTMLAttributes<HTMLTableHeaderCellElement> &\r\n  React.TdHTMLAttributes<HTMLTableDataCellElement>;\r\n\r\ninterface TableCellProps extends TableCellBaseProps {\r\n  align?: keyof typeof tableCellAlignments;\r\n  variant?: tableCellVariants;\r\n  ellipsis?: boolean;\r\n  component?: React.ReactType<TableCellBaseProps>;\r\n}\r\n\r\nexport const Cell: React.FunctionComponent<TableCellProps> = ({\r\n                                                                     align = \"left\",\r\n                                                                     variant,\r\n                                                                     component,\r\n                                                                     ellipsis,\r\n                                                                     children,\r\n                                                                     ...other\r\n                                                                   }) => {\r\n  const theme = useTheme();\r\n  const { type: tableSectionType } = React.useContext(TableSectionContext);\r\n\r\n  const Component =\r\n    component || (tableSectionType === \"TableHead\" ? \"th\" : \"td\");\r\n\r\n  const type = variant || (tableSectionType === \"TableHead\" ? \"head\" : \"body\");\r\n\r\n  return (\r\n    <Component\r\n      css={[\r\n        {\r\n          zIndex: 4,\r\n          position: \"relative\",\r\n          border: \"1px solid\",\r\n          display: \"table-cell\",\r\n          padding: `${theme.spaces.xs} ${theme.spaces.xs}`,\r\n        },\r\n        ellipsis && {\r\n          whiteSpace: \"nowrap\",\r\n          textOverflow: \"ellipsis\",\r\n          overflow: \"hidden\"\r\n        },\r\n        type === \"head\"\r\n          ? {\r\n            fontWeight: 500,\r\n            fontSize: theme.fontSizes[0],\r\n            color: theme.colors.text.muted\r\n          }\r\n          : {\r\n            fontWeight: 400,\r\n            fontSize: theme.fontSizes[0],\r\n            color: theme.colors.text.default\r\n          },\r\n        tableCellAlignments[align]\r\n      ]}\r\n      scope=\"col\"\r\n      {...other}\r\n    >\r\n      {children}\r\n    </Component>\r\n  );\r\n};\r\n\r\n//可以通过interface来约定react组件props，还有必要用react的propTypes吗？\r\n//2个会报类型错误？TableCell.propTypes {align: PropTypes.oneOf( ； component: PropTypes.elementType,}\r\n/* 这个地方似乎是打包层次用到的。  报错？只好删除了。\r\n*可以只用typescript进行验证，也可以只用prop-types进行验证，也可以两者混搭进行验证，这个并没用严格限制。\r\n首先不管用typescript，还是prop-types，都只在开发模式下进行检查。 PropTypes是组件接收prop的约束。\r\n\r\nTableCell.propTypes = {\r\n  align: PropTypes.oneOf(Object.keys(tableCellAlignments)),\r\n  variant: PropTypes.oneOf([\"body\", \"head\"]),\r\n  component: PropTypes.elementType,\r\n  ellipsis: PropTypes.bool,\r\n  children: PropTypes.node\r\n};\r\n* */\r\n\r\n/**\r\n * TableBody - indicates the body (and scrollable) portion of our table.\r\n */\r\n\r\ntype TableBodyProps = React.HTMLAttributes<HTMLTableSectionElement>;\r\n\r\nexport function TableBody({ children, ...other }: TableBodyProps) {\r\n  return (\r\n    <tbody\r\n      css={{\r\n        display: \"table-row-group\"\r\n      }}\r\n      {...other}\r\n    >\r\n    <TableSectionContext.Provider value={{ type: \"TableBody\" }}>\r\n      {children}\r\n    </TableSectionContext.Provider>\r\n    </tbody>\r\n  );\r\n}\r\n\r\n/**\r\n * An ExpandingRow displays additional content about the row when clicked.\r\n */\r\n\r\ninterface ExpandingRowProps {\r\n  /** The expanded content to show when the user selects the row */\r\n  content: (close: () => void) => React.ReactNode | React.ReactNode;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const ExpandingRow: React.FunctionComponent<ExpandingRowProps> = ({\r\n                                                                           content,\r\n                                                                           children\r\n                                                                         }) => {\r\n  const theme = useTheme();\r\n  const [selected, setSelected] = React.useState(false);\r\n\r\n  function close() {\r\n    setSelected(false);\r\n  }\r\n\r\n  function open() {\r\n    setSelected(true);\r\n  }\r\n\r\n  return (\r\n    <TableBody>\r\n      <TableRow onClick={open}>{children}</TableRow>\r\n      {selected && (\r\n        <tr css={{ display: \"table-row\", height: \"100px\" }}>\r\n          <td\r\n            colSpan={React.Children.count(children)}\r\n            css={{\r\n              borderBottom: 0,\r\n              width: \"inherit\",\r\n              padding: 0,\r\n              position: \"relative\"\r\n            }}\r\n          >\r\n            <div\r\n              css={{\r\n                zIndex: 3,\r\n                width: \"inherit\",\r\n                position: \"relative\",\r\n                paddingBottom: \"24px\"\r\n              }}\r\n            >\r\n              <div\r\n                css={{\r\n                  position: \"relative\",\r\n                  whiteSpace: \"normal\",\r\n                  height: \"auto\",\r\n                  display: \"block\",\r\n                  paddingTop: \"24px\"\r\n                }}\r\n              >\r\n                {typeof content === \"function\" ? content(close) : content}\r\n              </div>\r\n            </div>\r\n            <Layer\r\n              css={{\r\n                position: \"absolute\",\r\n                top: \"-49px\",\r\n                left: \"-16px\",\r\n                right: \"-16px\",\r\n                borderRadius: theme.radii.md,\r\n                bottom: 0,\r\n                zIndex: 2\r\n              }}\r\n            >\r\n              {null}\r\n            </Layer>\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </TableBody>\r\n  );\r\n};\r\n\r\n/*\r\nExpandingRow.propTypes = {\r\n  content: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\r\n  children: PropTypes.node\r\n};\r\n*/\r\n\r\nexport const CCell: React.FunctionComponent<TableCellProps> =\r\n  ({\r\n     align = \"center\",\r\n     variant,\r\n     component,\r\n     ellipsis,\r\n     children,\r\n     ...other\r\n   }) =>\r\n  {\r\n\r\n    return (\r\n      Cell({\r\n        align,\r\n        variant,\r\n        component,\r\n        ellipsis,\r\n        children,\r\n        ...other\r\n      })\r\n    );\r\n  };\r\n\r\n/*\r\n被删除的部分 xxx.propTypes = {  };  是和rollup.js相关，一个模块打包工具/发布工具库，使用ES6的模块标准。\r\n*/\r\n\r\n//做点简化，免得看起来是一大堆重复性质代码：\r\nexport const RCell: React.FunctionComponent<TableCellProps> =\r\n  ({\r\n     align = \"right\",\r\n     variant,\r\n     component,\r\n     ellipsis,\r\n     children,\r\n     ...other\r\n   }) =>\r\n  {\r\n\r\n    return (\r\n      Cell({\r\n        align,\r\n        variant,\r\n        component,\r\n        ellipsis,\r\n        children,\r\n        ...other\r\n      })\r\n    );\r\n  };\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\utils\\tools.ts",[],"D:\\home\\sei\\front-end\\src\\maintenance\\comp\\base.tsx",["693","694"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, css, SerializedStyles } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  useTheme,\r\n  Text,\r\n  Button,SelectProps,\r\n  IconChevronUp,\r\n  IconChevronDown, Collapse, useCollapse,\r\n  Select, Layer, Check,\r\n} from \"customize-easy-ui-component\";\r\nimport PropTypes from \"prop-types\";\r\n//import { useUid } from \"customize-easy-ui-component/esm/Hooks/use-uid\";\r\nimport { Dispatch, SetStateAction } from \"react\";\r\n//import isEqual from \"lodash.isequal\";\r\nimport { MutableRefObject } from \"react\";\r\nimport { Ref } from \"react\";\r\n//import { Collapse, useCollapse } from \"../../comp/Collapse\";\r\n//import { useUid } from \"customize-easy-ui-component/src/Hooks/use-uid\";\r\n\r\n\r\nexport interface InspectRecordHeadColumnProps {\r\n  level: string;\r\n  bigLabel: string;\r\n  label: string;\r\n  tinyLabel?: string;\r\n  children: React.ReactNode;\r\n}\r\n//检验项目的开头几个列的布局\r\nexport const InspectRecordHeadColumn: React.FunctionComponent<InspectRecordHeadColumnProps> = ({\r\n                                                                       label,\r\n                                                                       children,\r\n                                                                       level,\r\n                                                                       bigLabel,\r\n                                                                        tinyLabel,\r\n                                                                       ...other\r\n                                                                     }) => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div css={{ display: 'flex', justifyContent: 'space-between'}}>\r\n          <Text  variant=\"h6\"> 检验类别 {level}  </Text>\r\n          <Text  variant=\"h6\"> 检验项目与内容及其要求 </Text>\r\n      </div>\r\n\r\n      <Text  variant=\"h6\"　css={{ textAlign: 'center' }}>\r\n          <Text  variant=\"subtitle\"　>\r\n            {bigLabel}\r\n          </Text>\r\n          <Text  variant=\"body\"　>\r\n            {label}\r\n          </Text>\r\n       </Text>\r\n\r\n        <Text className=\"Collapse__text\" variant=\"subtitle\">\r\n          {\r\n            tinyLabel?  tinyLabel : null\r\n          }\r\n          <hr/>\r\n\r\n          {children}\r\n\r\n        </Text>\r\n\r\n        <Text  variant=\"h4\"　>\r\n          查验结果\r\n        </Text>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\nInspectRecordHeadColumn.propTypes = {\r\n  level: PropTypes.string.isRequired,\r\n  bigLabel: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  tinyLabel: PropTypes.string,\r\n  children: PropTypes.node\r\n};\r\n\r\n\r\nexport interface InspectZoneHeadColumnProps {\r\n  label: string;\r\n  projects: string[];\r\n  children?: React.ReactNode;\r\n}\r\n//几个检验项目的聚合模式，1个下拉的分区装入多个项目。\r\nexport const InspectZoneHeadColumn: React.FunctionComponent<InspectZoneHeadColumnProps> = ({\r\n      label,\r\n      projects,\r\n      children,\r\n      ...other\r\n   }) => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div css={{ display: 'flex', justifyContent: 'space-around'}}>\r\n        <Text  variant=\"h6\">项目:{projects.join(',')}</Text>\r\n        <Text  variant=\"h6\">{label}</Text>\r\n      </div>\r\n      {children}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\nexport interface InspectItemHeadColumnProps {\r\n  level: string;\r\n  label: string;\r\n  children: React.ReactNode;\r\n}\r\n//下拉的分区装入多个项目, 之后单一个检验项目的开头\r\nexport const InspectItemHeadColumn: React.FunctionComponent<InspectItemHeadColumnProps> = ({\r\n      level,\r\n      label,\r\n      children,\r\n      ...other\r\n      }) => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div css={{ display: 'flex',justifyContent: 'space-around',marginTop:'1rem'}}>\r\n        <Text  variant=\"h6\">{label}</Text>\r\n        <Text  variant=\"h6\">检验类别 {level}  </Text>\r\n      </div>\r\n        <hr/>\r\n        {children}\r\n      <Text  variant=\"h4\"　>\r\n        查验结果\r\n      </Text>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n//React.useMemo(() =><RenderLoad/>, []); 用它加速显示组件是针对已经在当前界面显示或display：none的才管用;\r\n\r\nexport interface InspectRecordTitleProps {\r\n  //control参数实际是 useCollapse(show,true) 返回值。\r\n  //底下的?号是必不可少的。\r\n  control:  {　show?:boolean , buttonProps?: any , collapseProps?:{id:string,　show:boolean} 　};　\r\n  label: string;\r\n  children: React.ReactNode;\r\n  collapseNoLazy?:boolean;\r\n}\r\n//原始记录的列表项，很像菜单列表标题；　　包装成一个组件，以便　修改和复用。\r\nexport const InspectRecordTitle: React.FunctionComponent<InspectRecordTitleProps> = ({\r\n         control,\r\n         label,\r\n         collapseNoLazy=false,\r\n         children,\r\n         ...other\r\n      }) => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Layer elevation={\"sm\"}     css={{ padding: '0.25rem' }}>\r\n      <div>\r\n          <Button\r\n            variant=\"ghost\"\r\n            intent=\"primary\"\r\n            iconAfter={control.show  ? <IconChevronUp /> : <IconChevronDown />}\r\n            {...control.buttonProps}\r\n          >\r\n            {<Text variant=\"h5\" css={{color: control.show ? theme.colors.palette.red.base:undefined}}>{label}</Text>}\r\n          </Button>\r\n\r\n          <Collapse {...control.collapseProps}  noAnimated>\r\n              {children}\r\n\r\n              <div css={{textAlign: 'right',padding:'0.2rem'}}>\r\n              <Button\r\n                variant=\"ghost\"\r\n                intent=\"primary\"\r\n                iconAfter={control.show  ? <IconChevronUp /> : <IconChevronDown />}\r\n                {...control.buttonProps}\r\n              >\r\n                {control.show ? \"收起来\" : \"更多\"}\r\n              </Button>\r\n             </div>\r\n\r\n          </Collapse>\r\n      </div>\r\n    </Layer>\r\n  );\r\n};\r\n\r\nInspectRecordTitle.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n  control: PropTypes.shape({\r\n      show: PropTypes.bool.isRequired,\r\n      buttonProps: PropTypes.any.isRequired,\r\n      collapseProps: PropTypes.any.isRequired,\r\n  }).isRequired,　\r\n};\r\n\r\nexport interface SelectHookforkProps extends SelectProps {\r\n  topDivStyle?: SerializedStyles;\r\n}\r\n//太多重复了，自定义成一个新组件。\r\nexport const SelectHookfork: React.FunctionComponent<SelectHookforkProps> = ({\r\n                                                                 value,\r\n                                                                 onChange,\r\n                                                                 topDivStyle,\r\n                                                               ...other\r\n                                                             }) => {\r\n  return (\r\n    <Select inputSize=\"md\" css={{minWidth:'140px',fontSize:'2rem',padding:'0 1rem'}} divStyle={css`max-width:240px;`}\r\n            value={value}  onChange={onChange}  topDivStyle={topDivStyle}\r\n            {...other}\r\n    >\r\n      <option></option>\r\n      <option>√</option>\r\n      <option>▽</option>\r\n      <option>／</option>\r\n      <option>×</option>\r\n      <option>△</option>\r\n    </Select>\r\n  );\r\n};\r\n\r\n\r\nexport interface AntCheckProps\r\n            extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  label: string;\r\n  topDivStyle?: SerializedStyles;\r\n  defaultChecked?: boolean,\r\n  //外部传递来的状态宿主，点击改变inp。\r\n  inp: any,\r\n  setInp: Dispatch<SetStateAction<any>>,\r\n  //子项目名字\r\n  item: string;\r\n  //父项目名字，若sup为空，item直接挂到inp底下第一层属性，否则嵌套在sup底下，支持2两层楼属性。\r\n  sup?: string;\r\n}\r\n//用来简化重复的部分，就像是一个语法糖。\r\nexport const AntCheck: React.FunctionComponent<AntCheckProps> = ({\r\n              label,\r\n              id,\r\n              topDivStyle,\r\n              defaultChecked=false,\r\n              inp,\r\n              setInp,\r\n              sup,\r\n              item,\r\n              ...other\r\n}) => {\r\n\r\n  //inp属性inp['witnessConfirm']=false可直接改，但做 inp['tool']['vernierCaliper'] = !(inp['tool']['vernierCaliper'])就不生效？!!\r\n  //     defaultChecked={ defaultChecked  } err but not both). Decide between using a controlled or uncontrolled input element\r\n\r\n  return (\r\n      <Check label={label}\r\n             checked={ (sup?  inp?.[sup]?.[item]  :  inp?.[item] ) || defaultChecked }\r\n             onChange={e => {\r\n                   setInp( (sup&& inp&&{ ...inp,  [sup]: { ...inp[sup],  [item]  :   !( inp[sup]  &&  inp[sup][item] )   }    } )\r\n                           ||  (sup&& { [sup]: { [item] :  !defaultChecked }  } )\r\n                           ||  (inp&&{ ...inp,   [item]  :  ! inp[item] } )\r\n                           ||  { [item]  :  !defaultChecked }   )\r\n                 }  }\r\n             topDivStyle={topDivStyle}\r\n      />\r\n  );\r\n};\r\n\r\ninterface IndentationLayTextProps  {\r\n  title?: string | React.ReactNode;\r\n  id?: string;\r\n  children?: React.ReactNode;\r\n  component?: React.ElementType<any>;\r\n}\r\n//子元素缩进排版: 文本段落，缩进的。\r\nexport const IndentationLayText: React.FunctionComponent<IndentationLayTextProps> = ({\r\n                 children,\r\n                 title,\r\n                 id,\r\n                 component :Component= \"div\",\r\n                 ...other\r\n               }) => {\r\n  const theme = useTheme();\r\n  return (\r\n    <Component\r\n      className=\"Indentation\"\r\n      css={{\r\n      }}\r\n      {...other}\r\n    >\r\n      <Text\r\n        className=\"Indentation__title\"\r\n        id={id}\r\n        css={{ margin: 0 }}\r\n        variant=\"h6\"\r\n      >\r\n        {title}\r\n      </Text>\r\n      <div css={{ paddingLeft: '1rem',\r\n            [theme.mediaQueries.sm]: {\r\n              paddingLeft: '0.5rem'\r\n            },\r\n            [theme.mediaQueries.lg]: {\r\n              paddingLeft: '2rem'\r\n            }\r\n           }}>\r\n        {children}\r\n      </div>\r\n    </Component>\r\n  );\r\n};\r\n\r\n\r\n//par代表整体原后端数据，itemVal是当前条目的截取部分数据。\r\n//把par 直接保存到了useRef做成的 那个不可变previousState当中。\r\n//总的show按钮各分区项目show的控制，以单一个逻辑变量无法完全正确操纵！必须传递然后合并成独立一个show逻辑。\r\nexport interface ItemControlProps {\r\n  ref: React.Ref<any>;\r\n  //  show: boolean;\r\n  //par: any;   改成回调模式，上级深度控制下级，去除组件参数，避免多头受控，可能死循环。   par={},\r\n  //接受par输入的过滤器，回调 过滤有用数据。\r\n  filter: (par: any) => {};\r\n}\r\n//后端数据没有变化的，前端输入正在导致记录变化的，要维持以正在交互的输入为准，等待保存给后端。\r\n//par被上级组件利用回调钩子模式接管控制后，就不能在这里多头设置，否则死循环。\r\nexport　function useItemControlAs({\r\n                             ref=null,\r\n                             filter=null }\r\n                          : ItemControlProps\r\n) {\r\n  const eos =useCollapse(false,true);\r\n  const [inp, setInp] = React.useState(null);\r\n  //用回调钩子setShow来替换；原先的show参数下传配合在useCollapse内部useEffect(() [defaultShow] 做修正方式。\r\n  //回调钩子的模式。在上层父组件去统一调用本函数的，这里仅仅生成函数的代码但还未执行。\r\n  const onParChange = React.useCallback(function (par) {\r\n    //console.log(\"onParChange 执行 par=\", par, \"itemVal=\" ,filter(par));\r\n    setInp(filter(par));\r\n  }, [filter]);\r\n\r\n  React.useImperativeHandle( ref,() => ({ inp ,setShow:eos.setShow, onParChange}), [inp, onParChange,eos.setShow] );\r\n    //不直接用import { usePrevious } from \"./Hooks/previous\" 减少render次数。\r\n  return {eos, setInp, inp};\r\n}\r\n\r\n\r\n\r\n//各个检验单项子组件暴露给父组件的接口数据。\r\nexport interface InternalItemHandResult {\r\n  inp: any;\r\n}\r\n//各个检验单项\r\nexport interface InternalItemProps  extends React.HTMLAttributes<HTMLDivElement>{\r\n  //par?: any;        //父组件往子组件传数据\r\n  //show?: boolean;\r\n  ref?: any;\r\n}\r\n//动态载入的模板组件, 所有参数都必须？可选的，否则报错。\r\nexport interface TemplateViewProps {\r\n  inp?: any;\r\n  showAll?: boolean;\r\n  ref?: any;\r\n}\r\n\r\n\r\n//Hook编译报错，不允许直接套数组()=> 回调函数模式创建；需要包裹一层Component()规避检查。\r\n//若本组件没有重新加载，{count}数组长度变化，会导致ｈｏｏｋ报错。  重命名也逃不掉报错。\r\n//count=下拉组件亦即独立展示项目个数；\r\n//HOOK机制要求，useXXX() 次数与顺序都不允许变化。HOOK报错。\r\nexport function useProjectListAs({count}) {\r\n  const array= new Array(count).fill(null);\r\n  function WrappedComp(i: number) {\r\n        return React.useRef<InternalItemHandResult>(null);\r\n  };\r\n  return React.useRef<MutableRefObject<InternalItemHandResult>[] | null>(array.map((i) => WrappedComp(i) ) );\r\n}\r\n\r\n//自定义Ｈｏｏｋ的 例子。\r\n/*const useValues = () => {\r\n  const [values, setValues] = React.useState({  });\r\n  const itBinds=useProjectListAs({count: 8});\r\n  const updateData = React.useCallback(\r\n    (nextData) => {    },    [values],\r\n  );\r\n  return [values, updateData, itBinds];\r\n};\r\n*/\r\n\r\n","D:\\home\\sei\\front-end\\src\\SearchBox.tsx",["695"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  InputGroup,\r\n  Input,\r\n  useTheme,\r\n  VisuallyHidden,\r\n  Button,\r\n  useResponsiveContainerPadding,\r\n  IconSearch,\r\n} from \"customize-easy-ui-component\";\r\n\r\nexport interface SearchBoxProps {\r\n  setQuery: React.Dispatch<React.SetStateAction<string>>;\r\n  query: string;\r\n  label?: string;\r\n}\r\n\r\nexport const SearchBox: React.FunctionComponent<SearchBoxProps> = ({\r\n  query,\r\n  label = \"搜索吧 all recipes\",\r\n   setQuery,\r\n   ...other\r\n}) => {\r\n  const theme = useTheme();\r\n  const responsiveContainerPadding = useResponsiveContainerPadding();\r\n  return (\r\n    <form\r\n      css={{\r\n        margin: 0,\r\n        position: \"relative\"\r\n      }}\r\n      onSubmit={e => e.preventDefault()}\r\n    >\r\n      <InputGroup\r\n        css={{ margin: 0, position: \"relative\" }}\r\n        hideLabel\r\n        label={label}\r\n      >\r\n        <Input\r\n          type=\"search\"\r\n          inputSize=\"md\"\r\n          autoComplete=\"off\"\r\n          css={[\r\n            {\r\n              height: \"60px\",\r\n              textAlign: \"left\",\r\n              border: \"none\",\r\n              borderBottom: \"1px solid\",\r\n              borderColor: theme.colors.border.default,\r\n              borderRadius: 0,\r\n              WebkitAppearance: \"none\",\r\n              // background: \"transparent\",\r\n              boxShadow: \"none\",\r\n              \":focus\": {\r\n                boxShadow: \"none\",\r\n                backgroundColor: theme.colors.background.tint1\r\n              }\r\n            },\r\n            responsiveContainerPadding\r\n          ]}\r\n          {...other}\r\n          value={query}\r\n          onChange={e => setQuery(e.target.value)}\r\n          placeholder={label}\r\n        />\r\n      </InputGroup>\r\n      <VisuallyHidden>\r\n        <Button type=\"submit\">搜索</Button>\r\n      </VisuallyHidden>\r\n      <IconSearch\r\n        aria-hidden\r\n        color={theme.colors.scales.gray[6]}\r\n        css={{\r\n          display: query ? \"none\" : \"block\",\r\n          position: \"absolute\",\r\n          right: theme.spaces.lg,\r\n          top: \"50%\",\r\n          transform: \"translateY(-50%)\",\r\n          zIndex: 10\r\n        }}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n","D:\\home\\sei\\front-end\\src\\device\\DeviceDetail.tsx",["696","697"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//import firebase from \"firebase/app\";\r\nimport { ComposeDevice } from \"./ComposeDevice\";\r\nimport { useSession } from \"../auth\";\r\n//import { useDocument } from \"react-firebase-hooks/firestore\";\r\nimport { useTheme, Text } from \"customize-easy-ui-component\";\r\nimport {  useRoute } from \"wouter\";\r\nimport { AttachedTask } from \"./AttachedTask\";\r\n\r\n\r\ninterface DeviceDetailProps {\r\n  id: string;\r\n  eqp: any;\r\n}\r\nexport const DeviceDetail: React.FunctionComponent<DeviceDetailProps> = ({ id, eqp }) => {\r\n  const theme = useTheme();\r\n  const {user,} = useSession();\r\n  //设备 外部关联的 任务。\r\n  const [matched, params] = useRoute(\"/device/:id/task/:taskId*\");\r\n  //const showingRecipe = matched && params.taskId;\r\n  //var   value=null;\r\n  //不要改组件的props带来的变量。\r\n  //第一个render这里loading=true，要到第二次再执行到了这里才会有data数据!\r\n  console.log(\"刚DeviceDetail经过eqp=\",eqp,\"进行中id=\",id,\"showingRecipe=\",matched,params);\r\n\r\n  if(eqp) {\r\n    return (\r\n      <div>\r\n        <ComposeDevice\r\n          readOnly={true}\r\n          id={id}\r\n          //editable={true || eqp.createdBy.id === user.uid}\r\n          //defaultIngredients={ JSON.parse( value.ingredients ) }\r\n          dt={eqp}\r\n        />\r\n\r\n        <AttachedTask\r\n          readOnly={true}\r\n          id={id}\r\n          editable={true || eqp.createdBy.id === user.uid}\r\n          defaultTitle={eqp.title}\r\n          eqp={eqp}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <Text variant=\"h5\">暂时查不到该设备</Text>;\r\n};\r\n\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\device\\task\\AddToTask.tsx",["698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//import { Value } from \"slate\";\r\nimport {\r\n  Navbar,\r\n  Toolbar,\r\n  Text,\r\n  Button,\r\n  IconButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useTheme,\r\n  useToast,\r\n  LayerLoading,\r\n  Container,\r\n  ResponsivePopover,\r\n  IconMoreVertical,\r\n  IconArrowLeft, Input, InputGroupLine\r\n} from \"customize-easy-ui-component\";\r\nimport {   useAddToTask } from \"../db\";\r\n//import { useSession } from \"../auth\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Link as RouterLink, Link } from \"wouter\";\r\nimport { ContainLine, TransparentInput } from \"../../comp/base\";\r\n//import { awaitExpression } from \"@babel/types\";\r\n\r\n//[HOOK限制]按钮点击函数内部直接上toast()或toaster.notify()很可能无法正常显示。而放在函数组件顶层render代码前却能正常。\r\n\r\n\r\nexport interface ComposeProps {\r\n  id: string;\r\n  defaultTitle?: string;\r\n  defaultImage?: string;\r\n  defaultDescription?: string;\r\n  defaultIngredients?: any[];\r\n  readOnly?: boolean;\r\n  editable?: boolean;\r\n  defaultCredit?: string;\r\n  dt?:any;\r\n  params?:any;   //上级路由器传入的参数。\r\n}\r\n//这种路由写法：params:{ id }是空的，不会接收上级<Route />路由器给的:id。\r\nexport const AddToTask: React.FunctionComponent<ComposeProps> = ({\r\n  readOnly,\r\n  editable,\r\n  defaultCredit = \"\",\r\n  defaultDescription,\r\n  defaultImage,\r\n  defaultIngredients,\r\n  defaultTitle = \"\",\r\n  dt=null,\r\n  id\r\n}) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n//  const ref = React.useRef(null);\r\n//  const {user,} = useSession();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [editing, setEditing] = React.useState(!readOnly);\r\n  const [content, ] = React.useState(() => {\r\n    return defaultDescription\r\n      ? ''\r\n      : null;\r\n  });\r\n  const [image, ] = React.useState(defaultImage);\r\n\r\n  const [title, setTitle] = React.useState(defaultTitle);\r\n\r\n  const [credit, ] = React.useState(defaultCredit);\r\n  //ingredients 原来是[]数组，改成对象。ingredients.length无定义了。\r\n  const [ingredients, setIngredients] = React.useState<any>( {dep:'二部'　} );\r\n\r\n  console.log(\"AddToTask页面刷新id:\", id ,\"dt=\",dt);\r\n\r\n  const {result, submit:updateFunc, error:updateError, } = useAddToTask({\r\n    dep: ingredients && ingredients.dep,\r\n    devs: id, date:ingredients && ingredients.date,\r\n    });\r\n\r\n  async function updateRecipe(\r\n    id: string\r\n  ) {\r\n    let yes= result && result.id;\r\n    setLoading(true);\r\n    try {\r\n      await updateFunc();\r\n      //等待后端服务器处理完成才能继续运行下面的代码。可长时间等待，挂着页面10分钟都允许。\r\n       setEditing(false);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      //这里先要setLoading(),还有err.message而非err；否则很可能也能导致？setMessage:toast()显示异常。\r\n      setLoading(false);\r\n      toast({\r\n        title: \"后端请求错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      //很多错误是在这里捕获的。\r\n      console.log(\"useAddToTask返回 捕获err\", err);\r\n    }\r\n    //这里无法获得result值，就算所在组件顶层已经获得result值，这里可能还是await () 前那样null;\r\n     console.log(\"生成任务返回了＝\", result,\"yes=\", yes);\r\n    toast({\r\n      title: \"生成任务返回了\",\r\n      subtitle: '加入，dev ID＝'+id,\r\n      intent: \"info\"\r\n    });\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\",\r\n        }\r\n      }}\r\n    >\r\n      <Helmet title={\"新增检验任务\"} />\r\n      <div\r\n        css={{  //控制小屏时的导航条底下的整个页面滚动。\r\n          flex: 1,\r\n          [theme.mediaQueries.md]: {\r\n            height: \"auto\",\r\n            display: \"block\",\r\n          }\r\n        }}\r\n      >\r\n        <div>\r\n\r\n          <Container>\r\n            <div\r\n              css={{\r\n                display: 'flex',\r\n                alignItems:'center',\r\n                justifyContent:'center',\r\n                minHeight: '75vh',\r\n                [theme.mediaQueries.md]: {\r\n                  paddingTop: theme.spaces.lg,\r\n                  paddingBottom: theme.spaces.lg,\r\n                  minHeight:'unset',\r\n                }\r\n              }}\r\n            >\r\n              {ingredients && (\r\n                <div\r\n                  css={{\r\n                  width:'100%',\r\n                }}\r\n                >\r\n                  <Text variant=\"h5\">任务明细信息</Text>\r\n\r\n                      <div key={1}>\r\n                        {editing ? (\r\n                        <div>\r\n                          <Text  variant=\"h6\">任务号已经有的要填（合并任务），否则自动生成新的任务号；任务到期日必填</Text>\r\n                          <ContainLine display={'任务号'}>\r\n                              <TransparentInput\r\n                                autoFocus={true}\r\n                                placeholder=\"已有任务号的可填，也可自动生成\"\r\n                                value={ingredients.task}\r\n                                onChange={e => {\r\n                                  setIngredients( {\r\n                                    ...ingredients,\r\n                                    task: e.target.value\r\n                                  });\r\n                                }}\r\n                              />\r\n                          </ContainLine>\r\n                          <ContainLine display={'部门号'}>\r\n                            <TransparentInput\r\n                              autoFocus={true}\r\n                              placeholder=\"输入部门号\"\r\n                              value={ingredients.dep}\r\n                              onChange={e => {\r\n                                setIngredients( {\r\n                                  ...ingredients,\r\n                                  dep: e.target.value\r\n                                });\r\n                              }}\r\n                            />\r\n                          </ContainLine>\r\n                          <ContainLine display={'任务到期日期'}>\r\n                            <TransparentInput\r\n                              type='date'\r\n                              value={ingredients.date||''}\r\n                              onChange={e => {\r\n                                setIngredients( {\r\n                                  ...ingredients,\r\n                                  date: e.target.value\r\n                                });\r\n                              }}\r\n                            />\r\n                          </ContainLine>\r\n                        </div>\r\n                        )\r\n                        :\r\n                        <Text variant=\"h6\">生成的新任务ID： {result?.id}</Text>\r\n                        }\r\n                      </div>\r\n\r\n\r\n                </div>\r\n              )}\r\n\r\n\r\n            </div>\r\n            {editing && <Button size={'lg'}\r\n                  intent=\"primary\"\r\n                  disabled={loading || !(ingredients?.date)}\r\n                  css={{ marginLeft: theme.spaces.sm }}\r\n                  onPress={() => {\r\n                    if(id) updateRecipe(id);\r\n                  }}\r\n                >\r\n                  为该设备添加任务\r\n                </Button>\r\n            }\r\n          </Container>\r\n\r\n        </div>\r\n      </div>\r\n      <LayerLoading loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\n","D:\\home\\sei\\front-end\\src\\device\\AttachedTask.tsx",["717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, Global } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n\r\nimport {\r\n  Navbar,\r\n  Toolbar,\r\n  Input,\r\n  Text,\r\n  IconButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useTheme,\r\n  InputBaseProps,\r\n  useToast,\r\n  LayerLoading,\r\n  Container,\r\n  ResponsivePopover,\r\n  IconMoreVertical,\r\n  MenuDivider, IconPackage, Button, IconChevronDown\r\n} from \"customize-easy-ui-component\";\r\n\r\n//import { useSession } from \"../auth\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport { Link,  useLocation } from \"wouter\";\r\nimport { Link as RouterLink } from \"wouter\";\r\nimport { useCancellationTask } from \"./task/db\";\r\n\r\n\r\ninterface AttachedTaskProps {\r\n  id?: string;\r\n  defaultTitle?: string;\r\n  defaultImage?: string;\r\n  defaultDescription?: string;\r\n  defaultIngredients?: any[];\r\n  readOnly?: boolean;\r\n  editable?: boolean;\r\n  defaultCredit?: string;\r\n  eqp?:any;\r\n}\r\n\r\nexport const AttachedTask: React.FunctionComponent<AttachedTaskProps> = ({\r\n  readOnly,\r\n  id,\r\n  editable,\r\n  defaultCredit = \"\",\r\n  defaultDescription,\r\n  defaultImage,\r\n  defaultIngredients,\r\n  defaultTitle = \"\",\r\n  eqp=null,\r\n}) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  const eqpId=id;\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [editing, setEditing] = React.useState(!readOnly);\r\n  const [image, ] = React.useState(defaultImage);\r\n  const [title, setTitle] = React.useState(defaultTitle);\r\n  const [taskId, setTaskId] = React.useState(null);\r\n  //直接取得EQP关联的task字段的对象。\r\n  const {task} =eqp;\r\n // const [ingredients, setIngredients] = React.useState<any>( dt||{} );\r\n  const [, setLocation] = useLocation();\r\n  const {result, submit:updateFunc, } = useCancellationTask({\r\n    taskid: taskId, reason:'测试期直接删'\r\n  });\r\n  //console.log(\"页面刷新钩子AttachedTask entry=\",　\",设备id=\"+id+\";task=\",task,\";eqp=\",eqp);\r\n\r\n  async function handleDelete(id: string) {\r\n    try {\r\n      await updateFunc();\r\n    } catch (err) {\r\n      toast({\r\n        title: \"后端报错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      return;\r\n    }\r\n    setLocation(\"/device/\"+eqpId,  { replace: true } );\r\n  }\r\n\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\"\r\n        }\r\n      }}\r\n    >\r\n      <hr/>\r\n      <Text\r\n        css={{\r\n          flex: 1,\r\n          textAlign: \"center\",\r\n          [theme.mediaQueries.md]: {\r\n            textAlign: \"left\"\r\n          }\r\n        }}\r\n        wrap={false}\r\n        variant=\"h5\"\r\n        gutter={false}\r\n      >\r\n        {eqp.cod}关联活动任务\r\n      </Text>\r\n\r\n      <div\r\n        css={{  //控制小屏时的导航条底下的整个页面滚动。\r\n          flex: 1,\r\n          [theme.mediaQueries.md]: {\r\n            flex: \"none\"\r\n          }\r\n        }}\r\n      >\r\n        <div>\r\n\r\n          <Container>\r\n            <div\r\n              css={{\r\n                paddingTop: theme.spaces.lg,\r\n                paddingBottom: theme.spaces.lg\r\n              }}\r\n            >\r\n              {task && task.map(each => {\r\n                let myIsp= each.isps?.find((it,i)=>{return  it.dev?.id===eqp.id });\r\n                //let hasIsp= (myIsp!==null);  不好使！　undefined的！\r\n                let hasIsp= !!myIsp;\r\n                console.log(\"刷新 奇怪啊hasIsp:\", hasIsp,\",myIsp=\",myIsp,\";each.isps=\", each.isps);\r\n                return <div key={each.id}>\r\n                        {\r\n                          (\r\n                          <div\r\n                            css={{\r\n                              backgroundColor: false\r\n                                ? theme.colors.palette.blue.lightest\r\n                                : \"transparent\",\r\n                              display: \"flex\",\r\n                              marginBottom: theme.spaces.xs,\r\n                              justifyContent: \"space-between\",\r\n                              [theme.mediaQueries.md]: {\r\n                                width: \"600px\"\r\n                              }\r\n                            }}\r\n                          >\r\n                            <Text\r\n                              css={{\r\n                                paddingRight: theme.spaces.xs,\r\n                                backgroundColor: false\r\n                                  ? theme.colors.palette.blue.lightest\r\n                                  : \"white\"\r\n                              }}\r\n                            >\r\n                            任务号 {each.id}\r\n                            </Text>\r\n\r\n                            <Text\r\n                              css={{\r\n                                paddingLeft: theme.spaces.xs,\r\n                                backgroundColor: false\r\n                                  ? theme.colors.palette.blue.lightest\r\n                                  : \"white\"\r\n                              }}\r\n                            >\r\n                              状态：{each.status||''}\r\n                            </Text>\r\n                            {hasIsp? <Link  to={\"/inspect/\" + myIsp.id}>\r\n                                {myIsp? '检验ISP详情' : '逻辑异常'}\r\n                              </Link>\r\n                               :\r\n                              <Link  to={\"/device/\"+eqp.id+\"/task/\"+each.id+'/dispatch'}>\r\n                                先要去派工\r\n                              </Link>\r\n                            }\r\n                            <ResponsivePopover\r\n                              content={\r\n                                <MenuList>\r\n                                  <MenuItem disabled={hasIsp} onPress={ async () => {\r\n                                      await setTaskId(each.id);\r\n                                      handleDelete(each.id)\r\n                                    }\r\n                                  }>注销任务\r\n                                  </MenuItem>\r\n                                  <MenuItem contentBefore={<IconPackage />}  disabled={hasIsp}\r\n                                    onPress={() => {\r\n                                       setLocation(\"/device/\"+eqp.id+\"/task/\"+each.id+'/dispatch', { replace: true });\r\n                                     } }>\r\n                                  有任务就派工给检验员\r\n                                  </MenuItem>\r\n                                </MenuList>\r\n                              }\r\n                            >\r\n                              <Button  size=\"md\" iconAfter={<IconChevronDown />} variant=\"ghost\" css={{whiteSpace:'unset'}}>\r\n                                {`${each.date||''}`}\r\n                              </Button>\r\n                            </ResponsivePopover>\r\n                          </div>\r\n                        )\r\n                        }\r\n                      </div>\r\n              } )}\r\n\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n      <LayerLoading loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\n","D:\\home\\sei\\front-end\\src\\unit\\DetailedGuide.tsx",["735","736","737","738","739","740","741","742","743","744"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, css } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Navbar,\r\n  Toolbar,\r\n  Text,\r\n  Button,\r\n  IconButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useTheme,\r\n  useToast,\r\n  LayerLoading,\r\n  Container,\r\n  ResponsivePopover,\r\n  IconMoreVertical,\r\n  IconArrowLeft, IconArrowRight, Select, IconPackage\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport {Helmet} from \"react-helmet\";\r\nimport { Link as RouterLink, Route, Switch, useLocation, useRoute, Redirect } from \"wouter\";\r\nimport { ContainLine, TransparentInput } from \"../comp/base\";\r\nimport { useDeviceDetail } from \"./db\";\r\nimport { AddToTask } from \"./task/AddToTask\";\r\nimport { DeviceDetail } from \"./DeviceDetail\";\r\nimport { ComposeDevice } from \"./ComposeDevice\";\r\nimport { useInvalidateEQP } from \"./db\";\r\nimport { Path } from \"wouter/preact\";\r\n\r\n\r\ninterface DetailedGuideProps {\r\n  id?: string;   　//来自上级<Route path={\"/device/:id/\"} component={} />给的:id。\r\n  company?:boolean;\r\n}\r\n//右半边页面\r\nexport const DetailedGuide: React.FunctionComponent<DetailedGuideProps> = ({\r\n   id: parId, company=false\r\n}) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  //原型是[Path, (to: Path, options?: { replace?: boolean }) => void]\r\n  const [location, setLocation] = useLocation();\r\n\r\n  const [match, params] = useRoute(\"/unit/:id/:rest*\");\r\n  let id =(match && params.id);\r\n  console.log(\"DetailedGuide当前的查询 params=\", params);\r\n  if(id==='new')  id=null;\r\n\r\n  const { loading ,items: dtvalue, error ,refetch} = useDeviceDetail( { id , company } );\r\n  const {result, submit:updateFunc, } = useInvalidateEQP({\r\n      whichEqp: id, reason:'测试期',\r\n  });\r\n\r\n  async function updateRecipe(id: string) {\r\n    try {\r\n      await updateFunc();\r\n    } catch (err) {\r\n      toast({\r\n        title: \"后端报错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      return;\r\n    }\r\n    toast({\r\n      title: \"返回了\",\r\n      subtitle: '作废 ID＝'+id,\r\n      intent: \"info\"\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\",\r\n        }\r\n      }}\r\n    >\r\n      <Navbar\r\n        css={{\r\n          zIndex: theme.zIndices.sticky,\r\n          backgroundColor: \"white\",\r\n          boxShadow: theme.shadows.sm,\r\n          position: \"sticky\",\r\n          top: 0,\r\n          [theme.mediaQueries.md]: {\r\n            position: \"static\"\r\n          }\r\n        }}\r\n      >\r\n        <Toolbar\r\n          css={{\r\n            alignItems: \"center\",\r\n            display: \"flex\"\r\n          }}\r\n        >\r\n          <RouterLink to={\"/unit/\"} >\r\n            <IconButton\r\n              icon={<IconArrowLeft />}\r\n              label=\"后退\"\r\n              variant=\"ghost\"\r\n              css={{\r\n                marginRight: theme.spaces.sm,\r\n                [theme.mediaQueries.md]: {\r\n                  display: \"none\"\r\n                }\r\n              }}\r\n            />\r\n          </RouterLink>\r\n           <Text\r\n              css={{\r\n                flex: 1,\r\n                textAlign: \"center\",\r\n                [theme.mediaQueries.md]: {\r\n                  textAlign: \"left\"\r\n                }\r\n              }}\r\n              wrap={false}\r\n              variant=\"h5\"\r\n              gutter={false}\r\n            >\r\n             {dtvalue?.id? '单位': company? '企业':'个人'}的ID号：{dtvalue?.id || id }\r\n           </Text>\r\n          <div\r\n            css={{\r\n            display: 'inline-flex',\r\n          }}\r\n          >\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem contentBefore={<IconPackage />}  onPress={() => {\r\n                      setLocation(\"/unit/\"+id+\"/addTask\", { replace: false });\r\n                   } }>\r\n                    生成新任务\r\n                  </MenuItem>\r\n                  <MenuItem onPress={ async () => {\r\n                       }\r\n                    }>其他功能\r\n                  </MenuItem>\r\n                  <MenuItem onPress={() => updateRecipe(id) }>法定设备导入后的拆除报废</MenuItem>\r\n                  <MenuItem onPress={() => updateRecipe(id) }>委托设备不再维护时删除</MenuItem>\r\n                  <MenuItem onPress={() => refetch( {} )}>刷新获最新数据</MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <IconButton\r\n                css={{ marginLeft: theme.spaces.sm}}\r\n                variant=\"ghost\"\r\n                icon={<IconMoreVertical />}\r\n                label=\"菜单\"\r\n              />\r\n            </ResponsivePopover>\r\n          </div>\r\n        </Toolbar>\r\n      </Navbar>\r\n\r\n      <div\r\n        css={{  //控制小屏时的导航条底下的整个页面滚动。\r\n          flex: 1,\r\n          [theme.mediaQueries.md]: {\r\n            height: \"auto\",\r\n            display: \"block\",\r\n          }\r\n        }}\r\n      >\r\n        <div>\r\n\r\n          <Container>\r\n            <div\r\n              css={{\r\n                display: 'flex',\r\n                alignItems:'center',\r\n                justifyContent:'center',\r\n                minHeight: '85vh',\r\n                [theme.mediaQueries.md]: {\r\n                  paddingTop: theme.spaces.lg,\r\n                  paddingBottom: theme.spaces.lg,\r\n                  minHeight:'unset',\r\n                }\r\n              }}\r\n            >\r\n                <div\r\n                  css={{\r\n                  width:'100%',\r\n                }}\r\n                >\r\n                  {/*三级路由了： 嵌套再嵌套了一层 布局级别的组件*/}\r\n                  {id && error && error.message}\r\n                  <ThirdRouterContent id={id} device={dtvalue} />\r\n\r\n                  <div css={{ marginTop: theme.spaces.sm }}>\r\n                    <RouterLink to={`/device/`}>\r\n                      <Button\r\n                        size=\"lg\" noBind\r\n                        intent=\"primary\"\r\n                        iconAfter={<IconArrowRight />}\r\n                      >\r\n                        找其名下设备\r\n                      </Button>\r\n                    </RouterLink>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n      <LayerLoading loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\ninterface ThirdRouterProps {\r\n  id?: string;\r\n  device: any;\r\n}\r\n//为了能立刻刷新操作反馈页面，引入三级路由，把数据获取放在了公共上级组件去，某页面操作的同时能更新查询另外页面显示立即反馈到。\r\nfunction ThirdRouterContent({id, device}: ThirdRouterProps) {\r\n  return (\r\n   <React.Fragment>\r\n    <Switch>\r\n      <Route path={\"/unit/new\"}>\r\n          <ComposeDevice  readOnly={false}/>\r\n      </Route>\r\n      <Route path={\"/unit/:id/addTask\"}>\r\n        <AddToTask id={id} dt={device}/>\r\n      </Route>\r\n      <Route path={`/unit/:id`}>\r\n          <DeviceDetail id={id} eqp={device}/>\r\n      </Route>\r\n      <Route path={`/unit/:id/company`}>\r\n        <DeviceDetail id={device?.id} eqp={device}/>\r\n      </Route>\r\n      <Route path={`/unit/:id/person`}>\r\n        <DeviceDetail id={device?.id} eqp={device}/>\r\n      </Route>\r\n      <Route path=\"/:rest*\">没该URL对应third-u内容</Route>\r\n    </Switch>\r\n  </React.Fragment>\r\n  );\r\n}\r\n","D:\\home\\sei\\front-end\\src\\unit\\UnitList.tsx",["745","746","747","748","749","750","751","752","753"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  Avatar,\r\n  IconButton,\r\n  Button,\r\n  Popover,\r\n  MenuList,\r\n  Stack,\r\n  useTheme,\r\n  IconPlus,\r\n  IconMoreVertical,\r\n  StackTitle,\r\n  Skeleton, MenuItem, MenuDivider, IconPackage, ResponsivePopover\r\n} from \"customize-easy-ui-component\";\r\nimport { SearchDeviceBox } from \"./SearchDeviceBox\";\r\nimport {  usePaginateQueryDevice,  } from \"./db\";\r\nimport { StackItem, StackContext } from \"react-gesture-stack\";\r\nimport {SearchTitle} from \"../comp/base\"\r\nimport { useLocation } from \"wouter\";\r\nimport { useEffect } from \"react\";\r\nimport { useInView } from 'react-intersection-observer'\r\n\r\n//接口参数类型\r\ninterface ResponseLikeAlgoliasearch<T=any> {\r\n  hits: T[];\r\n  //processingTimeMS: number;\r\n}\r\n\r\ninterface DeviceListProps {company?: boolean\r\n}\r\n\r\nexport const UnitList: React.FunctionComponent<\r\n  DeviceListProps\r\n> = ( {company=false} ) => {\r\n  const theme = useTheme();\r\n  const [, setLocation] = useLocation();\r\n  //搜索user的输入:\r\n  const [query, setQuery] = React.useState(\"\" as any);\r\n\r\n\r\n  //状态管理　relation＝当前显示的或者按钮点击事件产生,关注的user是谁。\r\n  const [relation, ] = React.useState(null);\r\n  //不能用var refLsize=0;否则refLsize一直是===0；另外可以用等价方式useState来计数。　\r\n  const refLsize = React.useRef(null);\r\n\r\n\r\n  /*根据options选择结果，来组织后端的查询参数。\r\n  const condition = React.useMemo( () =>{\r\n    let condition = { company: company } as any;\r\n    if(typeof query===\"object\") {\r\n      const {\r\n        factoryNo, task: { dep } = '',\r\n        isps: { ispMen: { username } = '' } = ''\r\n      } = query;\r\n    }\r\n    else{\r\n      condition= {...condition, name:query }\r\n    }\r\n    return condition;\r\n  }, [query]);\r\n  */\r\n\r\n  const [filter, setFilter] = React.useState({unit: {cod:'%'},\r\n    offset:0,limit:3\r\n  } as any);\r\n\r\n  const {\r\n    loading,\r\n    items: devicesFind,\r\n    fetchMore: loadMore　,refetch\r\n  } =usePaginateQueryDevice(filter);\r\n\r\n  //界面轮播 setIndex切换显示界面；   //index不是组件外部那一个同名index；\r\n  const [index, setIndex] = React.useState(0);\r\n\r\n  //let big=\"先有派出TASK，后来才会生成ISP\\n\" ;\r\n // const [option, setOption] = useHistoryState(\"\", \"option\");\r\n  //let history = useHistory();\r\n  //navigate(state:{ })传递方式，数据可以很大，就是参数不会显示在URL当中会引起歧义。bug：可能需要刷新才正常。\r\n\r\n  //根据query的改变来重新查询哪。\r\n  React.useEffect(() => {\r\n    let filtercomp={as: {company: company, name:query },\r\n      offset:0,\r\n      limit:4,\r\n    };\r\n    //界面查询接口参数列表\r\n    console.log(\"即可搜 =filtercomp=\",filtercomp);\r\n    setFilter(filtercomp);\r\n  }, [query, company]);\r\n  //这两个useEffect的前后顺序不能颠倒，顺序非常重要，后面的依赖于前面的useEffect更新结果。\r\n\r\n\r\n  const [hasMore, setHasMore] = React.useState(true);\r\n  const [refMore, acrossMore] = useInView({threshold: 0});\r\n  //后端返回了loading变动=会更新整个DeviceList组件，同时也执行updateQuery: ()=>{}回调更新数据。\r\n  const toLoadMore = React.useCallback(\r\n    async () => {\r\n      refLsize.current=devicesFind?.length;   //Appollo的cache中List项目累计，看有没有新增加\r\n      devicesFind && loadMore({\r\n        variables: {\r\n          offset: devicesFind.length,\r\n        }\r\n      })\r\n    },\r\n    [loadMore ,devicesFind]\r\n  );\r\n\r\n  useEffect( () => { acrossMore && (refLsize.current!==devicesFind?.length) && toLoadMore() },\r\n    [acrossMore,devicesFind,toLoadMore ]);\r\n\r\n  //控件<Stack 是堆叠式的，像导航条；适用同一个模板显示只需上级给下级参数调整的场景。根据上一叠页面选择触发状态relation给下一叠参数来控制下一级显示；更多嵌套很困难。\r\n  return (\r\n    <Stack\r\n      css={{        //上级窗口已经限制高度，要在里面滚动适应。\r\n        //height: \"100%\",     minHeight改成了height\r\n        height: `calc(100vh - 2 * ${theme.spaces.xs} - 0.875rem - 2 * 10px - 63px)`,\r\n        [theme.mediaQueries.md]: {\r\n          height: `calc(100vh - 2 * ${theme.spaces.lg} - 0.875rem - 2 * 10px - 71px)`\r\n        },\r\n        [theme.mediaQueries.xl]: {\r\n          height: `calc(100vh - 2 * ${theme.spaces.xl} - 0.875rem - 2 * 10px - 71px)`\r\n        }\r\n      }}\r\n      index={index}\r\n      navHeight={60}\r\n      onIndexChange={i => setIndex(i)}\r\n      items={[\r\n        {\r\n          title: (\r\n            <SearchTitle>\r\n              <SearchDeviceBox\r\n                css={{ borderBottom: \"none\" }}\r\n                label=\"搜某个单位,缩小范围\"\r\n                query={query}\r\n                setQuery={setQuery}\r\n              />\r\n            </SearchTitle>\r\n          ),\r\n          content: (\r\n            <StackItem >\r\n              <div\r\n                css={{\r\n                  overflowY: \"auto\",\r\n                  //overflowY: \"scroll\", 滚动触发，小屏幕很明显的条，滚动条会随浏览器屏幕设备模式变化样式。\r\n                  height: \"100%\",\r\n                }}\r\n              >\r\n\r\n                  <List>\r\n                    {/*新搜索到的用户，扣除已经关注的，单独排列在 上部分;  没有分页加载更多的user*/}\r\n                    {loading && (\r\n                      <React.Fragment>\r\n                        <ListItem\r\n                          interactive={false}\r\n                          contentBefore={\r\n                            <Skeleton\r\n                              css={{\r\n                                width: \"32px\",\r\n                                height: \"32px\",\r\n                                borderRadius: \"50%\"\r\n                              }}\r\n                            />\r\n                          }\r\n                          primary={<Skeleton css={{ maxWidth: \"160px\" }} />}\r\n                        />\r\n                        <ListItem\r\n                          interactive={false}\r\n                          contentBefore={\r\n                            <Skeleton\r\n                              css={{\r\n                                width: \"32px\",\r\n                                height: \"32px\",\r\n                                borderRadius: \"50%\"\r\n                              }}\r\n                            />\r\n                          }\r\n                          primary={<Skeleton css={{ maxWidth: \"200px\" }} />}\r\n                        />\r\n                      </React.Fragment>\r\n                    )}\r\n\r\n                    {   devicesFind?.map((hit,i) => (\r\n                        <ListItem key={hit.id}\r\n                            onPress={e => {\r\n                              setLocation(`/unit/${hit.id}/${company? 'company':'person'}`);\r\n                            }}\r\n                          contentBefore={\r\n                            <React.Fragment>\r\n                              <Avatar size=\"xs\" name={'企'}/>\r\n                              <Avatar size=\"xs\" name={'维'}/>\r\n                            </React.Fragment>\r\n                          }\r\n                          primary={`${hit.name}`}\r\n                          contentAfter={\r\n                            <ResponsivePopover\r\n                              content={\r\n                                <MenuList>\r\n                                  <MenuItem onPress={ async () => {\r\n                                    //await setRepId(recipe.id);    handleDelete(recipe.id)\r\n                                  }\r\n                                  }>功能待续\r\n                                  </MenuItem>\r\n                                  <MenuItem contentBefore={<IconPackage />}  onPress={() => {\r\n                                    setLocation(\"/unit/new\", { replace: false })\r\n                                  } }>\r\n                                   加个设备\r\n                                  </MenuItem>\r\n                                </MenuList>\r\n                              }\r\n                            >\r\n                              <IconButton variant=\"ghost\" icon={<IconMoreVertical/>} label=\"菜单\"/>\r\n                            </ResponsivePopover>\r\n                          }\r\n                        />\r\n                    ))}\r\n\r\n                  </List>\r\n\r\n                    <div\r\n                      css={{\r\n                        textAlign: \"center\",\r\n                        marginBottom: theme.spaces.md,\r\n                        marginTop: theme.spaces.md\r\n                      }}\r\n                    >\r\n                      { (refLsize.current!==devicesFind?.length)  &&  (\r\n                        <div>\r\n                          <Button disabled={loading} onPress={ () =>{\r\n                            toLoadMore();     //虽然引用表现是异步的，但还是需要某些步骤需要同步执行的，只能说是其内部深度嵌套了个Promise()。\r\n                            //console.log(`按拉扯获取took ${duration}ms`);　//异步处理了，这里实际耗时也不短暂122ms; 可能因为loading要同步首先设置的。\r\n                          } }>\r\n                            按，拉扯获取更多......\r\n                          </Button>\r\n                        </div>\r\n                      )}\r\n                      {(refLsize.current===devicesFind?.length)  &&　<React.Fragment>\r\n                        <span>嘿，没有更多了</span>\r\n                      </React.Fragment>\r\n                      }\r\n                    </div>\r\n                    <div  ref={refMore}  css={{height: \"1px\"}}> </div>\r\n\r\n                </div>\r\n            </StackItem>\r\n          )\r\n        },\r\n        {\r\n          title: (\r\n            <StackTitle\r\n              backTitle={\"作废\"}\r\n              contentAfter={\r\n                relation && ( 349 )\r\n              }\r\n              title={relation ? relation.username || relation.mobile : \"\"}\r\n            />\r\n          ),\r\n          content: (\r\n            <StackItem>\r\n              {relation && ( false\r\n               //作废了，未用  <FollowingRecipes key={relation.id} id={relation.id} />\r\n              )}\r\n            </StackItem>\r\n          )\r\n        }\r\n      ]}\r\n    />\r\n  );\r\n\r\n};\r\n\r\n\r\n\r\n\r\n//报错Cannot read property 'map' of null标记出错代码行，竟可能会差错！实际错误点实在下方，报错指示却在上方的代码行，两处都有.map的代码。\r\n//<Stack 组件，实际上是内部状态控制界面的呈现，实际上DOM数据内容并没有同步地变更，只是页面切换着看；适用数据库组织的；PK的，导航堆叠场景实际是源代码组织的。\r\n//幸运的事！！<StackItem>底下内嵌的组件可以做到每一个都是独立自主的。这里<FollowingRecipes key={}/>对每一个按钮进入和后退的，虽然组件同一个，但内部状态数据可各自独立的。\r\n//overflowY:\"scroll\"若遇到 css={{height: \"100%\", 和 minHeight: '300px' 不能同时添加的。overflowY:和\"100%\"一起使用，且要在内层DIV上用。组件中间层可能屏蔽掉。\r\n//多层DIV的height: \"100%\", 需要在中间层次添加100%传递父辈限制大小，配合内部层的overflowY: \"scroll\",才能滚动。\r\n//[query] = React.useState(\"\"); 为何导致 if(!query) 成立， \"\"即空字符串等于false。\r\n\r\n","D:\\home\\sei\\front-end\\src\\unit\\Layout.tsx",["754"],"D:\\home\\sei\\front-end\\src\\unit\\task\\IspEntrance.tsx",["755","756"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx,  } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  useTheme,\r\n  LayerLoading,\r\n  Text,\r\n  Button,\r\n  IconTruck,\r\n  IconArrowRight,\r\n  Navbar,\r\n  Toolbar,\r\n  IconButton,\r\n  IconArrowLeft,\r\n  ResponsivePopover,\r\n  MenuList, MenuItem, IconMoreVertical\r\n} from \"customize-easy-ui-component\";\r\nimport {  useLookIspOfDevTask } from \"./db\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport { Link as RouterLink, useLocation } from \"wouter\";\r\nimport { TransparentInput } from \"../../comp/base\";\r\n\r\n//[HOOK限制]按钮点击函数内部直接上toast()或toaster.notify()很可能无法正常显示。而放在函数组件顶层render代码前却能正常。\r\n\r\ninterface IspEntranceProps {\r\n  params?:any;   //上级路由器传入的参数。\r\n}\r\n//[我的任务列表]底下某设备去点击，首先要到这：\"/device/:id/task/:taskId\"路由来的；　然後setLocation再次路由。\r\nexport const IspEntrance: React.FunctionComponent<IspEntranceProps> = ({\r\n  params: { id:devId, taskId},      //来自上级<Route path={\"/device/:id/addTask\"} />路由器给的:id。\r\n}) => {\r\n  const theme = useTheme();\r\n  const [, setLocation] = useLocation();\r\n\r\n  let filtercomp={ dev:devId ,task:taskId};\r\n  const {loading, error, item } =useLookIspOfDevTask(filtercomp);\r\n  console.log(\"早就跳转页面逻辑错误 devId:\", devId,\";task=\", taskId, \"ISP=\",item,\"loading=\",loading,\"error=\",error);\r\n\r\n  //加载数据后立刻跳转，重定向操作。 要么直接去ISP页面；  要么先去派工吧。\r\n  //用useEffect跳转setLocation，操之过急！，useLookIspOfDevTask后面数据还会更新的，可是这里却早早就跳转页面了，所以逻辑错误！\r\n  //useLookIspOfDevTask实际查询后端比cache慢了1节拍要多一次render，若是cache也算数的立刻setLocation跳转，导致后端查询结果被遗弃，都无法更新cache了。\r\n  React.useEffect(() => {\r\n    if(!loading && !error){\r\n      if(!item){\r\n       //setLocation(\"/device/\"+id+\"/task/\"+taskId+\"/dispatch\", true);\r\n       }\r\n      else{\r\n       // setLocation(\"/inspect/\" + item.id, true) ;\r\n      }\r\n    }\r\n  }, [item, devId, taskId, error ,loading ,setLocation]);\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\",\r\n        }\r\n      }}\r\n    >\r\n      <Helmet title={\"ISP入口\"} />\r\n      <Navbar\r\n        css={{\r\n          zIndex: theme.zIndices.sticky,\r\n          backgroundColor: \"white\",\r\n          boxShadow: theme.shadows.sm,\r\n          position: \"sticky\",\r\n          top: 0,\r\n          [theme.mediaQueries.md]: {\r\n            position: \"static\"\r\n          }\r\n        }}\r\n      >\r\n        <Toolbar\r\n          css={{\r\n            alignItems: \"center\",\r\n            display: \"flex\"\r\n          }}\r\n        >\r\n          <IconButton\r\n            icon={<IconArrowLeft />}\r\n            component={RouterLink}\r\n            to=\"/device\"\r\n            label=\"后退\"\r\n            replace\r\n            variant=\"ghost\"\r\n            css={{\r\n              marginRight: theme.spaces.sm,\r\n              [theme.mediaQueries.md]: {\r\n                display: \"none\"\r\n              }\r\n            }}\r\n          />\r\n            <Text\r\n              css={{\r\n                flex: 1,\r\n                textAlign: \"center\",\r\n                [theme.mediaQueries.md]: {\r\n                  textAlign: \"left\"\r\n                }\r\n              }}\r\n              wrap={false}\r\n              variant=\"h5\"\r\n              gutter={false}\r\n            >\r\n            {item? '发现了': '没找到有'}关联的ISP\r\n            </Text>\r\n          <div\r\n            css={{\r\n              display: 'inline-flex',\r\n            }}\r\n          >\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem onPress={() =>0 }>其它功能</MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <IconButton\r\n                css={{\r\n                  marginLeft: theme.spaces.sm\r\n                }}\r\n                variant=\"ghost\"\r\n                icon={<IconMoreVertical />}\r\n                label=\"菜单\"\r\n              />\r\n            </ResponsivePopover>\r\n          </div>\r\n        </Toolbar>\r\n      </Navbar>\r\n        {!item && <React.Fragment>\r\n          <Text  variant=\"h4\"　css={{ textAlign: 'center' }}>\r\n           设备ID {devId} 任务ID {taskId} 底下还没找到有关联的ISP,请先去派工吧！\r\n          </Text><br/>\r\n          <RouterLink to={\"/device/\"+devId+\"/task/\"+taskId+\"/dispatch\"}>\r\n            <Button\r\n              size=\"lg\" noBind\r\n              intent=\"primary\"\r\n              iconBefore={<IconTruck />}\r\n              iconAfter={<IconArrowRight />}\r\n            >\r\n             得先去派工\r\n            </Button>\r\n          </RouterLink>\r\n        </React.Fragment>\r\n        }\r\n        {item && <React.Fragment>\r\n        <Text  variant=\"h4\"　css={{ textAlign: 'center' }}>\r\n          设备ID {devId} 任务ID {taskId} 底下发现了关联ISP,请看检验详情。\r\n        </Text><br/>\r\n        <RouterLink to={\"/inspect/\"+item.id}>\r\n          <Button\r\n            size=\"lg\" noBind\r\n            intent=\"primary\"\r\n            iconBefore={<IconTruck />}\r\n            iconAfter={<IconArrowRight />}\r\n          >\r\n          查看ISP详情\r\n          </Button>\r\n        </RouterLink>\r\n      </React.Fragment>\r\n      }\r\n      <LayerLoading loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\n","D:\\home\\sei\\front-end\\src\\unit\\task\\DispatchIspMen.tsx",["757","758","759","760"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Navbar,\r\n  Toolbar,\r\n  Text,\r\n  Button,\r\n  IconButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useTheme,\r\n  useToast,\r\n  LayerLoading,\r\n  Container,\r\n  ResponsivePopover,\r\n  IconMoreVertical,\r\n  IconArrowLeft,\r\n} from \"customize-easy-ui-component\";\r\nimport {   useDispatchIspMen } from \"./db\";\r\n\r\nimport {Helmet} from \"react-helmet\";\r\nimport { Link,  } from \"wouter\";\r\nimport { ContainLine, TransparentInput } from \"../../comp/base\";\r\nimport { useSession } from \"../../auth\";\r\n\r\n//[HOOK限制]按钮点击函数内部直接上toast()或toaster.notify()很可能无法正常显示。而放在函数组件顶层render代码前却能正常。\r\n\r\n//const log = debug(\"app:Compose\");\r\n\r\ninterface DispatchIspMenProps {\r\n  defaultTitle?: string;\r\n  defaultImage?: string;\r\n  defaultDescription?: string;\r\n  defaultIngredients?: any[];\r\n  readOnly?: boolean;\r\n  editable?: boolean;\r\n  defaultCredit?: string;\r\n  dt?:any;\r\n  params?:any;   //上级路由器传入的参数。\r\n}\r\n\r\nexport const DispatchIspMen: React.FunctionComponent<DispatchIspMenProps> = ({\r\n  readOnly,\r\n  editable,\r\n  defaultCredit = \"\",\r\n  defaultDescription,\r\n  defaultImage,\r\n  defaultIngredients,\r\n  defaultTitle = \"\",\r\n  dt=null,\r\n  params: { id, taskId},      //来自上级<Route path={\"/device/:id/addTask\"} />路由器给的:id。\r\n}) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  //const ref = React.useRef(null);\r\n  const {user,} = useSession();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [editing, setEditing] = React.useState(!readOnly);\r\n  const [content, ] = React.useState(() => {\r\n    return defaultDescription\r\n      ? ''\r\n      : null;\r\n  });\r\n  const [image, ] = React.useState(defaultImage);\r\n  const [title, setTitle] = React.useState(defaultTitle);\r\n  const [credit, ] = React.useState(defaultCredit);\r\n  //ingredients 原来是[]数组，改成对象。ingredients.length无定义了。\r\n  console.log(\"来React.useruseState=\"+ JSON.stringify(title) +\",user=\",user);\r\n  const [ingredients, setIngredients] = React.useState<any>( dt||{ispMen: user.username} );\r\n  //const [, setLocation] = useLocation();\r\n\r\n\r\n  const {result, submit:updateFunc, error:updateError, } = useDispatchIspMen({\r\n    task: taskId,\r\n    dev: id, username:ingredients && ingredients.ispMen,\r\n    });\r\n  console.log(\"AddToTask页面刷新 router-ID:\", id,\",dt=,\",dt,\";ingredients=\", ingredients);\r\n\r\n  //不能在这点击触发函数内部执行HOOKs!! 必须上移动外移到 界面组件的头部初始化hooks，随后点击触发调用hook钩子函数。\r\n  async function updateRecipe(\r\n    id: string\r\n  ) {\r\n    let yes= result && result.id;\r\n    console.log(\"生成任务－更新: %s\", id, yes);\r\n    setLoading(true);\r\n    try {\r\n      //这里放HOOK()报错＝Hooks can only be called inside of the body of a function component.\r\n      //考虑封装适配不同类型的接口，不采用这种：\r\n      //const {data: { buildTask: some }} = await updateFunc();\r\n      await updateFunc();\r\n      //等待后端服务器处理完成才能继续运行下面的代码。可长时间等待，挂着页面10分钟都允许。\r\n       setEditing(false);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      //这里先要setLoading(),还有err.message而非err；否则很可能也能导致？setMessage:toast()显示异常。\r\n      setLoading(false);\r\n      toast({\r\n        title: \"后端请求错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      //很多错误是在这里捕获的。\r\n      console.log(\"useAddToTask返回 捕获err\", err);\r\n    }\r\n    //这里无法获得result值，就算所在组件顶层已经获得result值，这里可能还是await () 前那样null;\r\n     console.log(\"生成任务返回了＝\", result,\"yes=\", yes);\r\n    toast({\r\n      title: \"派工返回了\",\r\n      subtitle: '新ISP的ID＝'+result?.id,\r\n      intent: \"info\"\r\n    });\r\n    //除非用const {data: { buildTask: some }} = await updateFunc()捕捉当前操作结果; 否则这时这地方只能用旧的result,点击函数里获取不到最新结果。\r\n    //须用其它机制，切换界面setXXX(标记),result？():();设置新的URL转场页面, 结果要在点击函数外面/组件顶层获得；组件根据操作结果切换页面/链接。\r\n  }\r\n\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\",\r\n        }\r\n      }}\r\n    >\r\n      <Helmet title={result ? '有结果了' : \"新增任务\"} />\r\n      <Navbar\r\n        css={{\r\n          zIndex: theme.zIndices.sticky,\r\n          backgroundColor: \"white\",\r\n          boxShadow: theme.shadows.sm,\r\n          position: \"sticky\",\r\n          top: 0,\r\n          [theme.mediaQueries.md]: {\r\n            position: \"static\"\r\n          }\r\n        }}\r\n      >\r\n        <Toolbar\r\n          css={{\r\n            alignItems: \"center\",\r\n            display: \"flex\"\r\n          }}\r\n        >\r\n          <IconButton\r\n            icon={<IconArrowLeft />}\r\n            component={Link}\r\n            to=\"/device\"\r\n            label=\"后退\"\r\n            replace\r\n            variant=\"ghost\"\r\n            css={{\r\n              marginRight: theme.spaces.sm,\r\n              [theme.mediaQueries.md]: {\r\n                display: \"none\"     //大屏不需要\r\n              }\r\n            }}\r\n          />\r\n          {editing ? (\r\n            <div css={{ marginLeft: \"-0.75rem\", flex: 1 }}>\r\n              <TransparentInput\r\n                autoComplete=\"off\"\r\n                autoFocus\r\n                inputSize=\"lg\"\r\n                value={title}\r\n                placeholder=\"把任务派给某个检验员\"\r\n                aria-label=\"Recipe title\"\r\n                onChange={e => {\r\n                  setTitle(e.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <Text\r\n              css={{\r\n                flex: 1,\r\n                textAlign: \"center\",\r\n                [theme.mediaQueries.md]: {\r\n                  textAlign: \"left\"\r\n                }\r\n              }}\r\n              wrap={false}\r\n              variant=\"h5\"\r\n              gutter={false}\r\n            >\r\n              { updateError?  '派工任务失败了':\r\n                 '您已将该任务派工给检验员 '\r\n              }\r\n            </Text>\r\n          )}\r\n          <div\r\n            css={{\r\n            display: 'inline-flex',\r\n          }}\r\n          >\r\n            <ResponsivePopover\r\n              content={\r\n                <MenuList>\r\n                  <MenuItem\r\n                    onPress={() => {\r\n                      setEditing(true);\r\n                    }}\r\n                  >\r\n                    编辑\r\n                  </MenuItem>\r\n                  <MenuItem onPress={() => null }>删除</MenuItem>\r\n                </MenuList>\r\n              }\r\n            >\r\n              <IconButton\r\n                css={{\r\n                  display: !editing && editable ? undefined : \"none\",\r\n                  marginLeft: theme.spaces.sm\r\n                }}\r\n                variant=\"ghost\"\r\n                icon={<IconMoreVertical />}\r\n                label=\"显示菜单\"\r\n              />\r\n            </ResponsivePopover>\r\n\r\n            {editing && id && (\r\n              <Button\r\n                variant=\"ghost\"\r\n                css={{  //小屏这个按钮没有存在价值，顶条左角的后退就可以。\r\n                  //display: \"none\",\r\n                  [theme.mediaQueries.md]: {\r\n                    display: \"inline-flex\"\r\n                  },\r\n                  marginLeft: theme.spaces.sm\r\n                }}\r\n                onPress={() => setEditing(false)}\r\n              >\r\n                取消\r\n              </Button>\r\n            )}\r\n            {editing && (\r\n              <Button\r\n                intent=\"primary\"\r\n                disabled={loading}\r\n                css={{ marginLeft: theme.spaces.sm }}\r\n                onPress={() => {\r\n                  if(id) updateRecipe(id);\r\n                }}\r\n               >\r\n                把设备任务派工给该检验员\r\n               </Button>\r\n            )}\r\n          </div>\r\n        </Toolbar>\r\n      </Navbar>\r\n\r\n      <div\r\n        css={{  //控制小屏时的导航条底下的整个页面滚动。\r\n          flex: 1,\r\n          //minHeight: '100vh',\r\n          [theme.mediaQueries.md]: {\r\n            //flex: \"none\",\r\n            //minHeight: \"unset\",\r\n           // minHeight:'unset',\r\n            height: \"auto\",\r\n            display: \"block\",\r\n          }\r\n        }}\r\n      >\r\n        <div>\r\n\r\n          <Container>\r\n            <div\r\n              css={{\r\n                display: 'flex',\r\n                alignItems:'center',\r\n                justifyContent:'center',\r\n                minHeight: '85vh',\r\n                [theme.mediaQueries.md]: {\r\n                  paddingTop: theme.spaces.lg,\r\n                  paddingBottom: theme.spaces.lg,\r\n                  minHeight:'unset',\r\n                }\r\n              }}\r\n            >\r\n              {ingredients && (\r\n                <div\r\n                  css={{\r\n                  width:'100%',\r\n                }}\r\n                >\r\n                  <Text variant=\"h5\">任务派工向导</Text>\r\n                    <Text\r\n                      css={{\r\n                        flex: 1,\r\n                        textAlign: \"center\",\r\n                        [theme.mediaQueries.md]: {\r\n                          textAlign: \"left\"\r\n                        }\r\n                      }}\r\n                      wrap={true}\r\n                      variant=\"h6\"\r\n                      gutter={false}\r\n                    >\r\n                      填检验员账号，以 ,号 来分割多个人, 选择方式：开发中。  敬请期待。\r\n                    </Text>\r\n                    <hr/>\r\n                      <div key={1}>\r\n                        {editing ? (\r\n                        <div>\r\n                          <ContainLine display={'检验员'}>\r\n                              <TransparentInput\r\n                                autoFocus={true}\r\n                                placeholder=\"填检验员账号, 以后选择方式。\"\r\n                                value={ingredients.ispMen}\r\n                                onChange={e => {\r\n                                  setIngredients( {\r\n                                    ...ingredients,\r\n                                    ispMen: e.target.value\r\n                                  });\r\n                                }}\r\n                              />\r\n                          </ContainLine>\r\n\r\n                        </div>\r\n                        ) :\r\n                          result && <Text\r\n                            css={{\r\n                              flex: 1,\r\n                              textAlign: \"center\",\r\n                              [theme.mediaQueries.md]: {\r\n                                textAlign: \"left\"\r\n                              }\r\n                            }}\r\n                            wrap={false}\r\n                            variant=\"h4\"\r\n                            gutter={false}\r\n                          >\r\n                            派工结果，得到检验号：{result?.id} 。\r\n                          </Text>\r\n                        }\r\n                      </div>\r\n                </div>\r\n              )}\r\n\r\n\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n      <LayerLoading loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\n","D:\\home\\sei\\front-end\\src\\unit\\task\\TaskList.tsx",["761","762"],"D:\\home\\sei\\front-end\\src\\unit\\db.ts",[],"D:\\home\\sei\\front-end\\src\\unit\\task\\db.ts",[],"D:\\home\\sei\\front-end\\src\\unit\\DeviceDetail.tsx",["763","764"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//import firebase from \"firebase/app\";\r\nimport { ComposeDevice } from \"./ComposeDevice\";\r\nimport { useSession } from \"../auth\";\r\n//import { useDocument } from \"react-firebase-hooks/firestore\";\r\nimport { useTheme, Text } from \"customize-easy-ui-component\";\r\nimport {  useRoute } from \"wouter\";\r\nimport { AttachedTask } from \"./AttachedTask\";\r\n\r\n\r\ninterface DeviceDetailProps {\r\n  id: string;\r\n  eqp: any;\r\n}\r\nexport const DeviceDetail: React.FunctionComponent<DeviceDetailProps> = ({ id, eqp }) => {\r\n  const theme = useTheme();\r\n  const {user,} = useSession();\r\n  //设备 外部关联的 任务。\r\n  const [matched, params] = useRoute(\"/unit/:id/task/:taskId*\");\r\n  //const showingRecipe = matched && params.taskId;\r\n  //var   value=null;\r\n  //不要改组件的props带来的变量。\r\n  //第一个render这里loading=true，要到第二次再执行到了这里才会有data数据!\r\n  console.log(\"进入某单位=\",eqp,\"进行中id=\",id,\"showingRecipe=\",matched,params);\r\n\r\n  if(eqp) {\r\n    return (\r\n      <div>\r\n        <ComposeDevice\r\n          readOnly={true}\r\n          id={id}\r\n          //editable={true || eqp.createdBy.id === user.uid}\r\n          //defaultIngredients={ JSON.parse( value.ingredients ) }\r\n          dt={eqp}\r\n        />\r\n\r\n\r\n\r\n\r\n\r\n        <AttachedTask\r\n          readOnly={true}\r\n          id={id}\r\n          editable={true || eqp.createdBy.id === user.uid}\r\n          defaultTitle={eqp.title}\r\n          eqp={eqp}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <Text variant=\"h5\">暂时查不到该设备</Text>;\r\n};\r\n\r\n\r\n\r\n","D:\\home\\sei\\front-end\\src\\unit\\task\\AddToTask.tsx",["765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783"],"D:\\home\\sei\\front-end\\src\\unit\\ComposeDevice.tsx",["784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, Global } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n//import Editor, { tryValue } from \"./Editor\";\r\n//import { ImageUpload } from \"./ImageUpload\";\r\n//import { Image } from \"./Image\";\r\n//import { Value } from \"slate\";\r\nimport debug from \"debug\";\r\n//import initialValue from \"./value.json\";\r\n//import { Ingredient } from \"./RecipeList\";\r\nimport {\r\n  Navbar,\r\n  Toolbar,\r\n  Input,\r\n  Text,\r\n  Button,\r\n  IconButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useTheme,\r\n  InputBaseProps,\r\n  useToast,\r\n  LayerLoading,\r\n  Container,\r\n  ResponsivePopover,\r\n  IconMoreVertical,\r\n  IconArrowLeft,\r\n  MenuDivider, IconPackage, Check\r\n} from \"customize-easy-ui-component\";\r\nimport {   useCreateDevice, useUpdateEntry } from \"./db\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport { Link,  useLocation } from \"wouter\";\r\nimport { Link as RouterLink } from \"wouter\";\r\n\r\n\r\nconst log = debug(\"app:Compose\");\r\n\r\ninterface ComposeDeviceProps {\r\n  id?: string;\r\n  readOnly?: boolean;\r\n  dt?:any;\r\n}\r\n\r\nexport const ComposeDevice: React.FunctionComponent<ComposeDeviceProps> = ({\r\n  readOnly,\r\n  id,\r\n  dt=null,\r\n}) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n // const {user,} = useSession();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [editing, setEditing] = React.useState(!readOnly);\r\n  /* const [content, ] = React.useState(() => {\r\n        return defaultDescription\r\n          ? ''\r\n          : null;\r\n      });　 */\r\n\r\n  //这里ingredients挂载初始化后只能setIngredients改了，useState()后面参数变动就不再起作用了。\r\n  const [ingredients, setIngredients] = React.useState<any>( dt||{ unit:{company:true} } );\r\n  console.log(\"刚ComposeDevice经过EQPis\",dt,\"进行中id=\",id,\"ingredients=\",ingredients);\r\n  const [, setLocation] = useLocation();\r\n\r\n  const [Options, setOptions] = React.useState({});\r\n  const {result:entry, submit:submitfunc, error} = useCreateDevice({id:\"1\",  ...ingredients});\r\n  /*\r\n  const {result, submitfunc:updateFunc, } = useUpdateEntry({\r\n    id: ingredients && ingredients.id,\r\n    unt: 1,\r\n    info: {...ingredients, id: undefined,isps:undefined,pos:undefined,ownerUnt:undefined,__typename:undefined\r\n          ,address: \"贵大厦\" },\r\n    });\r\n  */\r\n\r\n  //不能在这点击触发函数内部执行HOOKs!! 必须上移动外移到 界面组件的头部初始化hooks，随后点击触发调用hook钩子函数。\r\n  async function saveRecipe( a\r\n  ) {\r\n    try {\r\n      setLoading(true);\r\n      console.log(\"baochun等待之前１ ingredients=\", ingredients );\r\n      //这时才去修改submitfunc参数，已经来不及，setOptions异步执行；submitfunc会看见前面的取值。\r\n      setOptions({oid:\"test暂且空着\",  ...ingredients});\r\n      console.log(\"baochun等待之前２ ingredients=\", ingredients );\r\n      await submitfunc();   //要等待正常的结果应答从后端返回。\r\n      //submitfunc(); 立刻执行后面代码，这样不会等待后端应答的。\r\n      /*点击函数发送给后端服务器，即刻返回到这里了await submitfunc();　这个时候entry还不是后端的应答数据，要等到下一次entry被ＨＯＯＫ修正*/\r\n      console.log(\"等半天createEntry返回error=\",error,\"结果\",entry );\r\n\r\n      //加了await 后的　submitfunc();似乎也不能确保entry非空的，必须等待下一次render()。\r\n      entry && setLocation(\"/unit/\" + entry.id, { replace: true } );\r\n      //原型是 PushCallback = (to: Path, replace?: boolean) => void;\r\n    } catch (err) {\r\n      setLoading(false);\r\n      toast({\r\n        title: \"捕获errcc错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      console.log(\"捕获err打了吗\", err);\r\n    }\r\n  }\r\n\r\n  //保存 编辑新的菜谱之后，要修正URL\r\n  React.useEffect(() => {\r\n    entry && ( setLocation(\"/unit/\" + entry.id) );\r\n  }, [entry,setLocation]);\r\n\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\"\r\n        }\r\n      }}\r\n    >\r\n      <Helmet title={\"单位信息\"} />\r\n\r\n      <div\r\n        css={{  //控制小屏时的导航条底下的整个页面滚动。\r\n          flex: 1,\r\n          [theme.mediaQueries.md]: {\r\n            flex: \"none\"\r\n          }\r\n        }}\r\n      >\r\n        <div>\r\n          <Container>\r\n            <div\r\n              css={{\r\n                paddingTop: theme.spaces.lg,\r\n                paddingBottom: theme.spaces.lg\r\n              }}\r\n            >\r\n              {ingredients && (\r\n                <div>\r\n                  <Text variant=\"h5\">单位相关信息</Text>\r\n\r\n                      <div key={1}>\r\n                        {editing ? (\r\n                        <div>\r\n                          <ContainLine display={'选择类型，是组织企业还是个人'}>\r\n                            <Check label={'是企业'}\r\n                                   checked= {ingredients.unit?.company}\r\n                                   onChange={e => {\r\n                                     setIngredients( {\r\n                                       ...ingredients,\r\n                                       unit: { ...ingredients.unit, company: !ingredients.unit?.company }\r\n                                     });\r\n                                   }  }\r\n                            />\r\n                          </ContainLine>\r\n                          <ContainLine display={ingredients.unit?.company? '组织企业名称':'个人姓名'}>\r\n                              <TransparentInput\r\n                                autoFocus={true}\r\n                                placeholder=\"那一台电梯？\"\r\n                                value={ingredients.unit?.name||''}\r\n                                onChange={e => {\r\n                                  setIngredients( {\r\n                                    ...ingredients,\r\n                                    unit: { ...ingredients.unit, name: e.target.value }\r\n                                  });\r\n                                }}\r\n                              />\r\n                          </ContainLine>\r\n                          <ContainLine display={'统一社会信用代码/身份证号码'}>\r\n                            <TransparentInput\r\n                              autoFocus={true}\r\n                              placeholder=\"导入的情形可以不填写\"\r\n                              value={ingredients.unit?.no||''}\r\n                              onChange={e => {\r\n                                setIngredients( {\r\n                                  ...ingredients,\r\n                                  unit: {...ingredients.unit, no: e.target.value}\r\n                                });\r\n                              }}\r\n                            />\r\n                          </ContainLine>\r\n                        </div>\r\n                        ) : (\r\n                          <div\r\n                            css={{\r\n                              backgroundColor: false\r\n                                ? theme.colors.palette.blue.lightest\r\n                                : \"transparent\",\r\n                              display: \"flex\",\r\n                              marginLeft: \"-0.25rem\",\r\n                              paddingLeft: \"0.25rem\",\r\n                              marginRight: \"-0.25rem\",\r\n                              paddingRight: \"0.25rem\",\r\n                              // borderRadius: \"0.25rem\",\r\n                              marginBottom: theme.spaces.xs,\r\n                              justifyContent: \"space-between\",\r\n                              [theme.mediaQueries.md]: {\r\n                                width: \"500px\"\r\n                              }\r\n                            }}\r\n                          >\r\n                            <Text\r\n                              css={{\r\n                                paddingRight: theme.spaces.xs,\r\n                                backgroundColor: false\r\n                                  ? theme.colors.palette.blue.lightest\r\n                                  : \"white\"\r\n                              }}\r\n                            >\r\n                              单位名称：{dt?.company?.name ||dt?.person?.name}\r\n                            </Text>\r\n                            <div\r\n                              css={{\r\n                                flex: 1,\r\n                                borderBottom: `1px dashed ${\r\n                                  theme.colors.border.muted\r\n                                }`,\r\n                                marginBottom: \"6px\"\r\n                              }}\r\n                            />\r\n                            <Text\r\n                              css={{\r\n                                paddingLeft: theme.spaces.xs,\r\n                                backgroundColor: false\r\n                                  ? theme.colors.palette.blue.lightest\r\n                                  : \"white\"\r\n                              }}\r\n                            >\r\n                              单位识别码：{dt?.company?.no ||dt?.person?.no}\r\n                            </Text>\r\n                          </div>\r\n                        )}\r\n                        <br/>\r\n                        <Text>暂时无独立单位库，待完善</Text>\r\n                      </div>\r\n\r\n                </div>\r\n              )}\r\n\r\n              <LayerLoading loading={loading} />\r\n              {editing && <Button\r\n                  intent=\"primary\"\r\n                  disabled={false}\r\n                  css={{ marginLeft: theme.spaces.sm }}\r\n                  onPress={() => {  //按钮里面看不到最新的input取值的。\r\n                     saveRecipe(null);\r\n                  }}\r\n                  >\r\n                从外部库关联生成一个单位吧\r\n                </Button>\r\n              }\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface TransparentInputProps extends InputBaseProps {}\r\n\r\nconst TransparentInput = (props: TransparentInputProps) => {\r\n\r\n  return (\r\n    <Input\r\n      css={{\r\n        background: \"none\",\r\n        border: \"none\",\r\n        boxShadow: \"none\",\r\n        // paddingTop: theme.spaces.xs,\r\n        // paddingBottom: theme.spaces.xs,\r\n        \":focus\": {\r\n          outline: \"none\",\r\n          boxShadow: \"none\",\r\n          background: \"none\"\r\n        }\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\n\r\n//其余的属性，({ display, children, ...props })  => {\r\nconst ContainLine =({ display, children, ...props })  => {\r\n  const theme = useTheme();\r\n  return (\r\n    <div\r\n      css={{\r\n     //   marginTop: \"-0.25rem\",\r\n     //   marginLeft: \"-0.75rem\",\r\n     //   marginRight: \"-0.75rem\"\r\n      }}\r\n      {...props}\r\n    >\r\n\r\n      <div\r\n        css={{\r\n          backgroundColor: false\r\n            ? theme.colors.palette.blue.lightest\r\n            : \"transparent\",\r\n          display: \"flex\",\r\n          [theme.mediaQueries.md]: {\r\n            maxWidth: \"400px\"\r\n          }\r\n        }}\r\n      >\r\n        <Text\r\n          css={{\r\n            display: \"block\",\r\n            width: \"100%\",\r\n            padding: \"0.5rem 0.75rem\"   //无法和输入组建的大小联动。\r\n          }}\r\n        >\r\n          {display}\r\n          </Text>\r\n\r\n        {children}\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n//注意：component is changing an uncontrolled input of type undefined to be controlled：使得输入捕获异常．\r\n","D:\\home\\sei\\front-end\\src\\unit\\SearchDeviceBox.tsx",["802"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  InputGroup,\r\n  Input,\r\n  useTheme,\r\n  VisuallyHidden,\r\n  Button,\r\n  useResponsiveContainerPadding,\r\n  IconSearch, IconLayers, IconButton, Dialog, Text\r\n} from \"customize-easy-ui-component\";\r\n//import { Link } from \"wouter\";\r\nimport { ContainLine, TransparentInput } from \"../comp/base\";\r\n\r\nexport interface SearchBoxProps {\r\n  setQuery: React.Dispatch<React.SetStateAction<any>>;\r\n  query: any;\r\n  label?: string;\r\n}\r\n\r\nexport const SearchDeviceBox: React.FunctionComponent<SearchBoxProps> = ({\r\n  query,\r\n  label = \"搜索吧 all recipes\",\r\n   setQuery,\r\n   ...other\r\n}) => {\r\n  const theme = useTheme();\r\n  const responsiveContainerPadding = useResponsiveContainerPadding();\r\n  //设备选择的范围缩小功能\r\n  const [open, setOpen] = React.useState(false);\r\n  const [ingredients, setIngredients] = React.useState<any>( {} );\r\n  console.log(\"来看SearchDeviceBox当前的 ingredients=\",ingredients);\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <form\r\n      css={{\r\n        margin: 0,\r\n        position: \"relative\"\r\n      }}\r\n      onSubmit={e => e.preventDefault()}\r\n    >\r\n      <InputGroup\r\n        css={{ margin: 0, position: \"relative\" }}\r\n        hideLabel\r\n        label={label}\r\n      >\r\n        <Input\r\n          type=\"search\"\r\n          inputSize=\"md\"\r\n          autoComplete=\"off\"\r\n          css={[\r\n            {\r\n              height: \"60px\",\r\n              textAlign: \"left\",\r\n              border: \"none\",\r\n              borderBottom: \"1px solid\",\r\n              borderColor: theme.colors.border.default,\r\n              borderRadius: 0,\r\n              WebkitAppearance: \"none\",\r\n              // background: \"transparent\",\r\n              boxShadow: \"none\",\r\n              \":focus\": {\r\n                boxShadow: \"none\",\r\n                backgroundColor: theme.colors.background.tint1\r\n              }\r\n            },\r\n            responsiveContainerPadding\r\n          ]}\r\n          {...other}\r\n          value={ query }\r\n          onChange={e => setQuery(e.target.value)}\r\n          placeholder={label}\r\n        />\r\n      </InputGroup>\r\n      <VisuallyHidden>\r\n        <Button type=\"submit\">搜索</Button>\r\n      </VisuallyHidden>\r\n      <IconSearch\r\n        aria-hidden\r\n        color={theme.colors.scales.gray[6]}\r\n        css={{\r\n          display: query ? \"none\" : \"block\",\r\n          position: \"absolute\",\r\n          right: `calc(2 * ${theme.spaces.lg})`,\r\n          top: \"50%\",\r\n          transform: \"translateY(-50%)\",\r\n          zIndex: 10\r\n        }}\r\n      />\r\n\r\n      <IconButton\r\n        onPress={() => setOpen(true)}\r\n        variant=\"ghost\"\r\n        label=\"定制可选参数\"\r\n        size=\"md\"\r\n        icon={<IconLayers />}\r\n        css={{\r\n          display: query ? \"none\" : \"block\",\r\n          position: \"absolute\",\r\n          right: theme.spaces.sm,\r\n          top: \"50%\",\r\n          transform: \"translateY(-50%)\",\r\n          zIndex: 10,\r\n          height: 'unset',\r\n          width: 'unset'\r\n        }}\r\n      />\r\n\r\n    </form>\r\n\r\n      <Dialog\r\n        mobileFullscreen\r\n        isOpen={open}\r\n        onRequestClose={() => setOpen(false)}\r\n        title=\"选择参数缩小查询的范围\"\r\n      >\r\n        <div css={{ padding: theme.spaces.lg }}>\r\n          <Text>为了减少查询结果集的数量</Text>\r\n          <div>\r\n            <ContainLine display={'出厂编号'}>\r\n              <TransparentInput\r\n                autoFocus={true}\r\n                placeholder=\"名字\"\r\n                value={ingredients.factoryNo}\r\n                onChange={e => {\r\n                  setIngredients( {\r\n                    ...ingredients,\r\n                    factoryNo: e.target.value\r\n                  });\r\n                }}\r\n              />\r\n            </ContainLine>\r\n            <ContainLine display={'任务---部门'}>\r\n              <TransparentInput\r\n                autoFocus={true}\r\n                placeholder=\"名字\"\r\n                value={ingredients.task && ingredients.task.dep}\r\n                onChange={e => {\r\n                  setIngredients( {\r\n                    ...ingredients,\r\n                    task: {dep: e.target.value}\r\n                  });\r\n                }}\r\n              />\r\n            </ContainLine>\r\n            <ContainLine display={'检验---检验人员包含'}>\r\n              <TransparentInput\r\n                autoFocus={true}\r\n                value={((ingredients.isps||{}).ispMen||{}).username}\r\n                onChange={e => {\r\n                  setIngredients( {\r\n                    ...ingredients,\r\n                    isps:{ispMen:{username: e.target.value}}\r\n                  });\r\n                }}\r\n              />\r\n            </ContainLine>\r\n          </div>\r\n\r\n          <div\r\n            css={{\r\n              display: \"flex\",\r\n              marginTop: theme.spaces.lg,\r\n              justifyContent: \"flex-end\"\r\n            }}\r\n          >\r\n            <Button intent=\"primary\"\r\n                    onPress={e => {\r\n                      setOpen(false);\r\n                      setQuery(ingredients)\r\n                      //console.log(`参数设置好了 took ${duration}ms`);   //执行时间长度102ms　setXXX同步执行\r\n                    } }\r\n            >\r\n              参数设置好了\r\n            </Button>\r\n          </div>\r\n          <Text>搜索框输入可用后端识别转义符号  % 任意的几个字符  _ 某个字符</Text>\r\n        </div>\r\n\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\n/*图标触发：\r\n<IconButton\r\n  component={Link}\r\n  to=\"/device/option\"\r\n<Dialog 中等大屏幕时刻触发不了。\r\n*/\r\n\r\n","D:\\home\\sei\\front-end\\src\\unit\\task\\BoundDevices.tsx",["803"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Text,\r\n  Spinner,\r\n  useTheme,\r\n  List,\r\n  Button,\r\n  ListItem,\r\n  Skeleton, ScrollView, useInfiniteScroll, Embed, Avatar\r\n} from \"customize-easy-ui-component\";\r\n\r\nimport {  useQueryBoundDevices } from \"./db\";\r\nimport { useFirebaseImage } from \"../../Image\";\r\nimport { useLocation, useRoute } from \"wouter\";\r\nimport { FadeImage } from \"../../FadeImage\";\r\n\r\n\r\n\r\ninterface BoundDevicesProps {\r\n  id: string;   //任务ID\r\n}\r\n//显示某一个关注对象用户菜谱列表\r\n//有1个地方会引用到的。\r\nexport const BoundDevices: React.FunctionComponent<\r\n  BoundDevicesProps\r\n> = ({ id }) => {\r\n  const theme = useTheme();\r\n  //console.log(\"看FollowingRecipes filter =id=\", id );\r\n  let wheres={a: {s:'id',o:'EQ',lv:id } ,\r\n     };\r\n\r\n  const [filter, setFilter] = React.useState({where:wheres,\r\n    offset:0,\r\n    first:5,\r\n    orderBy: \"date\",\r\n    asc: true\r\n  });\r\n  //根据任务ｉｄ找设备，返回items＝下挂设备列表\r\n  const {\r\n    loading,\r\n    error,\r\n    items,\r\n    loadMore\r\n  } =useQueryBoundDevices(filter);\r\n\r\n  //console.log(\"看FollowingRecipes filter=\", filter );\r\n  //就算id切换了，本组件的数据还是会被appollo自动缓存的，id变化不会一定导致重新查询后端数据库的，看着像页面显示的缓存。\r\n  //根据id和界面操作后的参数，来要修正graphQL的Query()的参数 = 要做重新查询。\r\n  React.useEffect(() => {\r\n    let wheres={a: {s:'id',o:'EQ',lv:id } ,\r\n    };\r\n    setFilter({where:wheres,\r\n      offset:0,\r\n      first:5,\r\n      orderBy: \"date\",\r\n      asc: true\r\n    });\r\n  }, [id]);\r\n  //滚动条触发的更多查询。初始查询的记录满员必须大于让滚动条开启{满屏了}的数量，否则无法触发后续更多查询。\r\n  const ref = React.useRef();\r\n  const [hasMore, setHasMore] = React.useState(true);\r\n\r\n  const [fetching] = useInfiniteScroll({\r\n    container: ref,\r\n    hasMore: hasMore,\r\n    onFetch: () => toLoadMore()\r\n   });\r\n\r\n  async function toLoadMore() {\r\n    loadMore({\r\n      variables: {\r\n        offset: items.length,\r\n      },\r\n      updateQuery: (prev, { fetchMoreResult }) => {\r\n        console.log(\"fetchMoreResult来看=\"+ JSON.stringify(fetchMoreResult)+\",原来=\"+ JSON.stringify(prev) );\r\n        if (!fetchMoreResult)   return prev;\r\n        if (!fetchMoreResult.recipe)   return prev;\r\n        if(fetchMoreResult.recipe.length===0)\r\n          setHasMore(false);\r\n        if(prev.recipe.length + fetchMoreResult.recipe.length > 2000 )\r\n          setHasMore(false);\r\n        return Object.assign({}, prev, {\r\n          recipe: [...prev.recipe, ...fetchMoreResult.recipe],\r\n        });\r\n      },\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <ScrollView　overflowY\r\n                   css={{\r\n                     flex: 1,\r\n                     height: \"100%\",\r\n                    //WebkitOverflowScrolling: \"touch\"\r\n                   }}\r\n                  innerRef={ref}>\r\n        <div\r\n          css={{   //特意把父div滚动条启动开。`calc(100vh - ${ileapHeight}px)`,   '750px',  注意串里的空格必须要有！\r\n            //关键是靠内容持续增长列表的紧上一级DIV来控制，把这一个div高度撑开，迫使最近的窗口所附属的滚动条启动。\r\n            minHeight: `calc(100vh - 164px)`,\r\n            [theme.mediaQueries.md]: {\r\n              minHeight: `calc(100vh - 164px - ${theme.spaces.lg} - ${theme.spaces.lg})`\r\n            },\r\n            [theme.mediaQueries.xl]: {\r\n              minHeight: `calc(100vh - 164px - ${theme.spaces.xl} - ${theme.spaces.xl})`\r\n            },\r\n          }}\r\n        >\r\n          {/*loading && <Spinner center />*/}\r\n          {!loading && !items && (\r\n            <Text\r\n              muted\r\n              css={{\r\n                display: \"block\",\r\n                fontSize: theme.fontSizes[0],\r\n                margin: theme.spaces.lg\r\n              }}\r\n            >\r\n              This user currently 没有东西.\r\n            </Text>\r\n          )}\r\n\r\n          <List>\r\n            {loading && (\r\n              <React.Fragment>\r\n                <ListItem\r\n                  interactive={false}\r\n                  contentBefore={\r\n                    <Skeleton\r\n                      css={{\r\n                        width: \"32px\",\r\n                        height: \"32px\",\r\n                        borderRadius: \"50%\"\r\n                      }}\r\n                    />\r\n                  }\r\n                  primary={<Skeleton css={{ maxWidth: \"160px\" }} />}\r\n                />\r\n                <ListItem\r\n                  interactive={false}\r\n                  contentBefore={\r\n                    <Skeleton\r\n                      css={{\r\n                        width: \"32px\",\r\n                        height: \"32px\",\r\n                        borderRadius: \"50%\"\r\n                      }}\r\n                    />\r\n                  }\r\n                  primary={<Skeleton css={{ maxWidth: \"200px\" }} />}\r\n                />\r\n              </React.Fragment>\r\n            )}\r\n\r\n            {items && items.map(recipe => (\r\n              <DeviceListItem\r\n                id={recipe.id}\r\n                key={recipe.id}\r\n                editable\r\n                recipe={recipe as any}\r\n                task={id}\r\n              />\r\n            ))}\r\n\r\n            {fetching && (\r\n              <ListItem\r\n                interactive={false}\r\n                aria-live=\"polite\"\r\n                aria-busy=\"true\"\r\n                primary={<Skeleton animated css={{ width: \"150px\" }} />}\r\n              />\r\n            )}\r\n          </List>\r\n\r\n          {loading && <Spinner />}\r\n          {/*loadingError || (loadingMoreError && <div>Loading error...</div>)*/}\r\n          {error  && <div>Loading error...</div> }\r\n          {(!items || items.length===0) && (\r\n            <div css={{ textAlign: \"center\" }}>\r\n              <Button  onPress={ () => toLoadMore() } >\r\n                哎呀还没有已经关联设备可看\r\n              </Button>\r\n            </div>\r\n          )}\r\n       </div>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\n//某个任务　下挂　单个设备的　recipe＝device{}\r\nfunction DeviceListItem({ recipe, id, highlight ,task }: any) {\r\n  const theme = useTheme();\r\n  //缩略图thumb-sm@和完整图片thumb@的url不一样的；后端支持缩略？　没必要做；\r\n  const { src, error } = useFirebaseImage(\"thumb-sm@\", recipe.image);\r\n\r\n  const href = `/device/${id}/task/${task}`;\r\n  //被点击中匹配href，成功=true=isActive[? ,..];　表示正好跟界面显示同样的一个路由。\r\n  const [isActive,] = useRoute(href);\r\n  const [, setLocation] = useLocation();\r\n//\r\n  //   href={`/device/${id}`}\r\n  //        //navigate(href , { replace: true });\r\n\r\n  return (\r\n    <ListItem\r\n      wrap={false}\r\n      onPress={e => {\r\n        //e.preventDefault();\r\n        setLocation(href, { replace: false });\r\n      }}\r\n      aria-current={isActive}\r\n      css={{\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n        height: \"56px\",\r\n        alignItems: \"center\",\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        \"& em\": {\r\n          fontStyle: \"normal\",\r\n          color: theme.colors.text.selected\r\n        },\r\n        backgroundColor: isActive ? theme.colors.background.tint1 : null,\r\n        \"& > *\": {\r\n          flex: 1,\r\n          overflow: \"hidden\"\r\n        }\r\n      }}\r\n      contentBefore={\r\n        <React.Fragment>\r\n          <Avatar size=\"xs\" name={'曳'}/>\r\n          <Avatar size=\"xs\" name={'有'}/>\r\n        </React.Fragment>\r\n      }\r\n      contentAfter={\r\n        recipe.image && !error ? (\r\n          <Embed css={{ width: \"60px\" }} width={75} height={50}>\r\n            <FadeImage src={src} hidden />\r\n          </Embed>\r\n        ) : (\r\n          recipe.oid\r\n        )\r\n      }\r\n      primary={\r\n        highlight ? (\r\n          <span dangerouslySetInnerHTML={{ __html: highlight.title.value }} />\r\n        ) : (\r\n          recipe.cod\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\n\r\n\r\n/**上面的loadMore的updateQuery的函数原型定义这样的：...node_modules/apollo-client/core/ObservableQuery.d.ts:25；\r\n * =更新整个Query查询结果。\r\n  export interface FetchMoreOptions<TData = any, TVariables = OperationVariables> {\r\n    updateQuery: (previousQueryResult: TData, options: {\r\n        fetchMoreResult?: TData;    //这个是=后端服务器新增加数据。\r\n        variables?: TVariables;\r\n    }) => TData;\r\n}\r\n **/\r\n\r\n\r\n//引入useInfiniteScroll使用的四个要素：有滚动条的组件innerRef，hasMore，onFetch()，fetching；\r\n//<ScrollView >要么height:\"100%\"要么删除height参数让内容去撑开，不能使用height:\"70%\"之类的数，内部2次DIV嵌套,导致0.7*0.7=实际上内部高度。\r\n//较上层DIV若是style={{ height: \"xxx%\" }}，注意若父辈元素都没限定最小的高度，那么就会导致由底下的内容撑开了，这等价于没height参数=实际无效！；\"100%\"若父辈有px数就听父辈的。\r\n\r\n","D:\\home\\sei\\front-end\\src\\unit\\AttachedTask.tsx",["804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx, Global } from \"@emotion/react\";\r\nimport * as React from \"react\";\r\n\r\nimport {\r\n  Navbar,\r\n  Toolbar,\r\n  Input,\r\n  Text,\r\n  IconButton,\r\n  MenuList,\r\n  MenuItem,\r\n  useTheme,\r\n  InputBaseProps,\r\n  useToast,\r\n  LayerLoading,\r\n  Container,\r\n  ResponsivePopover,\r\n  IconMoreVertical,\r\n  MenuDivider, IconPackage, Button, IconChevronDown, IconArrowRight\r\n} from \"customize-easy-ui-component\";\r\n\r\n//import { useSession } from \"../auth\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport { Link,  useLocation } from \"wouter\";\r\nimport { Link as RouterLink } from \"wouter\";\r\nimport { useCancellationTask } from \"./task/db\";\r\nimport { DevfilterContext } from \"../context/DevfilterContext\";\r\n\r\n\r\ninterface AttachedTaskProps {\r\n  id?: string;\r\n  defaultTitle?: string;\r\n  defaultImage?: string;\r\n  defaultDescription?: string;\r\n  defaultIngredients?: any[];\r\n  readOnly?: boolean;\r\n  editable?: boolean;\r\n  defaultCredit?: string;\r\n  eqp?:any;\r\n}\r\n\r\nexport const AttachedTask: React.FunctionComponent<AttachedTaskProps> = ({\r\n  readOnly,\r\n  id,\r\n  editable,\r\n  defaultCredit = \"\",\r\n  defaultDescription,\r\n  defaultImage,\r\n  defaultIngredients,\r\n  defaultTitle = \"\",\r\n  eqp=null,\r\n}) => {\r\n  const theme = useTheme();\r\n  const toast = useToast();\r\n  const eqpId=id;\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [editing, setEditing] = React.useState(!readOnly);\r\n  const [image, ] = React.useState(defaultImage);\r\n  const [title, setTitle] = React.useState(defaultTitle);\r\n  const [taskId, setTaskId] = React.useState(null);\r\n  //直接取得EQP关联的task字段的对象。\r\n  const {task} =eqp;\r\n // const [ingredients, setIngredients] = React.useState<any>( dt||{} );\r\n  const [, setLocation] = useLocation();\r\n  const {filter, setFilter} =React.useContext(DevfilterContext);\r\n  const {result, submit:updateFunc, } = useCancellationTask({\r\n    taskid: taskId, reason:'测试期直接删'\r\n  });\r\n  //过滤对象or参数取值K/V；有些保留key不能随意使用。\r\n  const  devFilterArgs={\"ownerId\": id };\r\n  const  devFilterArgsUseU={\"useUid\": id };\r\n\r\n  console.log(\"页面刷新钩子AttachedTask entry=\",　\",设备id=\"+id+\";task=\",task,\";eqp=\",eqp ,\"filter=\",filter);\r\n\r\n  async function handleDelete(id: string) {\r\n    try {\r\n      await updateFunc();\r\n    } catch (err) {\r\n      toast({\r\n        title: \"后端报错\",\r\n        subtitle: err.message,\r\n        intent: \"danger\"\r\n      });\r\n      return;\r\n    }\r\n    setLocation(\"/device/\"+eqpId,  { replace: true } );\r\n  }\r\n  //跳转前分解步骤：点击doConfirm确认，异步完成了，然后才做路由切换。\r\n  const [doConfirm, setDoConfirm] = React.useState(false);\r\n  React.useEffect(() => {\r\n    if(doConfirm){\r\n      filter && ( setLocation('/device') );\r\n    }\r\n  }, [doConfirm,filter,setLocation]);\r\n\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        [theme.mediaQueries.md]: {\r\n          height: \"auto\",\r\n          display: \"block\"\r\n        }\r\n      }}\r\n    >\r\n      <hr/>\r\n      <Text\r\n        css={{\r\n          flex: 1,\r\n          textAlign: \"center\",\r\n          [theme.mediaQueries.md]: {\r\n            textAlign: \"left\"\r\n          }\r\n        }}\r\n        wrap={false}\r\n        variant=\"h5\"\r\n        gutter={false}\r\n      >\r\n        {eqp?.id}名下关联设备\r\n      </Text>\r\n\r\n      <div\r\n        css={{  //控制小屏时的导航条底下的整个页面滚动。\r\n          flex: 1,\r\n          [theme.mediaQueries.md]: {\r\n            flex: \"none\"\r\n          }\r\n        }}\r\n      >\r\n        <div>\r\n\r\n          <Container>\r\n            <div\r\n              css={{\r\n                paddingTop: theme.spaces.lg,\r\n                paddingBottom: theme.spaces.lg\r\n              }}\r\n            >\r\n                <div >\r\n\r\n                          <div\r\n                            css={{\r\n                              backgroundColor: false\r\n                                ? theme.colors.palette.blue.lightest\r\n                                : \"transparent\",\r\n                              display: \"flex\",\r\n                              marginBottom: theme.spaces.xs,\r\n                              justifyContent: \"space-between\",\r\n                              [theme.mediaQueries.md]: {\r\n                                width: \"600px\"\r\n                              }\r\n                            }}\r\n                          >\r\n                            <Text\r\n                              css={{\r\n                                paddingRight: theme.spaces.xs,\r\n                                backgroundColor: false\r\n                                  ? theme.colors.palette.blue.lightest\r\n                                  : \"white\"\r\n                              }}\r\n                            >\r\n                            设备 {id}\r\n                            </Text>\r\n\r\n                            <Text\r\n                              css={{\r\n                                paddingLeft: theme.spaces.xs,\r\n                                backgroundColor: false\r\n                                  ? theme.colors.palette.blue.lightest\r\n                                  : \"white\"\r\n                              }}\r\n                            >\r\n                              状态：{eqp.status||''}\r\n                            </Text>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                <Button\r\n                                  size=\"lg\"\r\n                                  intent=\"primary\"\r\n                                  iconAfter={<IconArrowRight />}\r\n                                  onPress={() => {\r\n                                    //这里派发出去editorSnapshot: outCome {...storage, ...outCome}都是按钮捕获的值，还要经过一轮render才会有最新值。\r\n                                    setFilter({...filter, ...devFilterArgs});\r\n                                    setDoConfirm(true);\r\n                                  } }\r\n                                >\r\n                                  去找该单位设备\r\n                                </Button>\r\n\r\n                            <Button\r\n                              size=\"lg\"\r\n                              intent=\"primary\"\r\n                              iconAfter={<IconArrowRight />}\r\n                              onPress={() => {\r\n                                //这里派发出去editorSnapshot: outCome {...storage, ...outCome}都是按钮捕获的值，还要经过一轮render才会有最新值。\r\n                                setFilter({...filter, ...devFilterArgsUseU});\r\n                                setDoConfirm(true);\r\n                              } }\r\n                            >\r\n                              该单位正在使用设备\r\n                            </Button>\r\n                          </div>\r\n\r\n                      </div>\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n      <LayerLoading loading={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\n",{"ruleId":"830","replacedBy":"831"},{"ruleId":"832","replacedBy":"833"},{"ruleId":"834","severity":1,"message":"835","line":9,"column":3,"nodeType":"836","messageId":"837","endLine":9,"endColumn":8},{"ruleId":"834","severity":1,"message":"838","line":10,"column":3,"nodeType":"836","messageId":"837","endLine":10,"endColumn":12},{"ruleId":"834","severity":1,"message":"839","line":11,"column":3,"nodeType":"836","messageId":"837","endLine":11,"endColumn":14},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"841","line":87,"column":7,"nodeType":"836","messageId":"837","endLine":87,"endColumn":24},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"842","severity":1,"message":"843","line":18,"column":1,"nodeType":"844","endLine":46,"endColumn":3},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"845","line":22,"column":18,"nodeType":"836","messageId":"837","endLine":22,"endColumn":28},{"ruleId":"834","severity":1,"message":"846","line":28,"column":10,"nodeType":"836","messageId":"837","endLine":28,"endColumn":14},{"ruleId":"834","severity":1,"message":"847","line":39,"column":11,"nodeType":"836","messageId":"837","endLine":39,"endColumn":17},{"ruleId":"834","severity":1,"message":"848","line":39,"column":44,"nodeType":"836","messageId":"837","endLine":39,"endColumn":52},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"849","line":2,"column":15,"nodeType":"836","messageId":"837","endLine":2,"endColumn":18},{"ruleId":"834","severity":1,"message":"850","line":9,"column":3,"nodeType":"836","messageId":"837","endLine":9,"endColumn":18},{"ruleId":"834","severity":1,"message":"851","line":10,"column":3,"nodeType":"836","messageId":"837","endLine":10,"endColumn":16},{"ruleId":"834","severity":1,"message":"852","line":11,"column":3,"nodeType":"836","messageId":"837","endLine":11,"endColumn":9},{"ruleId":"834","severity":1,"message":"853","line":11,"column":56,"nodeType":"836","messageId":"837","endLine":11,"endColumn":64},{"ruleId":"834","severity":1,"message":"854","line":11,"column":66,"nodeType":"836","messageId":"837","endLine":11,"endColumn":80},{"ruleId":"834","severity":1,"message":"855","line":11,"column":82,"nodeType":"836","messageId":"837","endLine":11,"endColumn":87},{"ruleId":"834","severity":1,"message":"856","line":27,"column":10,"nodeType":"836","messageId":"837","endLine":27,"endColumn":14},{"ruleId":"834","severity":1,"message":"857","line":27,"column":16,"nodeType":"836","messageId":"837","endLine":27,"endColumn":23},{"ruleId":"834","severity":1,"message":"858","line":35,"column":19,"nodeType":"836","messageId":"837","endLine":35,"endColumn":29},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"859","line":33,"column":10,"nodeType":"836","messageId":"837","endLine":33,"endColumn":24},{"ruleId":"860","severity":1,"message":"861","line":302,"column":30,"nodeType":"862","messageId":"863","endLine":302,"endColumn":32},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"864","line":16,"column":3,"nodeType":"836","messageId":"837","endLine":16,"endColumn":11},{"ruleId":"834","severity":1,"message":"865","line":18,"column":3,"nodeType":"836","messageId":"837","endLine":18,"endColumn":20},{"ruleId":"834","severity":1,"message":"866","line":19,"column":3,"nodeType":"836","messageId":"837","endLine":19,"endColumn":11},{"ruleId":"834","severity":1,"message":"867","line":20,"column":3,"nodeType":"836","messageId":"837","endLine":20,"endColumn":11},{"ruleId":"834","severity":1,"message":"868","line":21,"column":3,"nodeType":"836","messageId":"837","endLine":21,"endColumn":14},{"ruleId":"834","severity":1,"message":"869","line":22,"column":3,"nodeType":"836","messageId":"837","endLine":22,"endColumn":13},{"ruleId":"834","severity":1,"message":"870","line":22,"column":15,"nodeType":"836","messageId":"837","endLine":22,"endColumn":31},{"ruleId":"834","severity":1,"message":"871","line":25,"column":11,"nodeType":"836","messageId":"837","endLine":25,"endColumn":33},{"ruleId":"834","severity":1,"message":"872","line":35,"column":10,"nodeType":"836","messageId":"837","endLine":35,"endColumn":18},{"ruleId":"834","severity":1,"message":"845","line":36,"column":18,"nodeType":"836","messageId":"837","endLine":36,"endColumn":28},{"ruleId":"834","severity":1,"message":"873","line":56,"column":9,"nodeType":"836","messageId":"837","endLine":56,"endColumn":14},{"ruleId":"834","severity":1,"message":"874","line":59,"column":45,"nodeType":"836","messageId":"837","endLine":59,"endColumn":51},{"ruleId":"875","severity":1,"message":"876","line":72,"column":33,"nodeType":"877","messageId":"878","endLine":72,"endColumn":35},{"ruleId":"834","severity":1,"message":"879","line":158,"column":7,"nodeType":"836","messageId":"837","endLine":158,"endColumn":17},{"ruleId":"834","severity":1,"message":"880","line":172,"column":15,"nodeType":"836","messageId":"837","endLine":172,"endColumn":21},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"881","line":48,"column":34,"nodeType":"836","messageId":"837","endLine":48,"endColumn":42},{"ruleId":"860","severity":1,"message":"861","line":300,"column":30,"nodeType":"862","messageId":"863","endLine":300,"endColumn":32},{"ruleId":"842","severity":1,"message":"843","line":3,"column":1,"nodeType":"844","endLine":22,"endColumn":3},{"ruleId":"834","severity":1,"message":"882","line":80,"column":7,"nodeType":"836","messageId":"837","endLine":80,"endColumn":18},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"883","line":5,"column":15,"nodeType":"836","messageId":"837","endLine":5,"endColumn":22},{"ruleId":"834","severity":1,"message":"884","line":5,"column":24,"nodeType":"836","messageId":"837","endLine":5,"endColumn":29},{"ruleId":"834","severity":1,"message":"845","line":8,"column":18,"nodeType":"836","messageId":"837","endLine":8,"endColumn":28},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"885","line":389,"column":10,"nodeType":"836","messageId":"837","endLine":389,"endColumn":24},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"849","line":2,"column":15,"nodeType":"836","messageId":"837","endLine":2,"endColumn":18},{"ruleId":"834","severity":1,"message":"852","line":18,"column":34,"nodeType":"836","messageId":"837","endLine":18,"endColumn":40},{"ruleId":"834","severity":1,"message":"886","line":18,"column":55,"nodeType":"836","messageId":"837","endLine":18,"endColumn":63},{"ruleId":"834","severity":1,"message":"887","line":18,"column":65,"nodeType":"836","messageId":"837","endLine":18,"endColumn":73},{"ruleId":"834","severity":1,"message":"888","line":21,"column":9,"nodeType":"836","messageId":"837","endLine":21,"endColumn":15},{"ruleId":"834","severity":1,"message":"889","line":23,"column":10,"nodeType":"836","messageId":"837","endLine":23,"endColumn":21},{"ruleId":"834","severity":1,"message":"890","line":23,"column":23,"nodeType":"836","messageId":"837","endLine":23,"endColumn":39},{"ruleId":"834","severity":1,"message":"847","line":46,"column":10,"nodeType":"836","messageId":"837","endLine":46,"endColumn":16},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"891","line":5,"column":3,"nodeType":"836","messageId":"837","endLine":5,"endColumn":7},{"ruleId":"834","severity":1,"message":"892","line":6,"column":3,"nodeType":"836","messageId":"837","endLine":6,"endColumn":11},{"ruleId":"834","severity":1,"message":"893","line":7,"column":3,"nodeType":"836","messageId":"837","endLine":7,"endColumn":9},{"ruleId":"834","severity":1,"message":"869","line":8,"column":3,"nodeType":"836","messageId":"837","endLine":8,"endColumn":13},{"ruleId":"834","severity":1,"message":"894","line":9,"column":3,"nodeType":"836","messageId":"837","endLine":9,"endColumn":9},{"ruleId":"834","severity":1,"message":"866","line":10,"column":3,"nodeType":"836","messageId":"837","endLine":10,"endColumn":11},{"ruleId":"834","severity":1,"message":"870","line":13,"column":3,"nodeType":"836","messageId":"837","endLine":13,"endColumn":19},{"ruleId":"834","severity":1,"message":"864","line":15,"column":3,"nodeType":"836","messageId":"837","endLine":15,"endColumn":11},{"ruleId":"834","severity":1,"message":"867","line":15,"column":13,"nodeType":"836","messageId":"837","endLine":15,"endColumn":21},{"ruleId":"834","severity":1,"message":"868","line":15,"column":23,"nodeType":"836","messageId":"837","endLine":15,"endColumn":34},{"ruleId":"834","severity":1,"message":"865","line":15,"column":36,"nodeType":"836","messageId":"837","endLine":15,"endColumn":53},{"ruleId":"834","severity":1,"message":"895","line":22,"column":11,"nodeType":"836","messageId":"837","endLine":22,"endColumn":33},{"ruleId":"834","severity":1,"message":"896","line":26,"column":21,"nodeType":"836","messageId":"837","endLine":26,"endColumn":33},{"ruleId":"834","severity":1,"message":"897","line":33,"column":10,"nodeType":"836","messageId":"837","endLine":33,"endColumn":19},{"ruleId":"834","severity":1,"message":"898","line":34,"column":10,"nodeType":"836","messageId":"837","endLine":34,"endColumn":19},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"899","line":88,"column":5,"nodeType":"836","messageId":"837","endLine":88,"endColumn":14},{"ruleId":"834","severity":1,"message":"900","line":89,"column":5,"nodeType":"836","messageId":"837","endLine":89,"endColumn":10},{"ruleId":"834","severity":1,"message":"901","line":91,"column":5,"nodeType":"836","messageId":"837","endLine":91,"endColumn":16},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"902","line":22,"column":39,"nodeType":"836","messageId":"837","endLine":22,"endColumn":48},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"890","line":21,"column":10,"nodeType":"836","messageId":"837","endLine":21,"endColumn":26},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"903","line":60,"column":10,"nodeType":"836","messageId":"837","endLine":60,"endColumn":17},{"ruleId":"834","severity":1,"message":"904","line":65,"column":10,"nodeType":"836","messageId":"837","endLine":65,"endColumn":15},{"ruleId":"834","severity":1,"message":"905","line":67,"column":10,"nodeType":"836","messageId":"837","endLine":67,"endColumn":16},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"906","line":36,"column":11,"nodeType":"836","messageId":"837","endLine":36,"endColumn":36},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"907","line":22,"column":25,"nodeType":"836","messageId":"837","endLine":22,"endColumn":42},{"ruleId":"834","severity":1,"message":"908","line":54,"column":12,"nodeType":"836","messageId":"837","endLine":54,"endColumn":23},{"ruleId":"834","severity":1,"message":"909","line":55,"column":10,"nodeType":"836","messageId":"837","endLine":55,"endColumn":17},{"ruleId":"834","severity":1,"message":"910","line":55,"column":19,"nodeType":"836","messageId":"837","endLine":55,"endColumn":29},{"ruleId":"834","severity":1,"message":"903","line":56,"column":10,"nodeType":"836","messageId":"837","endLine":56,"endColumn":17},{"ruleId":"834","severity":1,"message":"904","line":61,"column":10,"nodeType":"836","messageId":"837","endLine":61,"endColumn":15},{"ruleId":"834","severity":1,"message":"911","line":62,"column":10,"nodeType":"836","messageId":"837","endLine":62,"endColumn":15},{"ruleId":"834","severity":1,"message":"912","line":62,"column":17,"nodeType":"836","messageId":"837","endLine":62,"endColumn":25},{"ruleId":"834","severity":1,"message":"905","line":64,"column":10,"nodeType":"836","messageId":"837","endLine":64,"endColumn":16},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"907","line":21,"column":11,"nodeType":"836","messageId":"837","endLine":21,"endColumn":28},{"ruleId":"834","severity":1,"message":"913","line":24,"column":30,"nodeType":"836","messageId":"837","endLine":24,"endColumn":34},{"ruleId":"834","severity":1,"message":"914","line":57,"column":9,"nodeType":"836","messageId":"837","endLine":57,"endColumn":14},{"ruleId":"834","severity":1,"message":"903","line":59,"column":10,"nodeType":"836","messageId":"837","endLine":59,"endColumn":17},{"ruleId":"834","severity":1,"message":"904","line":64,"column":10,"nodeType":"836","messageId":"837","endLine":64,"endColumn":15},{"ruleId":"834","severity":1,"message":"905","line":66,"column":10,"nodeType":"836","messageId":"837","endLine":66,"endColumn":16},{"ruleId":"915","severity":1,"message":"916","line":301,"column":23,"nodeType":"917","messageId":"918","endLine":301,"endColumn":25},{"ruleId":"915","severity":1,"message":"916","line":301,"column":35,"nodeType":"917","messageId":"918","endLine":301,"endColumn":37},{"ruleId":"915","severity":1,"message":"916","line":313,"column":22,"nodeType":"917","messageId":"918","endLine":313,"endColumn":24},{"ruleId":"915","severity":1,"message":"916","line":313,"column":44,"nodeType":"917","messageId":"918","endLine":313,"endColumn":46},{"ruleId":"915","severity":1,"message":"916","line":342,"column":41,"nodeType":"917","messageId":"918","endLine":342,"endColumn":43},{"ruleId":"915","severity":1,"message":"916","line":342,"column":68,"nodeType":"917","messageId":"918","endLine":342,"endColumn":70},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"919","line":52,"column":9,"nodeType":"836","messageId":"837","endLine":52,"endColumn":14},{"ruleId":"834","severity":1,"message":"903","line":54,"column":10,"nodeType":"836","messageId":"837","endLine":54,"endColumn":17},{"ruleId":"834","severity":1,"message":"904","line":59,"column":10,"nodeType":"836","messageId":"837","endLine":59,"endColumn":15},{"ruleId":"834","severity":1,"message":"905","line":61,"column":10,"nodeType":"836","messageId":"837","endLine":61,"endColumn":16},{"ruleId":"834","severity":1,"message":"920","line":65,"column":10,"nodeType":"836","messageId":"837","endLine":65,"endColumn":15},{"ruleId":"834","severity":1,"message":"921","line":76,"column":18,"nodeType":"836","messageId":"837","endLine":76,"endColumn":30},{"ruleId":"834","severity":1,"message":"922","line":309,"column":10,"nodeType":"836","messageId":"837","endLine":309,"endColumn":17},{"ruleId":"834","severity":1,"message":"858","line":309,"column":19,"nodeType":"836","messageId":"837","endLine":309,"endColumn":29},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"894","line":10,"column":3,"nodeType":"836","messageId":"837","endLine":10,"endColumn":9},{"ruleId":"834","severity":1,"message":"923","line":28,"column":8,"nodeType":"836","messageId":"837","endLine":28,"endColumn":12},{"ruleId":"834","severity":1,"message":"924","line":29,"column":10,"nodeType":"836","messageId":"837","endLine":29,"endColumn":32},{"ruleId":"834","severity":1,"message":"925","line":29,"column":34,"nodeType":"836","messageId":"837","endLine":29,"endColumn":54},{"ruleId":"834","severity":1,"message":"906","line":51,"column":11,"nodeType":"836","messageId":"837","endLine":51,"endColumn":36},{"ruleId":"834","severity":1,"message":"914","line":64,"column":9,"nodeType":"836","messageId":"837","endLine":64,"endColumn":14},{"ruleId":"834","severity":1,"message":"926","line":83,"column":10,"nodeType":"836","messageId":"837","endLine":83,"endColumn":16},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"842","severity":1,"message":"843","line":3,"column":1,"nodeType":"844","endLine":43,"endColumn":3},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"927","line":9,"column":31,"nodeType":"836","messageId":"837","endLine":9,"endColumn":53},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"927","line":11,"column":3,"nodeType":"836","messageId":"837","endLine":11,"endColumn":25},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"928","severity":1,"message":"929","line":29,"column":7,"nodeType":"930","endLine":34,"endColumn":4},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"931","line":2,"column":15,"nodeType":"836","messageId":"837","endLine":2,"endColumn":21},{"ruleId":"834","severity":1,"message":"932","line":12,"column":3,"nodeType":"836","messageId":"837","endLine":12,"endColumn":9},{"ruleId":"834","severity":1,"message":"933","line":13,"column":3,"nodeType":"836","messageId":"837","endLine":13,"endColumn":10},{"ruleId":"834","severity":1,"message":"869","line":17,"column":3,"nodeType":"836","messageId":"837","endLine":17,"endColumn":13},{"ruleId":"834","severity":1,"message":"866","line":18,"column":3,"nodeType":"836","messageId":"837","endLine":18,"endColumn":11},{"ruleId":"834","severity":1,"message":"867","line":19,"column":3,"nodeType":"836","messageId":"837","endLine":19,"endColumn":11},{"ruleId":"834","severity":1,"message":"865","line":25,"column":3,"nodeType":"836","messageId":"837","endLine":25,"endColumn":20},{"ruleId":"834","severity":1,"message":"870","line":26,"column":3,"nodeType":"836","messageId":"837","endLine":26,"endColumn":19},{"ruleId":"834","severity":1,"message":"934","line":27,"column":3,"nodeType":"836","messageId":"837","endLine":27,"endColumn":16},{"ruleId":"834","severity":1,"message":"935","line":28,"column":4,"nodeType":"836","messageId":"837","endLine":28,"endColumn":15},{"ruleId":"834","severity":1,"message":"868","line":28,"column":17,"nodeType":"836","messageId":"837","endLine":28,"endColumn":28},{"ruleId":"834","severity":1,"message":"936","line":30,"column":29,"nodeType":"836","messageId":"837","endLine":30,"endColumn":43},{"ruleId":"834","severity":1,"message":"913","line":32,"column":10,"nodeType":"836","messageId":"837","endLine":32,"endColumn":14},{"ruleId":"834","severity":1,"message":"845","line":33,"column":18,"nodeType":"836","messageId":"837","endLine":33,"endColumn":28},{"ruleId":"834","severity":1,"message":"937","line":36,"column":7,"nodeType":"836","messageId":"837","endLine":36,"endColumn":10},{"ruleId":"834","severity":1,"message":"910","line":53,"column":19,"nodeType":"836","messageId":"837","endLine":53,"endColumn":29},{"ruleId":"834","severity":1,"message":"938","line":65,"column":10,"nodeType":"836","messageId":"837","endLine":65,"endColumn":17},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"870","line":11,"column":53,"nodeType":"836","messageId":"837","endLine":11,"endColumn":69},{"ruleId":"834","severity":1,"message":"865","line":11,"column":71,"nodeType":"836","messageId":"837","endLine":11,"endColumn":88},{"ruleId":"834","severity":1,"message":"939","line":16,"column":10,"nodeType":"836","messageId":"837","endLine":16,"endColumn":25},{"ruleId":"834","severity":1,"message":"940","line":32,"column":33,"nodeType":"836","messageId":"837","endLine":32,"endColumn":40},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"941","line":11,"column":3,"nodeType":"836","messageId":"837","endLine":11,"endColumn":8},{"ruleId":"834","severity":1,"message":"942","line":14,"column":3,"nodeType":"836","messageId":"837","endLine":14,"endColumn":13},{"ruleId":"943","severity":1,"message":"944","line":28,"column":14,"nodeType":"836","messageId":"945","endLine":30,"endColumn":2},{"ruleId":"834","severity":1,"message":"946","line":36,"column":35,"nodeType":"836","messageId":"837","endLine":36,"endColumn":46},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"927","line":19,"column":11,"nodeType":"836","messageId":"837","endLine":19,"endColumn":33},{"ruleId":"834","severity":1,"message":"947","line":19,"column":35,"nodeType":"836","messageId":"837","endLine":19,"endColumn":52},{"ruleId":"834","severity":1,"message":"948","line":11,"column":10,"nodeType":"836","messageId":"837","endLine":11,"endColumn":19},{"ruleId":"834","severity":1,"message":"949","line":12,"column":13,"nodeType":"836","messageId":"837","endLine":12,"endColumn":18},{"ruleId":"834","severity":1,"message":"908","line":200,"column":12,"nodeType":"836","messageId":"837","endLine":200,"endColumn":23},{"ruleId":"830","replacedBy":"831"},{"ruleId":"832","replacedBy":"833"},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"927","line":8,"column":11,"nodeType":"836","messageId":"837","endLine":8,"endColumn":33},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"847","line":199,"column":10,"nodeType":"836","messageId":"837","endLine":199,"endColumn":16},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"842","severity":1,"message":"843","line":7,"column":1,"nodeType":"844","endLine":56,"endColumn":3},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"927","line":18,"column":3,"nodeType":"836","messageId":"837","endLine":18,"endColumn":25},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"927","line":11,"column":3,"nodeType":"836","messageId":"837","endLine":11,"endColumn":25},{"ruleId":"875","severity":1,"message":"876","line":188,"column":57,"nodeType":"877","messageId":"878","endLine":188,"endColumn":59},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"950","line":17,"column":10,"nodeType":"836","messageId":"837","endLine":17,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"950","line":17,"column":10,"nodeType":"836","messageId":"837","endLine":17,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"873","line":18,"column":9,"nodeType":"836","messageId":"837","endLine":18,"endColumn":14},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"932","line":6,"column":3,"nodeType":"836","messageId":"837","endLine":6,"endColumn":9},{"ruleId":"834","severity":1,"message":"933","line":7,"column":3,"nodeType":"836","messageId":"837","endLine":7,"endColumn":10},{"ruleId":"834","severity":1,"message":"869","line":10,"column":3,"nodeType":"836","messageId":"837","endLine":10,"endColumn":13},{"ruleId":"834","severity":1,"message":"866","line":11,"column":3,"nodeType":"836","messageId":"837","endLine":11,"endColumn":11},{"ruleId":"834","severity":1,"message":"867","line":12,"column":3,"nodeType":"836","messageId":"837","endLine":12,"endColumn":11},{"ruleId":"834","severity":1,"message":"865","line":17,"column":3,"nodeType":"836","messageId":"837","endLine":17,"endColumn":20},{"ruleId":"834","severity":1,"message":"870","line":18,"column":3,"nodeType":"836","messageId":"837","endLine":18,"endColumn":19},{"ruleId":"834","severity":1,"message":"934","line":19,"column":3,"nodeType":"836","messageId":"837","endLine":19,"endColumn":16},{"ruleId":"834","severity":1,"message":"951","line":19,"column":18,"nodeType":"836","messageId":"837","endLine":19,"endColumn":23},{"ruleId":"834","severity":1,"message":"952","line":19,"column":25,"nodeType":"836","messageId":"837","endLine":19,"endColumn":39},{"ruleId":"834","severity":1,"message":"845","line":24,"column":18,"nodeType":"836","messageId":"837","endLine":24,"endColumn":28},{"ruleId":"834","severity":1,"message":"913","line":24,"column":30,"nodeType":"836","messageId":"837","endLine":24,"endColumn":34},{"ruleId":"834","severity":1,"message":"903","line":61,"column":10,"nodeType":"836","messageId":"837","endLine":61,"endColumn":17},{"ruleId":"834","severity":1,"message":"904","line":66,"column":10,"nodeType":"836","messageId":"837","endLine":66,"endColumn":15},{"ruleId":"834","severity":1,"message":"911","line":68,"column":10,"nodeType":"836","messageId":"837","endLine":68,"endColumn":15},{"ruleId":"834","severity":1,"message":"912","line":68,"column":17,"nodeType":"836","messageId":"837","endLine":68,"endColumn":25},{"ruleId":"834","severity":1,"message":"905","line":70,"column":10,"nodeType":"836","messageId":"837","endLine":70,"endColumn":16},{"ruleId":"834","severity":1,"message":"953","line":76,"column":43,"nodeType":"836","messageId":"837","endLine":76,"endColumn":54},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"931","line":2,"column":15,"nodeType":"836","messageId":"837","endLine":2,"endColumn":21},{"ruleId":"834","severity":1,"message":"932","line":6,"column":3,"nodeType":"836","messageId":"837","endLine":6,"endColumn":9},{"ruleId":"834","severity":1,"message":"933","line":7,"column":3,"nodeType":"836","messageId":"837","endLine":7,"endColumn":10},{"ruleId":"834","severity":1,"message":"951","line":8,"column":3,"nodeType":"836","messageId":"837","endLine":8,"endColumn":8},{"ruleId":"834","severity":1,"message":"869","line":10,"column":3,"nodeType":"836","messageId":"837","endLine":10,"endColumn":13},{"ruleId":"834","severity":1,"message":"954","line":14,"column":3,"nodeType":"836","messageId":"837","endLine":14,"endColumn":17},{"ruleId":"834","severity":1,"message":"870","line":19,"column":3,"nodeType":"836","messageId":"837","endLine":19,"endColumn":19},{"ruleId":"834","severity":1,"message":"935","line":20,"column":3,"nodeType":"836","messageId":"837","endLine":20,"endColumn":14},{"ruleId":"834","severity":1,"message":"888","line":24,"column":9,"nodeType":"836","messageId":"837","endLine":24,"endColumn":15},{"ruleId":"834","severity":1,"message":"845","line":26,"column":18,"nodeType":"836","messageId":"837","endLine":26,"endColumn":28},{"ruleId":"834","severity":1,"message":"955","line":56,"column":19,"nodeType":"836","messageId":"837","endLine":56,"endColumn":29},{"ruleId":"834","severity":1,"message":"909","line":57,"column":10,"nodeType":"836","messageId":"837","endLine":57,"endColumn":17},{"ruleId":"834","severity":1,"message":"910","line":57,"column":19,"nodeType":"836","messageId":"837","endLine":57,"endColumn":29},{"ruleId":"834","severity":1,"message":"904","line":58,"column":10,"nodeType":"836","messageId":"837","endLine":58,"endColumn":15},{"ruleId":"834","severity":1,"message":"911","line":59,"column":10,"nodeType":"836","messageId":"837","endLine":59,"endColumn":15},{"ruleId":"834","severity":1,"message":"912","line":59,"column":17,"nodeType":"836","messageId":"837","endLine":59,"endColumn":25},{"ruleId":"834","severity":1,"message":"847","line":65,"column":10,"nodeType":"836","messageId":"837","endLine":65,"endColumn":16},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"849","line":2,"column":15,"nodeType":"836","messageId":"837","endLine":2,"endColumn":18},{"ruleId":"834","severity":1,"message":"852","line":18,"column":34,"nodeType":"836","messageId":"837","endLine":18,"endColumn":40},{"ruleId":"834","severity":1,"message":"888","line":21,"column":9,"nodeType":"836","messageId":"837","endLine":21,"endColumn":15},{"ruleId":"834","severity":1,"message":"956","line":22,"column":68,"nodeType":"836","messageId":"837","endLine":22,"endColumn":76},{"ruleId":"834","severity":1,"message":"889","line":23,"column":10,"nodeType":"836","messageId":"837","endLine":23,"endColumn":21},{"ruleId":"834","severity":1,"message":"890","line":23,"column":23,"nodeType":"836","messageId":"837","endLine":23,"endColumn":39},{"ruleId":"834","severity":1,"message":"957","line":29,"column":10,"nodeType":"836","messageId":"837","endLine":29,"endColumn":14},{"ruleId":"834","severity":1,"message":"958","line":43,"column":10,"nodeType":"836","messageId":"837","endLine":43,"endColumn":18},{"ruleId":"834","severity":1,"message":"847","line":51,"column":10,"nodeType":"836","messageId":"837","endLine":51,"endColumn":16},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"959","line":10,"column":3,"nodeType":"836","messageId":"837","endLine":10,"endColumn":10},{"ruleId":"834","severity":1,"message":"886","line":14,"column":3,"nodeType":"836","messageId":"837","endLine":14,"endColumn":11},{"ruleId":"834","severity":1,"message":"935","line":17,"column":23,"nodeType":"836","messageId":"837","endLine":17,"endColumn":34},{"ruleId":"834","severity":1,"message":"896","line":21,"column":21,"nodeType":"836","messageId":"837","endLine":21,"endColumn":33},{"ruleId":"834","severity":1,"message":"906","line":28,"column":11,"nodeType":"836","messageId":"837","endLine":28,"endColumn":36},{"ruleId":"834","severity":1,"message":"940","line":74,"column":26,"nodeType":"836","messageId":"837","endLine":74,"endColumn":33},{"ruleId":"834","severity":1,"message":"960","line":98,"column":10,"nodeType":"836","messageId":"837","endLine":98,"endColumn":17},{"ruleId":"834","severity":1,"message":"961","line":98,"column":19,"nodeType":"836","messageId":"837","endLine":98,"endColumn":29},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"890","line":21,"column":10,"nodeType":"836","messageId":"837","endLine":21,"endColumn":26},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"903","line":60,"column":10,"nodeType":"836","messageId":"837","endLine":60,"endColumn":17},{"ruleId":"834","severity":1,"message":"904","line":65,"column":10,"nodeType":"836","messageId":"837","endLine":65,"endColumn":15},{"ruleId":"834","severity":1,"message":"905","line":67,"column":10,"nodeType":"836","messageId":"837","endLine":67,"endColumn":16},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"906","line":36,"column":11,"nodeType":"836","messageId":"837","endLine":36,"endColumn":36},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"873","line":18,"column":9,"nodeType":"836","messageId":"837","endLine":18,"endColumn":14},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"932","line":6,"column":3,"nodeType":"836","messageId":"837","endLine":6,"endColumn":9},{"ruleId":"834","severity":1,"message":"933","line":7,"column":3,"nodeType":"836","messageId":"837","endLine":7,"endColumn":10},{"ruleId":"834","severity":1,"message":"869","line":10,"column":3,"nodeType":"836","messageId":"837","endLine":10,"endColumn":13},{"ruleId":"834","severity":1,"message":"866","line":11,"column":3,"nodeType":"836","messageId":"837","endLine":11,"endColumn":11},{"ruleId":"834","severity":1,"message":"867","line":12,"column":3,"nodeType":"836","messageId":"837","endLine":12,"endColumn":11},{"ruleId":"834","severity":1,"message":"865","line":17,"column":3,"nodeType":"836","messageId":"837","endLine":17,"endColumn":20},{"ruleId":"834","severity":1,"message":"870","line":18,"column":3,"nodeType":"836","messageId":"837","endLine":18,"endColumn":19},{"ruleId":"834","severity":1,"message":"934","line":19,"column":3,"nodeType":"836","messageId":"837","endLine":19,"endColumn":16},{"ruleId":"834","severity":1,"message":"951","line":19,"column":18,"nodeType":"836","messageId":"837","endLine":19,"endColumn":23},{"ruleId":"834","severity":1,"message":"952","line":19,"column":25,"nodeType":"836","messageId":"837","endLine":19,"endColumn":39},{"ruleId":"834","severity":1,"message":"845","line":24,"column":18,"nodeType":"836","messageId":"837","endLine":24,"endColumn":28},{"ruleId":"834","severity":1,"message":"913","line":24,"column":30,"nodeType":"836","messageId":"837","endLine":24,"endColumn":34},{"ruleId":"834","severity":1,"message":"903","line":61,"column":10,"nodeType":"836","messageId":"837","endLine":61,"endColumn":17},{"ruleId":"834","severity":1,"message":"904","line":66,"column":10,"nodeType":"836","messageId":"837","endLine":66,"endColumn":15},{"ruleId":"834","severity":1,"message":"911","line":68,"column":10,"nodeType":"836","messageId":"837","endLine":68,"endColumn":15},{"ruleId":"834","severity":1,"message":"912","line":68,"column":17,"nodeType":"836","messageId":"837","endLine":68,"endColumn":25},{"ruleId":"834","severity":1,"message":"905","line":70,"column":10,"nodeType":"836","messageId":"837","endLine":70,"endColumn":16},{"ruleId":"834","severity":1,"message":"953","line":76,"column":43,"nodeType":"836","messageId":"837","endLine":76,"endColumn":54},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"931","line":2,"column":15,"nodeType":"836","messageId":"837","endLine":2,"endColumn":21},{"ruleId":"834","severity":1,"message":"932","line":12,"column":3,"nodeType":"836","messageId":"837","endLine":12,"endColumn":9},{"ruleId":"834","severity":1,"message":"933","line":13,"column":3,"nodeType":"836","messageId":"837","endLine":13,"endColumn":10},{"ruleId":"834","severity":1,"message":"869","line":17,"column":3,"nodeType":"836","messageId":"837","endLine":17,"endColumn":13},{"ruleId":"834","severity":1,"message":"866","line":18,"column":3,"nodeType":"836","messageId":"837","endLine":18,"endColumn":11},{"ruleId":"834","severity":1,"message":"867","line":19,"column":3,"nodeType":"836","messageId":"837","endLine":19,"endColumn":11},{"ruleId":"834","severity":1,"message":"865","line":25,"column":3,"nodeType":"836","messageId":"837","endLine":25,"endColumn":20},{"ruleId":"834","severity":1,"message":"870","line":26,"column":3,"nodeType":"836","messageId":"837","endLine":26,"endColumn":19},{"ruleId":"834","severity":1,"message":"934","line":27,"column":3,"nodeType":"836","messageId":"837","endLine":27,"endColumn":16},{"ruleId":"834","severity":1,"message":"935","line":28,"column":3,"nodeType":"836","messageId":"837","endLine":28,"endColumn":14},{"ruleId":"834","severity":1,"message":"868","line":28,"column":16,"nodeType":"836","messageId":"837","endLine":28,"endColumn":27},{"ruleId":"834","severity":1,"message":"936","line":30,"column":29,"nodeType":"836","messageId":"837","endLine":30,"endColumn":43},{"ruleId":"834","severity":1,"message":"913","line":32,"column":10,"nodeType":"836","messageId":"837","endLine":32,"endColumn":14},{"ruleId":"834","severity":1,"message":"845","line":33,"column":18,"nodeType":"836","messageId":"837","endLine":33,"endColumn":28},{"ruleId":"834","severity":1,"message":"937","line":36,"column":7,"nodeType":"836","messageId":"837","endLine":36,"endColumn":10},{"ruleId":"834","severity":1,"message":"910","line":53,"column":19,"nodeType":"836","messageId":"837","endLine":53,"endColumn":29},{"ruleId":"834","severity":1,"message":"938","line":65,"column":10,"nodeType":"836","messageId":"837","endLine":65,"endColumn":17},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"840","line":2,"column":10,"nodeType":"836","messageId":"837","endLine":2,"endColumn":13},{"ruleId":"834","severity":1,"message":"931","line":2,"column":15,"nodeType":"836","messageId":"837","endLine":2,"endColumn":21},{"ruleId":"834","severity":1,"message":"932","line":6,"column":3,"nodeType":"836","messageId":"837","endLine":6,"endColumn":9},{"ruleId":"834","severity":1,"message":"933","line":7,"column":3,"nodeType":"836","messageId":"837","endLine":7,"endColumn":10},{"ruleId":"834","severity":1,"message":"951","line":8,"column":3,"nodeType":"836","messageId":"837","endLine":8,"endColumn":8},{"ruleId":"834","severity":1,"message":"869","line":10,"column":3,"nodeType":"836","messageId":"837","endLine":10,"endColumn":13},{"ruleId":"834","severity":1,"message":"866","line":11,"column":3,"nodeType":"836","messageId":"837","endLine":11,"endColumn":11},{"ruleId":"834","severity":1,"message":"867","line":12,"column":3,"nodeType":"836","messageId":"837","endLine":12,"endColumn":11},{"ruleId":"834","severity":1,"message":"954","line":14,"column":3,"nodeType":"836","messageId":"837","endLine":14,"endColumn":17},{"ruleId":"834","severity":1,"message":"865","line":18,"column":3,"nodeType":"836","messageId":"837","endLine":18,"endColumn":20},{"ruleId":"834","severity":1,"message":"870","line":19,"column":3,"nodeType":"836","messageId":"837","endLine":19,"endColumn":19},{"ruleId":"834","severity":1,"message":"935","line":20,"column":3,"nodeType":"836","messageId":"837","endLine":20,"endColumn":14},{"ruleId":"834","severity":1,"message":"868","line":20,"column":16,"nodeType":"836","messageId":"837","endLine":20,"endColumn":27},{"ruleId":"834","severity":1,"message":"850","line":20,"column":37,"nodeType":"836","messageId":"837","endLine":20,"endColumn":52},{"ruleId":"834","severity":1,"message":"888","line":24,"column":9,"nodeType":"836","messageId":"837","endLine":24,"endColumn":15},{"ruleId":"834","severity":1,"message":"913","line":25,"column":10,"nodeType":"836","messageId":"837","endLine":25,"endColumn":14},{"ruleId":"834","severity":1,"message":"845","line":26,"column":18,"nodeType":"836","messageId":"837","endLine":26,"endColumn":28},{"ruleId":"834","severity":1,"message":"955","line":57,"column":19,"nodeType":"836","messageId":"837","endLine":57,"endColumn":29},{"ruleId":"834","severity":1,"message":"909","line":58,"column":10,"nodeType":"836","messageId":"837","endLine":58,"endColumn":17},{"ruleId":"834","severity":1,"message":"910","line":58,"column":19,"nodeType":"836","messageId":"837","endLine":58,"endColumn":29},{"ruleId":"834","severity":1,"message":"904","line":59,"column":10,"nodeType":"836","messageId":"837","endLine":59,"endColumn":15},{"ruleId":"834","severity":1,"message":"911","line":60,"column":10,"nodeType":"836","messageId":"837","endLine":60,"endColumn":15},{"ruleId":"834","severity":1,"message":"912","line":60,"column":17,"nodeType":"836","messageId":"837","endLine":60,"endColumn":25},{"ruleId":"834","severity":1,"message":"962","line":61,"column":18,"nodeType":"836","messageId":"837","endLine":61,"endColumn":27},{"ruleId":"834","severity":1,"message":"847","line":67,"column":10,"nodeType":"836","messageId":"837","endLine":67,"endColumn":16},{"ruleId":"834","severity":1,"message":"963","line":76,"column":18,"nodeType":"836","messageId":"837","endLine":76,"endColumn":30},"no-native-reassign",["964"],"no-negated-in-lhs",["965"],"@typescript-eslint/no-unused-vars","'empty' is defined but never used.","Identifier","unusedVar","'Reference' is defined but never used.","'FieldPolicy' is defined but never used.","'jsx' is defined but never used.","'NestingtRoute_old' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'RouterLink' is defined but never used.","'user' is assigned a value but never used.","'result' is assigned a value but never used.","'errLogin' is assigned a value but never used.","'css' is defined but never used.","'IconChevronDown' is defined but never used.","'IconChevronUp' is defined but never used.","'Select' is defined but never used.","'TabPanel' is defined but never used.","'IconArrowRight' is defined but never used.","'Layer' is defined but never used.","'show' is assigned a value but never used.","'setShow' is assigned a value but never used.","'setTplType' is assigned a value but never used.","'useCountOfTask' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'Skeleton' is defined but never used.","'ResponsivePopover' is defined but never used.","'MenuList' is defined but never used.","'MenuItem' is defined but never used.","'IconPackage' is defined but never used.","'IconButton' is defined but never used.","'IconMoreVertical' is defined but never used.","'useQueryOriginalRecord' is defined but never used.","'useQuery' is defined but never used.","'theme' is assigned a value but never used.","'called' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'filtercomp' is assigned a value but never used.","'setInp' is assigned a value but never used.","'setDevfl' is assigned a value but never used.","'GET_DEVICES' is assigned a value but never used.","'Divider' is defined but never used.","'Embed' is defined but never used.","'SearchTitle_删除' is defined but never used.","'IconPlus' is defined but never used.","'DarkMode' is defined but never used.","'Helmet' is defined but never used.","'ContainLine' is defined but never used.","'TransparentInput' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'Avatar' is defined but never used.","'Button' is defined but never used.","'usePaginateQueryDevice' is defined but never used.","'StackContext' is defined but never used.","'useEffect' is defined but never used.","'useInView' is defined but never used.","'navHeight' is assigned a value but never used.","'index' is assigned a value but never used.","'changeIndex' is assigned a value but never used.","'Touchable' is defined but never used.","'content' is assigned a value but never used.","'image' is assigned a value but never used.","'credit' is assigned a value but never used.","'ResponseLikeAlgoliasearch' is defined but never used.","'useDispatchIspMen' is defined but never used.","'setLocation' is assigned a value but never used.","'editing' is assigned a value but never used.","'setEditing' is assigned a value but never used.","'title' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'Link' is defined but never used.","'toast' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'ispId' is assigned a value but never used.","'error' is assigned a value but never used.","'updateRecipe' is defined but never used.","'tplType' is assigned a value but never used.","'find' is defined but never used.","'useDeleteRequestFollow' is defined but never used.","'usePaginateQueryUser' is defined but never used.","'filter' is assigned a value but never used.","'InternalItemHandResult' is defined but never used.","react-hooks/exhaustive-deps","The 'filtercomp' object makes the dependencies of useEffect Hook (at line 58) change on every render. To fix this, wrap the initialization of 'filtercomp' in its own useMemo() Hook.","VariableDeclarator","'Global' is defined but never used.","'Navbar' is defined but never used.","'Toolbar' is defined but never used.","'IconArrowLeft' is defined but never used.","'MenuDivider' is defined but never used.","'useUpdateEntry' is defined but never used.","'log' is assigned a value but never used.","'Options' is assigned a value but never used.","'useApolloClient' is defined but never used.","'refetch' is assigned a value but never used.","'Stack' is defined but never used.","'StackTitle' is defined but never used.","@typescript-eslint/no-redeclare","'DeviceListInner' is already defined.","redeclared","'updateQuery' is assigned a value but never used.","'InternalItemProps' is defined but never used.","'StackItem' is defined but never used.","'React' is defined but never used.","'Ref' is defined but never used.","'Input' is defined but never used.","'InputGroupLine' is defined but never used.","'updateError' is assigned a value but never used.","'InputBaseProps' is defined but never used.","'setLoading' is assigned a value but never used.","'Redirect' is defined but never used.","'Path' is defined but never used.","'location' is assigned a value but never used.","'Popover' is defined but never used.","'hasMore' is assigned a value but never used.","'setHasMore' is assigned a value but never used.","'setTaskId' is assigned a value but never used.","'handleDelete' is defined but never used.","no-global-assign","no-unsafe-negation"]